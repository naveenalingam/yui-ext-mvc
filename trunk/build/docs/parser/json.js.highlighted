<div class="highlight" ><pre><span class="c">/**</span>
<span class="c">    json.js</span>
<span class="c">    2007-08-19</span>
<span class="c"></span>
<span class="c">    Public Domain</span>
<span class="c"></span>
<span class="c">    This file adds these methods to JavaScript:</span>
<span class="c"></span>
<span class="c">        array.toJSONString(whitelist)</span>
<span class="c">        boolean.toJSONString()</span>
<span class="c">        date.toJSONString()</span>
<span class="c">        number.toJSONString()</span>
<span class="c">        object.toJSONString(whitelist)</span>
<span class="c">        string.toJSONString()</span>
<span class="c">            These methods produce a JSON text from a JavaScript value.</span>
<span class="c">            It must not contain any cyclical references. Illegal values</span>
<span class="c">            will be excluded.</span>
<span class="c"></span>
<span class="c">            The default conversion for dates is to an ISO string. You can</span>
<span class="c">            add a toJSONString method to any date object to get a different</span>
<span class="c">            representation.</span>
<span class="c"></span>
<span class="c">            The object and array methods can take an optional whitelist</span>
<span class="c">            argument. A whitelist is an array of strings. If it is provided,</span>
<span class="c">            keys in objects not found in the whitelist are excluded.</span>
<span class="c"></span>
<span class="c">        string.parseJSON(filter)</span>
<span class="c">            This method parses a JSON text to produce an object or</span>
<span class="c">            array. It can throw a SyntaxError exception.</span>
<span class="c"></span>
<span class="c">            The optional filter parameter is a function which can filter and</span>
<span class="c">            transform the results. It receives each of the keys and values, and</span>
<span class="c">            its return value is used instead of the original value. If it</span>
<span class="c">            returns what it received, then structure is not modified. If it</span>
<span class="c">            returns undefined then the member is deleted.</span>
<span class="c"></span>
<span class="c">            Example:</span>
<span class="c"></span>
<span class="c">            // Parse the text. If a key contains the string &#39;date&#39; then</span>
<span class="c">            // convert the value to a date.</span>
<span class="c"></span>
<span class="c">            myData = text.parseJSON(function (key, value) {</span>
<span class="c">                return key.indexOf(&#39;date&#39;) &gt;= 0 ? new Date(value) : value;</span>
<span class="c">            });</span>
<span class="c"></span>
<span class="c">    It is expected that these methods will formally become part of the</span>
<span class="c">    JavaScript Programming Language in the Fourth Edition of the</span>
<span class="c">    ECMAScript standard in 2008.</span>
<span class="c"></span>
<span class="c">    This file will break programs with improper for..in loops. See</span>
<span class="c">    http://yuiblog.com/blog/2006/09/26/for-in-intrigue/</span>
<span class="c"></span>
<span class="c">    This is a reference implementation. You are free to copy, modify, or</span>
<span class="c">    redistribute.</span>
<span class="c"></span>
<span class="c">    Use your own copy. It is extremely unwise to load untrusted third party</span>
<span class="c">    code into your pages.</span>
<span class="c"> * @module json</span>
<span class="c"> * @namespace window</span>
<span class="c"> */</span>

<span class="c">/*jslint evil: true */</span>

<span class="c">// Augment the basic prototypes if they have not already been augmented.</span>
<span class="c"></span>
<span class="k">if</span> <span class="o">(!</span><span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">)</span> <span class="o">{</span>

    <span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">w</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">[],</span>     <span class="c">// The array holding the partial texts.</span>
<span class="c"></span>            <span class="nx">i</span><span class="o">,</span>          <span class="c">// Loop counter.</span>
<span class="c"></span>            <span class="nx">l</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">length</span><span class="o">,</span>
            <span class="nx">v</span><span class="o">;</span>          <span class="c">// The value to be stringified.</span>
<span class="c"></span>
<span class="c">// For each value in this array...</span>
<span class="c"></span>
        <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">v</span> <span class="o">=</span> <span class="k">this</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
            <span class="nx">switch</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>

<span class="c">// Serialize a JavaScript object value. Ignore objects thats lack the</span>
<span class="c">// toJSONString method. Due to a specification error in ECMAScript,</span>
<span class="c">// typeof null is &#39;object&#39;, so watch out for that case.</span>
<span class="c"></span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">(</span><span class="nx">w</span><span class="o">));</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="s1">&#39;null&#39;</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">break</span><span class="o">;</span>

            <span class="nx">case</span> <span class="s1">&#39;string&#39;</span><span class="o">:</span>
            <span class="nx">case</span> <span class="s1">&#39;number&#39;</span><span class="o">:</span>
            <span class="nx">case</span> <span class="s1">&#39;boolean&#39;</span><span class="o">:</span>
                <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">());</span>

<span class="c">// Values without a JSON representation are ignored.</span>
<span class="c"></span>
            <span class="o">}</span>
        <span class="o">}</span>

<span class="c">// Join all of the member texts together and wrap them in brackets.</span>
<span class="c"></span>
        <span class="k">return</span> <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="o">;</span>
    <span class="o">};</span>


    <span class="nb">Boolean</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nb">String</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">};</span>


    <span class="nb">Date</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>

<span class="c">// Eventually, this method will be based on the date.toISOString method.</span>
<span class="c"></span>
        <span class="k">function</span> <span class="nx">f</span><span class="o">(</span><span class="nx">n</span><span class="o">)</span> <span class="o">{</span>

<span class="c">// Format integers to have at least two digits.</span>
<span class="c"></span>
            <span class="k">return</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="m">10</span> <span class="o">?</span> <span class="s1">&#39;0&#39;</span> <span class="o">+</span> <span class="nx">n</span> <span class="o">:</span> <span class="nx">n</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">getUTCFullYear</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
                <span class="nx">f</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">getUTCMonth</span><span class="o">()</span> <span class="o">+</span> <span class="m">1</span><span class="o">)</span>  <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
                <span class="nx">f</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">getUTCDate</span><span class="o">())</span>       <span class="o">+</span> <span class="s1">&#39;T&#39;</span> <span class="o">+</span>
                <span class="nx">f</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">getUTCHours</span><span class="o">())</span>      <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                <span class="nx">f</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">getUTCMinutes</span><span class="o">())</span>    <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                <span class="nx">f</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">getUTCSeconds</span><span class="o">())</span>    <span class="o">+</span> <span class="s1">&#39;Z&quot;&#39;</span><span class="o">;</span>
    <span class="o">};</span>


    <span class="nb">Number</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>

<span class="c">// JSON numbers must be finite. Encode non-finite numbers as null.</span>
<span class="c"></span>
        <span class="k">return</span> <span class="nb">isFinite</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">?</span> <span class="nb">String</span><span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">:</span> <span class="s1">&#39;null&#39;</span><span class="o">;</span>
    <span class="o">};</span>


    <span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">w</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">[],</span>     <span class="c">// The array holding the partial texts.</span>
<span class="c"></span>            <span class="nx">k</span><span class="o">,</span>          <span class="c">// The current key.</span>
<span class="c"></span>            <span class="nx">i</span><span class="o">,</span>          <span class="c">// The loop counter.</span>
<span class="c"></span>            <span class="nx">v</span><span class="o">;</span>          <span class="c">// The current value.</span>
<span class="c"></span>
<span class="c">// If a whitelist (array of keys) is provided, use it assemble the components</span>
<span class="c">// of the object.</span>
<span class="c"></span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">w</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">w</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">k</span> <span class="o">=</span> <span class="nx">w</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">k</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">v</span> <span class="o">=</span> <span class="k">this</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>
                    <span class="nx">switch</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>

<span class="c">// Serialize a JavaScript object value. Ignore objects that lack the</span>
<span class="c">// toJSONString method. Due to a specification error in ECMAScript,</span>
<span class="c">// typeof null is &#39;object&#39;, so watch out for that case.</span>
<span class="c"></span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                                       <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">(</span><span class="nx">w</span><span class="o">));</span>
                            <span class="o">}</span>
                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                            <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:null&#39;</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>

                    <span class="nx">case</span> <span class="s1">&#39;string&#39;</span><span class="o">:</span>
                    <span class="nx">case</span> <span class="s1">&#39;number&#39;</span><span class="o">:</span>
                    <span class="nx">case</span> <span class="s1">&#39;boolean&#39;</span><span class="o">:</span>
                        <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">());</span>

<span class="c">// Values without a JSON representation are ignored.</span>
<span class="c"></span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>

<span class="c">// Iterate through all of the keys in the object, ignoring the proto chain</span>
<span class="c">// and keys that are not strings.</span>
<span class="c"></span>
            <span class="k">for</span> <span class="o">(</span><span class="nx">k</span> <span class="k">in</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">k</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span>
                        <span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="o">[</span><span class="nx">k</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="nx">v</span> <span class="o">=</span> <span class="k">this</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>
                    <span class="nx">switch</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>

<span class="c">// Serialize a JavaScript object value. Ignore objects that lack the</span>
<span class="c">// toJSONString method. Due to a specification error in ECMAScript,</span>
<span class="c">// typeof null is &#39;object&#39;, so watch out for that case.</span>
<span class="c"></span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span>
                                       <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">());</span>
                            <span class="o">}</span>
                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                            <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:null&#39;</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="k">break</span><span class="o">;</span>

                    <span class="nx">case</span> <span class="s1">&#39;string&#39;</span><span class="o">:</span>
                    <span class="nx">case</span> <span class="s1">&#39;number&#39;</span><span class="o">:</span>
                    <span class="nx">case</span> <span class="s1">&#39;boolean&#39;</span><span class="o">:</span>
                        <span class="nx">a</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">v</span><span class="o">.</span><span class="nx">toJSONString</span><span class="o">());</span>

<span class="c">// Values without a JSON representation are ignored.</span>
<span class="c"></span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

<span class="c">// Join all of the member texts together and wrap them in braces.</span>
<span class="c"></span>
        <span class="k">return</span> <span class="s1">&#39;{&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span><span class="o">;</span>
    <span class="o">};</span>


    <span class="o">(</span><span class="k">function</span> <span class="o">(</span><span class="nx">s</span><span class="o">)</span> <span class="o">{</span>

<span class="c">// Augment String.prototype. We do this in an immediate anonymous function to</span>
<span class="c">// avoid defining global variables.</span>
<span class="c"></span>
<span class="c">// m is a table of character substitutions.</span>
<span class="c"></span>
        <span class="k">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="o">{</span>
            <span class="s1">&#39;\b&#39;</span><span class="o">:</span> <span class="s1">&#39;\\b&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\t&#39;</span><span class="o">:</span> <span class="s1">&#39;\\t&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\n&#39;</span><span class="o">:</span> <span class="s1">&#39;\\n&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\f&#39;</span><span class="o">:</span> <span class="s1">&#39;\\f&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\r&#39;</span><span class="o">:</span> <span class="s1">&#39;\\r&#39;</span><span class="o">,</span>
            <span class="s1">&#39;&quot;&#39;</span> <span class="o">:</span> <span class="s1">&#39;\\&quot;&#39;</span><span class="o">,</span>
            <span class="s1">&#39;\\&#39;</span><span class="o">:</span> <span class="s1">&#39;\\\\&#39;</span>
        <span class="o">};</span>


        <span class="nx">s</span><span class="o">.</span><span class="nx">parseJSON</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">filter</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">j</span><span class="o">;</span>

            <span class="k">function</span> <span class="nx">walk</span><span class="o">(</span><span class="nx">k</span><span class="o">,</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">i</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">v</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">v</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nb">Object</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">v</span><span class="o">,</span> <span class="o">[</span><span class="nx">i</span><span class="o">]))</span> <span class="o">{</span>
                            <span class="nx">v</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">walk</span><span class="o">(</span><span class="nx">i</span><span class="o">,</span> <span class="nx">v</span><span class="o">[</span><span class="nx">i</span><span class="o">]);</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="nx">filter</span><span class="o">(</span><span class="nx">k</span><span class="o">,</span> <span class="nx">v</span><span class="o">);</span>
            <span class="o">}</span>


<span class="c">// Parsing happens in three stages. In the first stage, we run the text against</span>
<span class="c">// a regular expression which looks for non-JSON characters. We are especially</span>
<span class="c">// concerned with &#39;()&#39; and &#39;new&#39; because they can cause invocation, and &#39;=&#39;</span>
<span class="c">// because it can cause mutation. But just to be safe, we will reject all</span>
<span class="c">// unexpected characters.</span>
<span class="c"></span>
<span class="c">// We split the first stage into 3 regexp operations in order to work around</span>
<span class="c">// crippling deficiencies in Safari&#39;s regexp engine. First we replace all</span>
<span class="c">// backslash pairs with &#39;@&#39; (a non-JSON character). Second we delete all of</span>
<span class="c">// the string literals. Third, we look to see if only JSON characters</span>
<span class="c">// remain. If so, then the text is safe for eval.</span>
<span class="c"></span>
            <span class="k">if</span> <span class="o">(</span><span class="sr">/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="k">this</span><span class="o">.</span>
                    <span class="nx">replace</span><span class="o">(</span><span class="sr">/\\./g</span><span class="o">,</span> <span class="s1">&#39;@&#39;</span><span class="o">).</span>
                    <span class="nx">replace</span><span class="o">(</span><span class="sr">/&quot;[^&quot;\\\n\r]*&quot;/g</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">)))</span> <span class="o">{</span>

<span class="c">// In the second stage we use the eval function to compile the text into a</span>
<span class="c">// JavaScript structure. The &#39;{&#39; operator is subject to a syntactic ambiguity</span>
<span class="c">// in JavaScript: it can begin a block or an object literal. We wrap the text</span>
<span class="c">// in parens to eliminate the ambiguity.</span>
<span class="c"></span>
                <span class="nx">j</span> <span class="o">=</span> <span class="nb">eval</span><span class="o">(</span><span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="o">);</span>

<span class="c">// In the optional third stage, we recursively walk the new structure, passing</span>
<span class="c">// each name/value pair to a filter function for possible transformation.</span>
<span class="c"></span>
                <span class="k">return</span> <span class="k">typeof</span> <span class="nx">filter</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">?</span> <span class="nx">walk</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nx">j</span><span class="o">)</span> <span class="o">:</span> <span class="nx">j</span><span class="o">;</span>
            <span class="o">}</span>

<span class="c">// If the text is not JSON parseable, then a SyntaxError is thrown.</span>
<span class="c"></span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="o">(</span><span class="s1">&#39;parseJSON&#39;</span><span class="o">);</span>
        <span class="o">};</span>


        <span class="nx">s</span><span class="o">.</span><span class="nx">toJSONString</span> <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>

<span class="c">// If the string contains no control characters, no quote characters, and no</span>
<span class="c">// backslash characters, then we can simply slap some quotes around it.</span>
<span class="c">// Otherwise we must also replace the offending characters with safe</span>
<span class="c">// sequences.</span>
<span class="c"></span>
            <span class="k">if</span> <span class="o">(</span><span class="sr">/[&quot;\\\x00-\x1f]/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="k">this</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/[\x00-\x1f\\&quot;]/g</span><span class="o">,</span> <span class="k">function</span> <span class="o">(</span><span class="nx">a</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">m</span><span class="o">[</span><span class="nx">a</span><span class="o">];</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">c</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nx">c</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">charCodeAt</span><span class="o">();</span>
                    <span class="k">return</span> <span class="s1">&#39;\\u00&#39;</span> <span class="o">+</span>
                        <span class="nb">Math</span><span class="o">.</span><span class="nx">floor</span><span class="o">(</span><span class="nx">c</span> <span class="o">/</span> <span class="m">16</span><span class="o">).</span><span class="nx">toString</span><span class="o">(</span><span class="m">16</span><span class="o">)</span> <span class="o">+</span>
                        <span class="o">(</span><span class="nx">c</span> <span class="o">%</span> <span class="m">16</span><span class="o">).</span><span class="nx">toString</span><span class="o">(</span><span class="m">16</span><span class="o">);</span>
                <span class="o">})</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
        <span class="o">};</span>
    <span class="o">})(</span><span class="nb">String</span><span class="o">.</span><span class="nx">prototype</span><span class="o">);</span>
<span class="o">}</span>
</pre></div>

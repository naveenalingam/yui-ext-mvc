<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC. All rights reserved.</span>
<span class="c"> * Version: 1.0.00</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * The EventDispatcher class dispatches events for an entire page, using .</span>
<span class="c"> * @namespace Core.Util</span>
<span class="c"> * @class EventDispatcher</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">Core</span><span class="o">.</span><span class="nx">Util</span><span class="o">.</span><span class="nx">EventDispatcher</span> <span class="o">=</span> <span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="c">// local variables</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">_callbackMap</span> <span class="o">=</span> <span class="o">{},</span>
        <span class="nx">_DOC</span> <span class="o">=</span> <span class="nb">document</span><span class="o">,</span>
        <span class="nx">_F</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{},</span>
        <span class="nx">_rx</span> <span class="o">=</span> <span class="sr">/\bcom_\w+\b/g</span><span class="o">,</span>
        <span class="nx">_that</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">_YE</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Event</span><span class="o">;</span>

    <span class="c">// event namespace</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">_E</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c">/**</span>
<span class="c">         * The generic event dispatcher callback; passes these parameters into callback(event, targetNode, flattenedArguments...).</span>
<span class="c">         * @method dispatcher</span>
<span class="c">         * @param e {Event} Required. The triggered JavaScript event.</span>
<span class="c">         * @private</span>
<span class="c">         */</span>
        <span class="nx">dispatcher</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">getTarget</span><span class="o">(</span><span class="nx">e</span><span class="o">);</span>

            <span class="c">// simulate bubbling</span>
<span class="c"></span>            <span class="k">while</span> <span class="o">(</span><span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span> <span class="o">!==</span> <span class="nx">_DOC</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">coms</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">className</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="nx">_rx</span><span class="o">);</span>

                <span class="c">// not matched</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">===</span> <span class="nx">coms</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// not found, do nothing for now</span>
<span class="c"></span>                <span class="o">}</span>
                <span class="c">// command class exists</span>
<span class="c"></span>                <span class="k">else</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">j</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>

                    <span class="c">// iterate on matching commands</span>
<span class="c"></span>                    <span class="k">for</span> <span class="o">(;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">coms</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">coms</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/com_/</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">),</span>
                            <span class="nx">carr</span> <span class="o">=</span> <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">e</span><span class="o">.</span><span class="nx">type</span><span class="o">][</span><span class="nx">id</span><span class="o">];</span>

                        <span class="c">// object for command exists, command could be for another event</span>
<span class="c"></span>                        <span class="k">if</span> <span class="o">(</span><span class="nx">carr</span> <span class="o">&amp;&amp;</span> <span class="nx">carr</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c">// iterate on command callbacks</span>
<span class="c"></span>                            <span class="k">for</span> <span class="o">(</span><span class="nx">j</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">carr</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">j</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                                <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">carr</span><span class="o">[</span><span class="nx">j</span><span class="o">],</span>
                                    <span class="nx">args</span> <span class="o">=</span> <span class="o">[</span><span class="nx">e</span><span class="o">,</span> <span class="nx">node</span><span class="o">];</span>

                                <span class="k">if</span> <span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">eventFx</span><span class="o">)</span> <span class="o">{</span><span class="nx">o</span><span class="o">.</span><span class="nx">eventFx</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">_YE</span><span class="o">,</span> <span class="nx">e</span><span class="o">);}</span> <span class="c">// event stop events</span>
<span class="c"></span>                                <span class="nx">o</span><span class="o">.</span><span class="nx">callback</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">scope</span><span class="o">,</span> <span class="nx">args</span><span class="o">.</span><span class="nx">concat</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span><span class="o">));</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>

                <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>

   <span class="c">// public interface</span>
<span class="c"></span>    <span class="nx">_F</span><span class="o">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c">/**</span>
<span class="c">         * Method to register an event on the document.</span>
<span class="c">         * @method register</span>
<span class="c">         * @param type {String} Required. The event type (ie. &#39;click&#39;).</span>
<span class="c">         * @param o {Object} Required. The event data.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">register</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">type</span><span class="o">,</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// check for required</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">type</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span><span class="o">.</span><span class="nx">id</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span><span class="o">.</span><span class="nx">callback</span><span class="o">))</span> <span class="o">{</span>
                <span class="nx">alert</span><span class="o">(</span><span class="s1">&#39;Invalid regristration to EventDispatcher - missing required value, see source code.&#39;</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c">// allows for lazy-loading of events</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(!</span> <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">])</span> <span class="o">{</span>
                <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">]</span> <span class="o">=</span> <span class="o">{};</span>
                <span class="nx">_YE</span><span class="o">.</span><span class="nx">on</span><span class="o">(</span><span class="nx">_DOC</span><span class="o">,</span> <span class="nx">type</span><span class="o">,</span> <span class="nx">_E</span><span class="o">.</span><span class="nx">dispatcher</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">][</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">])</span> <span class="o">{</span><span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">][</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">]</span> <span class="o">=</span> <span class="o">[];}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">o</span><span class="o">.</span><span class="nx">scope</span><span class="o">)</span> <span class="o">{</span><span class="nx">o</span><span class="o">.</span><span class="nx">scope</span> <span class="o">=</span> <span class="nb">window</span><span class="o">;}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span><span class="o">)</span> <span class="o">{</span><span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span> <span class="o">=</span> <span class="o">[];}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span><span class="o">))</span> <span class="o">{</span><span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span> <span class="o">=</span> <span class="o">[</span><span class="nx">o</span><span class="o">.</span><span class="nx">arguments</span><span class="o">];}</span> <span class="c">// support arguments _that are non arrays</span>
<span class="c"></span>            <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">][</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">].</span><span class="nx">push</span><span class="o">(</span><span class="nx">o</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Call this method to register an event the first time _that ID is provided, and not subsequent times.</span>
<span class="c">         * @method registerOnce</span>
<span class="c">         * @param type {String} Required. The event type (ie. &#39;click&#39;).</span>
<span class="c">         * @param o {Object} Required. The event data.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">registerOnce</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">type</span><span class="o">,</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">]</span> <span class="o">||</span> <span class="nx">_callbackMap</span><span class="o">[</span><span class="nx">type</span><span class="o">][</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">]))</span> <span class="o">{</span>
                <span class="nx">register</span><span class="o">(</span><span class="nx">type</span><span class="o">,</span> <span class="nx">o</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>

    <span class="nx">_that</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">_F</span><span class="o">();</span>
    <span class="k">return</span> <span class="nx">_that</span><span class="o">;</span>
<span class="o">})();</span>
</pre></div>

<div class="highlight" ><pre><span class="c">/*</span>
<span class="c">Copyright (c) 2008, Yahoo! Inc. All rights reserved.</span>
<span class="c">Code licensed under the BSD License:</span>
<span class="c">http://developer.yahoo.net/yui/license.txt</span>
<span class="c">version: 2.6.0</span>
<span class="c">*/</span>
<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>

<span class="k">var</span> <span class="nx">lang</span>   <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">,</span>
    <span class="nx">util</span>   <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">,</span>
    <span class="nx">Ev</span>     <span class="o">=</span> <span class="nx">util</span><span class="o">.</span><span class="nx">Event</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * The DataSource utility provides a common configurable interface for widgets to</span>
<span class="c"> * access a variety of data, from JavaScript arrays to online database servers.</span>
<span class="c"> *</span>
<span class="c"> * @module datasource</span>
<span class="c"> * @requires yahoo, event</span>
<span class="c"> * @optional json, get, connection </span>
<span class="c"> * @title DataSource Utility</span>
<span class="c"> */</span>

<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * Base class for the YUI DataSource utility.</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.DataSourceBase</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">DataSourceBase</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">oLiveData</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">oLiveData</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span> <span class="o">=</span> <span class="nx">oLiveData</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">_oQueue</span> <span class="o">=</span> <span class="o">{</span><span class="nx">interval</span><span class="o">:</span><span class="kc">null</span><span class="o">,</span> <span class="nx">conn</span><span class="o">:</span><span class="kc">null</span><span class="o">,</span> <span class="nx">requests</span><span class="o">:[]};</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span> <span class="o">=</span> <span class="o">{};</span>   

    <span class="c">// Set any config params passed in to override defaults</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">oConfigs</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">oConfigs</span><span class="o">.</span><span class="nx">constructor</span> <span class="o">==</span> <span class="nb">Object</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">sConfig</span> <span class="k">in</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">sConfig</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">[</span><span class="nx">sConfig</span><span class="o">]</span> <span class="o">=</span> <span class="nx">oConfigs</span><span class="o">[</span><span class="nx">sConfig</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="c">// Validate and initialize public configs</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">maxCacheEntries</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">maxCacheEntries</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">maxCacheEntries</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="nx">maxCacheEntries</span> <span class="o">&lt;</span> <span class="m">0</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">maxCacheEntries</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c">// Initialize interval tracker</span>
<span class="c"></span>    <span class="k">this</span><span class="o">.</span><span class="nx">_aIntervals</span> <span class="o">=</span> <span class="o">[];</span>

    <span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>    <span class="c">//</span>
<span class="c"></span>    <span class="c">// Custom Events</span>
<span class="c"></span>    <span class="c">//</span>
<span class="c"></span>    <span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
    <span class="c">/**</span>
<span class="c">     * Fired when a request is made to the local cache.</span>
<span class="c">     *</span>
<span class="c">     * @event cacheRequestEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;cacheRequestEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when data is retrieved from the local cache.</span>
<span class="c">     *</span>
<span class="c">     * @event cacheResponseEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.response {Object} The response object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;cacheResponseEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when a request is sent to the live data source.</span>
<span class="c">     *</span>
<span class="c">     * @event requestEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.tId {Number} Transaction ID.     </span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;requestEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when live data source sends response.</span>
<span class="c">     *</span>
<span class="c">     * @event responseEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.response {Object} The raw response object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.tId {Number} Transaction ID.     </span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;responseEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when response is parsed.</span>
<span class="c">     *</span>
<span class="c">     * @event responseParseEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.response {Object} The parsed response object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;responseParseEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when response is cached.</span>
<span class="c">     *</span>
<span class="c">     * @event responseCacheEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.response {Object} The parsed response object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;responseCacheEvent&quot;</span><span class="o">);</span>
    <span class="c">/**</span>
<span class="c">     * Fired when an error is encountered with the live data source.</span>
<span class="c">     *</span>
<span class="c">     * @event dataErrorEvent</span>
<span class="c">     * @param oArgs.request {Object} The request object.</span>
<span class="c">     * @param oArgs.callback {Object} The callback object.</span>
<span class="c">     * @param oArgs.caller {Object} (deprecated) Use callback.scope.</span>
<span class="c">     * @param oArgs.message {String} The error message.</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;dataErrorEvent&quot;</span><span class="o">);</span>

    <span class="c">/**</span>
<span class="c">     * Fired when the local cache is flushed.</span>
<span class="c">     *</span>
<span class="c">     * @event cacheFlushEvent</span>
<span class="c">     */</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">createEvent</span><span class="o">(</span><span class="s2">&quot;cacheFlushEvent&quot;</span><span class="o">);</span>

    <span class="k">var</span> <span class="nx">DS</span> <span class="o">=</span> <span class="nx">util</span><span class="o">.</span><span class="nx">DataSourceBase</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">_sName</span> <span class="o">=</span> <span class="s2">&quot;DataSource instance&quot;</span> <span class="o">+</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">_nIndex</span><span class="o">;</span>
    <span class="nx">DS</span><span class="o">.</span><span class="nx">_nIndex</span><span class="o">++;</span>
<span class="o">};</span>

<span class="k">var</span> <span class="nx">DS</span> <span class="o">=</span> <span class="nx">util</span><span class="o">.</span><span class="nx">DataSourceBase</span><span class="o">;</span>

<span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">DS</span><span class="o">,</span> <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase public constants</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Type is unknown.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_UNKNOWN</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default -1</span>
<span class="c"> */</span>
<span class="nx">TYPE_UNKNOWN</span> <span class="o">:</span> <span class="o">-</span><span class="m">1</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is a JavaScript Array.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_JSARRAY</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 0</span>
<span class="c"> */</span>
<span class="nx">TYPE_JSARRAY</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is a JavaScript Function.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_JSFUNCTION</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 1</span>
<span class="c"> */</span>
<span class="nx">TYPE_JSFUNCTION</span> <span class="o">:</span> <span class="m">1</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is hosted on a server via an XHR connection.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_XHR</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 2</span>
<span class="c"> */</span>
<span class="nx">TYPE_XHR</span> <span class="o">:</span> <span class="m">2</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is JSON.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_JSON</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 3</span>
<span class="c"> */</span>
<span class="nx">TYPE_JSON</span> <span class="o">:</span> <span class="m">3</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is XML.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_XML</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 4</span>
<span class="c"> */</span>
<span class="nx">TYPE_XML</span> <span class="o">:</span> <span class="m">4</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is plain text.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_TEXT</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 5</span>
<span class="c"> */</span>
<span class="nx">TYPE_TEXT</span> <span class="o">:</span> <span class="m">5</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_HTMLTABLE</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 6</span>
<span class="c"> */</span>
<span class="nx">TYPE_HTMLTABLE</span> <span class="o">:</span> <span class="m">6</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is hosted on a server via a dynamic script node.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_SCRIPTNODE</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 7</span>
<span class="c"> */</span>
<span class="nx">TYPE_SCRIPTNODE</span> <span class="o">:</span> <span class="m">7</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Type is local.</span>
<span class="c"> *</span>
<span class="c"> * @property TYPE_LOCAL</span>
<span class="c"> * @type Number</span>
<span class="c"> * @final</span>
<span class="c"> * @default 8</span>
<span class="c"> */</span>
<span class="nx">TYPE_LOCAL</span> <span class="o">:</span> <span class="m">8</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Error message for invalid dataresponses.</span>
<span class="c"> *</span>
<span class="c"> * @property ERROR_DATAINVALID</span>
<span class="c"> * @type String</span>
<span class="c"> * @final</span>
<span class="c"> * @default &quot;Invalid data&quot;</span>
<span class="c"> */</span>
<span class="nx">ERROR_DATAINVALID</span> <span class="o">:</span> <span class="s2">&quot;Invalid data&quot;</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Error message for null data responses.</span>
<span class="c"> *</span>
<span class="c"> * @property ERROR_DATANULL</span>
<span class="c"> * @type String</span>
<span class="c"> * @final</span>
<span class="c"> * @default &quot;Null data&quot;</span>
<span class="c"> */</span>
<span class="nx">ERROR_DATANULL</span> <span class="o">:</span> <span class="s2">&quot;Null data&quot;</span><span class="o">,</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase private static properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Internal class variable to index multiple DataSource instances.</span>
<span class="c"> *</span>
<span class="c"> * @property DataSourceBase._nIndex</span>
<span class="c"> * @type Number</span>
<span class="c"> * @private</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">_nIndex</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Internal class variable to assign unique transaction IDs.</span>
<span class="c"> *</span>
<span class="c"> * @property DataSourceBase._nTransactionId</span>
<span class="c"> * @type Number</span>
<span class="c"> * @private</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">_nTransactionId</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase public static methods</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Executes a configured callback.  For object literal callbacks, the third</span>
<span class="c"> * param determines whether to execute the success handler or failure handler.</span>
<span class="c"> *  </span>
<span class="c"> * @method issueCallback</span>
<span class="c"> * @param callback {Function|Object} the callback to execute</span>
<span class="c"> * @param params {Array} params to be passed to the callback method</span>
<span class="c"> * @param error {Boolean} whether an error occurred</span>
<span class="c"> * @param scope {Object} the scope from which to execute the callback</span>
<span class="c"> * (deprecated - use an object literal callback)</span>
<span class="c"> * @static     </span>
<span class="c"> */</span>
<span class="nx">issueCallback</span> <span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">callback</span><span class="o">,</span><span class="nx">params</span><span class="o">,</span><span class="nx">error</span><span class="o">,</span><span class="nx">scope</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">callback</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">callback</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">scope</span><span class="o">,</span> <span class="nx">params</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">callback</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">scope</span> <span class="o">=</span> <span class="nx">callback</span><span class="o">.</span><span class="nx">scope</span> <span class="o">||</span> <span class="nx">scope</span> <span class="o">||</span> <span class="nb">window</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">callbackFunc</span> <span class="o">=</span> <span class="nx">callback</span><span class="o">.</span><span class="nx">success</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">error</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">callbackFunc</span> <span class="o">=</span> <span class="nx">callback</span><span class="o">.</span><span class="nx">failure</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">callbackFunc</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">callbackFunc</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="nx">scope</span><span class="o">,</span> <span class="nx">params</span><span class="o">.</span><span class="nx">concat</span><span class="o">([</span><span class="nx">callback</span><span class="o">.</span><span class="nx">argument</span><span class="o">]));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Converts data to type String.</span>
<span class="c"> *</span>
<span class="c"> * @method DataSourceBase.parseString</span>
<span class="c"> * @param oData {String | Number | Boolean | Date | Array | Object} Data to parse.</span>
<span class="c"> * The special values null and undefined will return null.</span>
<span class="c"> * @return {Number} A string, or null.</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">parseString</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oData</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">// Special case null and undefined</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">oData</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="c">//Convert to string</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="nx">oData</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>

    <span class="c">// Validate</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">string</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">string</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Converts data to type Number.</span>
<span class="c"> *</span>
<span class="c"> * @method DataSourceBase.parseNumber</span>
<span class="c"> * @param oData {String | Number | Boolean | Null} Data to convert. Beware, null</span>
<span class="c"> * returns as 0.</span>
<span class="c"> * @return {Number} A number, or null if NaN.</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">parseNumber</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oData</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">//Convert to number</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="nx">oData</span> <span class="o">*</span> <span class="m">1</span><span class="o">;</span>
    
    <span class="c">// Validate</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">number</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">number</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">},</span>
<span class="c">// Backward compatibility</span>
<span class="c"></span><span class="nx">convertNumber</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oData</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">parseNumber</span><span class="o">(</span><span class="nx">oData</span><span class="o">);</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Converts data to type Date.</span>
<span class="c"> *</span>
<span class="c"> * @method DataSourceBase.parseDate</span>
<span class="c"> * @param oData {Date | String | Number} Data to convert.</span>
<span class="c"> * @return {Date} A Date instance.</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">parseDate</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oData</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    
    <span class="c">//Convert to date</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(!(</span><span class="nx">oData</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="nx">oData</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">oData</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="c">// Validate</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">date</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nx">date</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">},</span>
<span class="c">// Backward compatibility</span>
<span class="c"></span><span class="nx">convertDate</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oData</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">parseDate</span><span class="o">(</span><span class="nx">oData</span><span class="o">);</span>
<span class="o">}</span>

<span class="o">});</span>

<span class="c">// Done in separate step so referenced functions are defined.</span>
<span class="c">/**</span>
<span class="c"> * Data parsing functions.</span>
<span class="c"> * @property DataSource.Parser</span>
<span class="c"> * @type Object</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nx">string</span>   <span class="o">:</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">parseString</span><span class="o">,</span>
    <span class="nx">number</span>   <span class="o">:</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">parseNumber</span><span class="o">,</span>
    <span class="nx">date</span>     <span class="o">:</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">parseDate</span>
<span class="o">};</span>

<span class="c">// Prototype properties and methods</span>
<span class="c"></span><span class="nx">DS</span><span class="o">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase private properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Name of DataSource instance.</span>
<span class="c"> *</span>
<span class="c"> * @property _sName</span>
<span class="c"> * @type String</span>
<span class="c"> * @private</span>
<span class="c"> */</span>
<span class="nx">_sName</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Local cache of data result object literals indexed chronologically.</span>
<span class="c"> *</span>
<span class="c"> * @property _aCache</span>
<span class="c"> * @type Object[]</span>
<span class="c"> * @private</span>
<span class="c"> */</span>
<span class="nx">_aCache</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Local queue of request connections, enabled if queue needs to be managed.</span>
<span class="c"> *</span>
<span class="c"> * @property _oQueue</span>
<span class="c"> * @type Object</span>
<span class="c"> * @private</span>
<span class="c"> */</span>
<span class="nx">_oQueue</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Array of polling interval IDs that have been enabled, needed to clear all intervals.</span>
<span class="c"> *</span>
<span class="c"> * @property _aIntervals</span>
<span class="c"> * @type Array</span>
<span class="c"> * @private</span>
<span class="c"> */</span>
<span class="nx">_aIntervals</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase public properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Max size of the local cache.  Set to 0 to turn off caching.  Caching is</span>
<span class="c"> * useful to reduce the number of server connections.  Recommended only for data</span>
<span class="c"> * sources that return comprehensive results for queries or when stale data is</span>
<span class="c"> * not an issue.</span>
<span class="c"> *</span>
<span class="c"> * @property maxCacheEntries</span>
<span class="c"> * @type Number</span>
<span class="c"> * @default 0</span>
<span class="c"> */</span>
<span class="nx">maxCacheEntries</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

 <span class="c">/**</span>
<span class="c"> * Pointer to live database.</span>
<span class="c"> *</span>
<span class="c"> * @property liveData</span>
<span class="c"> * @type Object</span>
<span class="c"> */</span>
<span class="nx">liveData</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Where the live data is held:</span>
<span class="c"> * </span>
<span class="c"> * &lt;dl&gt;  </span>
<span class="c"> *    &lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_LOCAL&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_XHR&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_SCRIPTNODE&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_JSFUNCTION&lt;/dt&gt;</span>
<span class="c"> * &lt;/dl&gt; </span>
<span class="c"> *  </span>
<span class="c"> * @property dataType</span>
<span class="c"> * @type Number</span>
<span class="c"> * @default YAHOO.util.DataSourceBase.TYPE_UNKNOWN</span>
<span class="c"> *</span>
<span class="c"> */</span>
<span class="nx">dataType</span> <span class="o">:</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Format of response:</span>
<span class="c"> *  </span>
<span class="c"> * &lt;dl&gt;  </span>
<span class="c"> *    &lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_JSARRAY&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_JSON&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_XML&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_TEXT&lt;/dt&gt;</span>
<span class="c"> *    &lt;dt&gt;TYPE_HTMLTABLE&lt;/dt&gt; </span>
<span class="c"> * &lt;/dl&gt; </span>
<span class="c"> *</span>
<span class="c"> * @property responseType</span>
<span class="c"> * @type Number</span>
<span class="c"> * @default YAHOO.util.DataSourceBase.TYPE_UNKNOWN</span>
<span class="c"> */</span>
<span class="nx">responseType</span> <span class="o">:</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Response schema object literal takes a combination of the following properties:</span>
<span class="c"> *</span>
<span class="c"> * &lt;dl&gt;</span>
<span class="c"> * &lt;dt&gt;resultsList&lt;/dt&gt; &lt;dd&gt;Pointer to array of tabular data&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;resultNode&lt;/dt&gt; &lt;dd&gt;Pointer to node name of row data (XML data only)&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;recordDelim&lt;/dt&gt; &lt;dd&gt;Record delimiter (text data only)&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;fieldDelim&lt;/dt&gt; &lt;dd&gt;Field delimiter (text data only)&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;fields&lt;/dt&gt; &lt;dd&gt;Array of field names (aka keys), or array of object literals</span>
<span class="c"> * such as: {key:&quot;fieldname&quot;,parser:YAHOO.util.DataSourceBase.parseDate}&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;metaFields&lt;/dt&gt; &lt;dd&gt;Object literal of keys to include in the oParsedResponse.meta collection&lt;/dd&gt;</span>
<span class="c"> * &lt;dt&gt;metaNode&lt;/dt&gt; &lt;dd&gt;Name of the node under which to search for meta information in XML response data&lt;/dd&gt;</span>
<span class="c"> * &lt;/dl&gt;</span>
<span class="c"> *</span>
<span class="c"> * @property responseSchema</span>
<span class="c"> * @type Object</span>
<span class="c"> */</span>
<span class="nx">responseSchema</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// DataSourceBase public methods</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Public accessor to the unique name of the DataSource instance.</span>
<span class="c"> *</span>
<span class="c"> * @method toString</span>
<span class="c"> * @return {String} Unique name of the DataSource instance.</span>
<span class="c"> */</span>
<span class="nx">toString</span> <span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="nx">_sName</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method passes request to cache and returns cached response if any,</span>
<span class="c"> * refreshing the hit in the cache as the newest item. Returns null if there is</span>
<span class="c"> * no cache hit.</span>
<span class="c"> *</span>
<span class="c"> * @method getCachedResponse</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} Callback object.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use callback object.</span>
<span class="c"> * @return {Object} Cached response object or null.</span>
<span class="c"> */</span>
<span class="nx">getCachedResponse</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">aCache</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span><span class="o">;</span>

    <span class="c">// If cache is enabled...</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">maxCacheEntries</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>        
        <span class="c">// Initialize local cache</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(!</span><span class="nx">aCache</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="o">}</span>
        <span class="c">// Look in local cache</span>
<span class="c"></span>        <span class="k">else</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">nCacheLength</span> <span class="o">=</span> <span class="nx">aCache</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">nCacheLength</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">oResponse</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;cacheRequestEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>
        
                <span class="c">// Loop through each cached element</span>
<span class="c"></span>                <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">nCacheLength</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">oCacheElem</span> <span class="o">=</span> <span class="nx">aCache</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
        
                    <span class="c">// Defer cache hit logic to a public overridable method</span>
<span class="c"></span>                    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">isCacheHit</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">oCacheElem</span><span class="o">.</span><span class="nx">request</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c">// The cache returned a hit!</span>
<span class="c"></span>                        <span class="c">// Grab the cached response</span>
<span class="c"></span>                        <span class="nx">oResponse</span> <span class="o">=</span> <span class="nx">oCacheElem</span><span class="o">.</span><span class="nx">response</span><span class="o">;</span>
                        <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;cacheResponseEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">response</span><span class="o">:</span><span class="nx">oResponse</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>
                        
                        <span class="c">// Refresh the position of the cache hit</span>
<span class="c"></span>                        <span class="k">if</span><span class="o">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nCacheLength</span><span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c">// Remove element from its original location</span>
<span class="c"></span>                            <span class="nx">aCache</span><span class="o">.</span><span class="nx">splice</span><span class="o">(</span><span class="nx">i</span><span class="o">,</span><span class="m">1</span><span class="o">);</span>
                            <span class="c">// Add as newest</span>
<span class="c"></span>                            <span class="k">this</span><span class="o">.</span><span class="nx">addToCache</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oResponse</span><span class="o">);</span>
                        <span class="o">}</span>
                        
                        <span class="c">// Add a cache flag</span>
<span class="c"></span>                        <span class="nx">oResponse</span><span class="o">.</span><span class="nx">cached</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="nx">oResponse</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">aCache</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Default overridable method matches given request to given cached request.</span>
<span class="c"> * Returns true if is a hit, returns false otherwise.  Implementers should</span>
<span class="c"> * override this method to customize the cache-matching algorithm.</span>
<span class="c"> *</span>
<span class="c"> * @method isCacheHit</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCachedRequest {Object} Cached request object.</span>
<span class="c"> * @return {Boolean} True if given request matches cached request, false otherwise.</span>
<span class="c"> */</span>
<span class="nx">isCacheHit</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCachedRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="nx">oRequest</span> <span class="o">===</span> <span class="nx">oCachedRequest</span><span class="o">);</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Adds a new item to the cache. If cache is full, evicts the stalest item</span>
<span class="c"> * before adding the new item.</span>
<span class="c"> *</span>
<span class="c"> * @method addToCache</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oResponse {Object} Response object to cache.</span>
<span class="c"> */</span>
<span class="nx">addToCache</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">aCache</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(!</span><span class="nx">aCache</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c">// If the cache is full, make room by removing stalest element (index=0)</span>
<span class="c"></span>    <span class="k">while</span><span class="o">(</span><span class="nx">aCache</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="o">.</span><span class="nx">maxCacheEntries</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">aCache</span><span class="o">.</span><span class="nx">shift</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c">// Add to cache in the newest position, at the end of the array</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">oCacheElem</span> <span class="o">=</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">response</span><span class="o">:</span><span class="nx">oResponse</span><span class="o">};</span>
    <span class="nx">aCache</span><span class="o">[</span><span class="nx">aCache</span><span class="o">.</span><span class="nx">length</span><span class="o">]</span> <span class="o">=</span> <span class="nx">oCacheElem</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;responseCacheEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">response</span><span class="o">:</span><span class="nx">oResponse</span><span class="o">});</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Flushes cache.</span>
<span class="c"> *</span>
<span class="c"> * @method flushCache</span>
<span class="c"> */</span>
<span class="nx">flushCache</span> <span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">_aCache</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;cacheFlushEvent&quot;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Sets up a polling mechanism to send requests at set intervals and forward</span>
<span class="c"> * responses to given callback.</span>
<span class="c"> *</span>
<span class="c"> * @method setInterval</span>
<span class="c"> * @param nMsec {Number} Length of interval in milliseconds.</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Function} Handler function to receive the response.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Interval ID.</span>
<span class="c"> */</span>
<span class="nx">setInterval</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">nMsec</span><span class="o">,</span> <span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">nMsec</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">nMsec</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">oSelf</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">nId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="nx">oSelf</span><span class="o">.</span><span class="nx">makeConnection</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">);</span>
        <span class="o">},</span> <span class="nx">nMsec</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">_aIntervals</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">nId</span><span class="o">);</span>
        <span class="k">return</span> <span class="nx">nId</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Disables polling mechanism associated with the given interval ID.</span>
<span class="c"> *</span>
<span class="c"> * @method clearInterval</span>
<span class="c"> * @param nId {Number} Interval ID.</span>
<span class="c"> */</span>
<span class="nx">clearInterval</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">nId</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">// Remove from tracker if there</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">tracker</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_aIntervals</span> <span class="o">||</span> <span class="o">[];</span>
    <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">tracker</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">tracker</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">===</span> <span class="nx">nId</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">tracker</span><span class="o">.</span><span class="nx">splice</span><span class="o">(</span><span class="nx">i</span><span class="o">,</span><span class="m">1</span><span class="o">);</span>
            <span class="nx">clearInterval</span><span class="o">(</span><span class="nx">nId</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Disables all known polling intervals.</span>
<span class="c"> *</span>
<span class="c"> * @method clearAllIntervals</span>
<span class="c"> */</span>
<span class="nx">clearAllIntervals</span> <span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">tracker</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_aIntervals</span> <span class="o">||</span> <span class="o">[];</span>
    <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">tracker</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">--)</span> <span class="o">{</span>
        <span class="nx">clearInterval</span><span class="o">(</span><span class="nx">tracker</span><span class="o">[</span><span class="nx">i</span><span class="o">]);</span>
    <span class="o">}</span>
    <span class="nx">tracker</span> <span class="o">=</span> <span class="o">[];</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * First looks for cached response, then sends request to live data.</span>
<span class="c"> *</span>
<span class="c"> * @method sendRequest</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} An object literal with the following properties:</span>
<span class="c"> *     &lt;dl&gt;</span>
<span class="c"> *     &lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt;</span>
<span class="c"> *     &lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt;</span>
<span class="c"> *     &lt;dt&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;The object to serve as the scope for the success and failure handlers.&lt;/dd&gt;</span>
<span class="c"> *     &lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;Arbitrary data that will be passed back to the success and failure handlers.&lt;/dd&gt;</span>
<span class="c"> *     &lt;/dl&gt; </span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Transaction ID, or null if response found in cache.</span>
<span class="c"> */</span>
<span class="nx">sendRequest</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="c">// First look in cache</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">oCachedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">getCachedResponse</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">oCachedResponse</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">DS</span><span class="o">.</span><span class="nx">issueCallback</span><span class="o">(</span><span class="nx">oCallback</span><span class="o">,[</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">oCachedResponse</span><span class="o">],</span><span class="kc">false</span><span class="o">,</span><span class="nx">oCaller</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="c">// Not in cache, so forward request to live data</span>
<span class="c"></span>    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="nx">makeConnection</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">);</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable default method generates a unique transaction ID and passes </span>
<span class="c"> * the live data reference directly to the  handleResponse function. This</span>
<span class="c"> * method should be implemented by subclasses to achieve more complex behavior</span>
<span class="c"> * or to access remote data.          </span>
<span class="c"> *</span>
<span class="c"> * @method makeConnection</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} Callback object literal.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Transaction ID.</span>
<span class="c"> */</span>
<span class="nx">makeConnection</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">tId</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">_nTransactionId</span><span class="o">++;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;requestEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">tId</span><span class="o">:</span><span class="nx">tId</span><span class="o">,</span> <span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>

    <span class="c">/* accounts for the following cases:</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_UNKNOWN</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_JSARRAY</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_JSON</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_HTMLTABLE</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_XML</span>
<span class="c">    YAHOO.util.DataSourceBase.TYPE_TEXT</span>
<span class="c">    */</span>
    <span class="k">var</span> <span class="nx">oRawResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">;</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">handleResponse</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oRawResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">,</span> <span class="nx">tId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nx">tId</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Receives raw data response and type converts to XML, JSON, etc as necessary.</span>
<span class="c"> * Forwards oFullResponse to appropriate parsing function to get turned into</span>
<span class="c"> * oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to </span>
<span class="c"> * the cache when appropriate before calling issueCallback().</span>
<span class="c"> * </span>
<span class="c"> * The oParsedResponse object literal has the following properties:</span>
<span class="c"> * &lt;dl&gt;</span>
<span class="c"> *     &lt;dd&gt;&lt;dt&gt;tId {Number}&lt;/dt&gt; Unique transaction ID&lt;/dd&gt;</span>
<span class="c"> *     &lt;dd&gt;&lt;dt&gt;results {Array}&lt;/dt&gt; Array of parsed data results&lt;/dd&gt;</span>
<span class="c"> *     &lt;dd&gt;&lt;dt&gt;meta {Object}&lt;/dt&gt; Object literal of meta values&lt;/dd&gt; </span>
<span class="c"> *     &lt;dd&gt;&lt;dt&gt;error {Boolean}&lt;/dt&gt; (optional) True if there was an error&lt;/dd&gt;</span>
<span class="c"> *     &lt;dd&gt;&lt;dt&gt;cached {Boolean}&lt;/dt&gt; (optional) True if response was cached&lt;/dd&gt;</span>
<span class="c"> * &lt;/dl&gt;</span>
<span class="c"> *</span>
<span class="c"> * @method handleResponse</span>
<span class="c"> * @param oRequest {Object} Request object</span>
<span class="c"> * @param oRawResponse {Object} The raw response from the live database.</span>
<span class="c"> * @param oCallback {Object} Callback object literal.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @param tId {Number} Transaction ID.</span>
<span class="c"> */</span>
<span class="nx">handleResponse</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oRawResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">,</span> <span class="nx">tId</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;responseEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">tId</span><span class="o">:</span><span class="nx">tId</span><span class="o">,</span> <span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">response</span><span class="o">:</span><span class="nx">oRawResponse</span><span class="o">,</span>
            <span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span> <span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>
    <span class="k">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">dataType</span> <span class="o">==</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XHR</span><span class="o">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">;</span>
    
    <span class="c">// Try to sniff data type if it has not been defined</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">===</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">ctype</span> <span class="o">=</span> <span class="o">(</span><span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">getResponseHeader</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">getResponseHeader</span><span class="o">[</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">]</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">)</span> <span class="o">{</span>
             <span class="c">// xml</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;text/xml&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;application/json&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;text/plain&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// array</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">;</span>
            <span class="o">}</span>
             <span class="c">// xml</span>
<span class="c"></span>            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">9</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">==</span> <span class="s2">&quot;table&quot;</span><span class="o">))</span> <span class="o">{</span> <span class="c">// table</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_HTMLTABLE</span><span class="o">;</span>
            <span class="o">}</span>    
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>                <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nx">switch</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseType</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">case</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">:</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xhr</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">;</span> 
            <span class="o">}</span>
            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseArrayData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="nx">case</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">:</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xhr</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c">// Convert to JSON object if it&#39;s a string</span>
<span class="c"></span>                <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c">// Check for YUI JSON Util</span>
<span class="c"></span>                    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">JSON</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">lang</span><span class="o">.</span><span class="nx">JSON</span><span class="o">.</span><span class="nx">parse</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="c">// Look for JSON parsers using an API similar to json2.js</span>
<span class="c"></span>                    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nb">window</span><span class="o">.</span><span class="nx">JSON</span> <span class="o">&amp;&amp;</span> <span class="nx">JSON</span><span class="o">.</span><span class="nx">parse</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">JSON</span><span class="o">.</span><span class="nx">parse</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="c">// Look for JSON parsers using an API similar to json.js</span>
<span class="c"></span>                    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">parseJSON</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">parseJSON</span><span class="o">();</span>
                    <span class="o">}</span>
                    <span class="c">// No JSON lib found so parse the string</span>
<span class="c"></span>                    <span class="k">else</span> <span class="o">{</span>
                        <span class="c">// Trim leading spaces</span>
<span class="c"></span>                        <span class="k">while</span> <span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">&amp;&amp;</span>
                                <span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="o">!=</span> <span class="s2">&quot;{&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                                <span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="o">!=</span> <span class="s2">&quot;[&quot;</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">substring</span><span class="o">(</span><span class="m">1</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span><span class="o">);</span>
                        <span class="o">}</span>
    
                        <span class="k">if</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c">// Strip extraneous stuff at the end</span>
<span class="c"></span>                            <span class="k">var</span> <span class="nx">objEnd</span> <span class="o">=</span> <span class="nb">Math</span><span class="o">.</span><span class="nx">max</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">lastIndexOf</span><span class="o">(</span><span class="s2">&quot;]&quot;</span><span class="o">),</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">lastIndexOf</span><span class="o">(</span><span class="s2">&quot;}&quot;</span><span class="o">));</span>
                            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">substring</span><span class="o">(</span><span class="m">0</span><span class="o">,</span><span class="nx">objEnd</span><span class="o">+</span><span class="m">1</span><span class="o">);</span>
    
                            <span class="c">// Turn the string into an object literal...</span>
<span class="c"></span>                            <span class="c">// ...eval is necessary here</span>
<span class="c"></span>                            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nb">eval</span><span class="o">(</span><span class="s2">&quot;(&quot;</span> <span class="o">+</span> <span class="nx">oFullResponse</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="o">);</span>
    
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">}</span>

            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseJSONData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="nx">case</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_HTMLTABLE</span><span class="o">:</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xhr</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseHTMLTableData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="nx">case</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">:</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xhr</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseXML</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseXML</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseXMLData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="nx">case</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">:</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xhr</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">))</span> <span class="o">{</span>
                <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">responseText</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseTextData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="nx">default</span><span class="o">:</span>
            <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeParseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
            <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="c">// Clean up for consistent signature</span>
<span class="c"></span>    <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="nx">oParsedResponse</span> <span class="o">||</span> <span class="o">{};</span>
    <span class="k">if</span><span class="o">(!</span><span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span> <span class="o">=</span> <span class="o">[];</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(!</span><span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">meta</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">meta</span> <span class="o">=</span> <span class="o">{};</span>
    <span class="o">}</span>

    <span class="c">// Success</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">oParsedResponse</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span><span class="o">)</span> <span class="o">{</span>
        <span class="c">// Last chance to touch the raw response or the parsed response</span>
<span class="c"></span>        <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">doBeforeCallback</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oParsedResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;responseParseEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span>
                <span class="nx">response</span><span class="o">:</span><span class="nx">oParsedResponse</span><span class="o">,</span> <span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span> <span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>
        <span class="c">// Cache the response</span>
<span class="c"></span>        <span class="k">this</span><span class="o">.</span><span class="nx">addToCache</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oParsedResponse</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c">// Error</span>
<span class="c"></span>    <span class="k">else</span> <span class="o">{</span>
        <span class="c">// Be sure the error flag is on</span>
<span class="c"></span>        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;dataErrorEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">response</span><span class="o">:</span> <span class="nx">oRawResponse</span><span class="o">,</span> <span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span> 
                <span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">,</span> <span class="nx">message</span><span class="o">:</span><span class="nx">DS</span><span class="o">.</span><span class="nx">ERROR_DATANULL</span><span class="o">});</span>
    <span class="o">}</span>

    <span class="c">// Send the response back to the caller</span>
<span class="c"></span>    <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">tId</span> <span class="o">=</span> <span class="nx">tId</span><span class="o">;</span>
    <span class="nx">DS</span><span class="o">.</span><span class="nx">issueCallback</span><span class="o">(</span><span class="nx">oCallback</span><span class="o">,[</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">oParsedResponse</span><span class="o">],</span><span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span><span class="o">,</span><span class="nx">oCaller</span><span class="o">);</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method gives implementers access to the original full response</span>
<span class="c"> * before the data gets parsed. Implementers should take care not to return an</span>
<span class="c"> * unparsable or otherwise invalid response.</span>
<span class="c"> *</span>
<span class="c"> * @method doBeforeParseData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full response from the live database.</span>
<span class="c"> * @param oCallback {Object} The callback object.  </span>
<span class="c"> * @return {Object} Full response for parsing.</span>
<span class="c">  </span>
<span class="c"> */</span>
<span class="nx">doBeforeParseData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nx">oFullResponse</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method gives implementers access to the original full response and</span>
<span class="c"> * the parsed response (parsed against the given schema) before the data</span>
<span class="c"> * is added to the cache (if applicable) and then sent back to callback function.</span>
<span class="c"> * This is your chance to access the raw response and/or populate the parsed</span>
<span class="c"> * response with any custom data.</span>
<span class="c"> *</span>
<span class="c"> * @method doBeforeCallback</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full response from the live database.</span>
<span class="c"> * @param oParsedResponse {Object} The parsed response to return to calling object.</span>
<span class="c"> * @param oCallback {Object} The callback object. </span>
<span class="c"> * @return {Object} Parsed response object.</span>
<span class="c"> */</span>
<span class="nx">doBeforeCallback</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">,</span> <span class="nx">oParsedResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method parses data of generic RESPONSE_TYPE into a response object.</span>
<span class="c"> *</span>
<span class="c"> * @method parseData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full Array from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties:&lt;br&gt;</span>
<span class="c"> *     - results {Array} Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - meta {Object} Object literal of meta values&lt;br&gt;</span>
<span class="c"> *     - error {Boolean} (optional) True if there was an error&lt;br&gt;</span>
<span class="c"> */</span>
<span class="nx">parseData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">results</span><span class="o">:</span><span class="nx">oFullResponse</span><span class="o">,</span><span class="nx">meta</span><span class="o">:{}};</span>
        <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method parses Array data into a response object.</span>
<span class="c"> *</span>
<span class="c"> * @method parseArrayData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full Array from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties:&lt;br&gt;</span>
<span class="c"> *     - results (Array) Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - error (Boolean) True if there was an error</span>
<span class="c"> */</span>
<span class="nx">parseArrayData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="o">[],</span>
            <span class="nx">i</span><span class="o">,</span> <span class="nx">j</span><span class="o">,</span>
            <span class="nx">rec</span><span class="o">,</span> <span class="nx">field</span><span class="o">,</span> <span class="nx">data</span><span class="o">;</span>
        
        <span class="c">// Parse for fields</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fields</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fields</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">!==</span> <span class="s1">&#39;object&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span> <span class="nx">key</span> <span class="o">:</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">};</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">var</span> <span class="nx">parsers</span> <span class="o">=</span> <span class="o">{},</span> <span class="nx">p</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">p</span> <span class="o">=</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">parser</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">?</span>
                          <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">parser</span> <span class="o">:</span>
                          <span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span><span class="o">[</span><span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">parser</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">])</span> <span class="o">||</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">converter</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">p</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">parsers</span><span class="o">[</span><span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">p</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">var</span> <span class="nx">arrType</span> <span class="o">=</span> <span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">[</span><span class="m">0</span><span class="o">]);</span>
            <span class="k">for</span><span class="o">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">oResult</span> <span class="o">=</span> <span class="o">{};</span>
                <span class="nx">rec</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">rec</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">--)</span> <span class="o">{</span>
                        <span class="nx">field</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
                        <span class="nx">data</span> <span class="o">=</span> <span class="nx">arrType</span> <span class="o">?</span> <span class="nx">rec</span><span class="o">[</span><span class="nx">j</span><span class="o">]</span> <span class="o">:</span> <span class="nx">rec</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">];</span>

                        <span class="k">if</span> <span class="o">(</span><span class="nx">parsers</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">])</span> <span class="o">{</span>
                            <span class="nx">data</span> <span class="o">=</span> <span class="nx">parsers</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">].</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="nx">data</span><span class="o">);</span>
                        <span class="o">}</span>

                        <span class="c">// Safety measure</span>
<span class="c"></span>                        <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                        <span class="o">}</span>

                        <span class="nx">oResult</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">data</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">rec</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">for</span><span class="o">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">--)</span> <span class="o">{</span>
                        <span class="nx">field</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
                        <span class="nx">data</span> <span class="o">=</span> <span class="nx">rec</span><span class="o">;</span>

                        <span class="k">if</span> <span class="o">(</span><span class="nx">parsers</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">])</span> <span class="o">{</span>
                            <span class="nx">data</span> <span class="o">=</span> <span class="nx">parsers</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">].</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="nx">data</span><span class="o">);</span>
                        <span class="o">}</span>

                        <span class="c">// Safety measure</span>
<span class="c"></span>                        <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                        <span class="o">}</span>

                        <span class="nx">oResult</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">data</span><span class="o">;</span>
                    <span class="o">}</span>                
                <span class="o">}</span>
                <span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">oResult</span><span class="o">;</span>
            <span class="o">}</span>    
        <span class="o">}</span>
        <span class="c">// Return entire data set</span>
<span class="c"></span>        <span class="k">else</span> <span class="o">{</span>
            <span class="nx">results</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">results</span><span class="o">:</span><span class="nx">results</span><span class="o">};</span>
        <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method parses plain text data into a response object.</span>
<span class="c"> *</span>
<span class="c"> * @method parseTextData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full text response from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties:&lt;br&gt;</span>
<span class="c"> *     - results (Array) Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - error (Boolean) True if there was an error</span>
<span class="c"> */</span>
<span class="nx">parseTextData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">recordDelim</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                <span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fieldDelim</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">results</span><span class="o">:[]};</span>
            <span class="k">var</span> <span class="nx">recDelim</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">recordDelim</span><span class="o">;</span>
            <span class="k">var</span> <span class="nx">fieldDelim</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fieldDelim</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">// Delete the last line delimiter at the end of the data if it exists</span>
<span class="c"></span>                <span class="k">var</span> <span class="nx">newLength</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">recDelim</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="nx">newLength</span><span class="o">)</span> <span class="o">==</span> <span class="nx">recDelim</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">oFullResponse</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">0</span><span class="o">,</span> <span class="nx">newLength</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// Split along record delimiter to get an array of strings</span>
<span class="c"></span>                    <span class="k">var</span> <span class="nx">recordsarray</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">split</span><span class="o">(</span><span class="nx">recDelim</span><span class="o">);</span>
                    <span class="c">// Cycle through each record</span>
<span class="c"></span>                    <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">recordsarray</span><span class="o">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">recIdx</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="o">;</span> <span class="o">++</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">bError</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
                            <span class="nx">sRecord</span> <span class="o">=</span> <span class="nx">recordsarray</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">sRecord</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">sRecord</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">))</span> <span class="o">{</span>
                            <span class="c">// Split each record along field delimiter to get data</span>
<span class="c"></span>                            <span class="k">var</span> <span class="nx">fielddataarray</span> <span class="o">=</span> <span class="nx">recordsarray</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">split</span><span class="o">(</span><span class="nx">fieldDelim</span><span class="o">);</span>
                            <span class="k">var</span> <span class="nx">oResult</span> <span class="o">=</span> <span class="o">{};</span>
                            
                            <span class="c">// Filter for fields data</span>
<span class="c"></span>                            <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fields</span><span class="o">))</span> <span class="o">{</span>
                                <span class="k">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fields</span><span class="o">;</span>
                                <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">--)</span> <span class="o">{</span>
                                    <span class="k">try</span> <span class="o">{</span>
                                        <span class="c">// Remove quotation marks from edges, if applicable</span>
<span class="c"></span>                                        <span class="k">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">fielddataarray</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
                                        <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">data</span><span class="o">))</span> <span class="o">{</span>
                                            <span class="k">if</span><span class="o">(</span><span class="nx">data</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="o">==</span> <span class="s2">&quot;\&quot;&quot;</span><span class="o">)</span> <span class="o">{</span>
                                                <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">1</span><span class="o">);</span>
                                            <span class="o">}</span>
                                            <span class="k">if</span><span class="o">(</span><span class="nx">data</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="nx">data</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">==</span> <span class="s2">&quot;\&quot;&quot;</span><span class="o">)</span> <span class="o">{</span>
                                                <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="o">.</span><span class="nx">substr</span><span class="o">(</span><span class="m">0</span><span class="o">,</span><span class="nx">data</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">);</span>
                                            <span class="o">}</span>
                                            <span class="k">var</span> <span class="nx">field</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
                                            <span class="k">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">))</span> <span class="o">?</span> <span class="nx">field</span><span class="o">.</span><span class="nx">key</span> <span class="o">:</span> <span class="nx">field</span><span class="o">;</span>
                                            <span class="c">// Backward compatibility</span>
<span class="c"></span>                                            <span class="k">if</span><span class="o">(!</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">&amp;&amp;</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">)</span> <span class="o">{</span>
                                                <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">=</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">;</span>
                                            <span class="o">}</span>
                                            <span class="k">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">?</span>
                                                <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">:</span>
                                                <span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">];</span>
                                            <span class="k">if</span><span class="o">(</span><span class="nx">parser</span><span class="o">)</span> <span class="o">{</span>
                                                <span class="nx">data</span> <span class="o">=</span> <span class="nx">parser</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">data</span><span class="o">);</span>
                                            <span class="o">}</span>
                                            <span class="c">// Safety measure</span>
<span class="c"></span>                                            <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                                                <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                                            <span class="o">}</span>
                                            <span class="nx">oResult</span><span class="o">[</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">data</span><span class="o">;</span>
                                        <span class="o">}</span>
                                        <span class="k">else</span> <span class="o">{</span>
                                            <span class="nx">bError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                                        <span class="o">}</span>
                                    <span class="o">}</span>
                                    <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
                                        <span class="nx">bError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                                    <span class="o">}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>            
                            <span class="c">// No fields defined so pass along all data as an array</span>
<span class="c"></span>                            <span class="k">else</span> <span class="o">{</span>
                                <span class="nx">oResult</span> <span class="o">=</span> <span class="nx">fielddataarray</span><span class="o">;</span>
                            <span class="o">}</span>
                            <span class="k">if</span><span class="o">(!</span><span class="nx">bError</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span><span class="o">[</span><span class="nx">recIdx</span><span class="o">++]</span> <span class="o">=</span> <span class="nx">oResult</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            
<span class="o">},</span>


<span class="c">/**</span>
<span class="c"> * Overridable method parses XML data for one result into an object literal.</span>
<span class="c"> *</span>
<span class="c"> * @method parseXMLResult</span>
<span class="c"> * @param result {XML} XML for one result.</span>
<span class="c"> * @return {Object} Object literal of data for one result.</span>
<span class="c"> */</span>
<span class="nx">parseXMLResult</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">result</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">oResult</span> <span class="o">=</span> <span class="o">{},</span>
        <span class="nx">schema</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">;</span>
        
    <span class="k">try</span> <span class="o">{</span>
        <span class="c">// Loop through each data field in each result using the schema</span>
<span class="c"></span>        <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">m</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">;</span> <span class="nx">m</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">field</span> <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">fields</span><span class="o">[</span><span class="nx">m</span><span class="o">];</span>
            <span class="k">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">))</span> <span class="o">?</span> <span class="nx">field</span><span class="o">.</span><span class="nx">key</span> <span class="o">:</span> <span class="nx">field</span><span class="o">;</span>
            <span class="k">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="c">// Values may be held in an attribute...</span>
<span class="c"></span>            <span class="k">var</span> <span class="nx">xmlAttr</span> <span class="o">=</span> <span class="nx">result</span><span class="o">.</span><span class="nx">attributes</span><span class="o">.</span><span class="nx">getNamedItem</span><span class="o">(</span><span class="nx">key</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">xmlAttr</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">data</span> <span class="o">=</span> <span class="nx">xmlAttr</span><span class="o">.</span><span class="nx">value</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c">// ...or in a node</span>
<span class="c"></span>            <span class="k">else</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">xmlNode</span> <span class="o">=</span> <span class="nx">result</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">key</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">xmlNode</span> <span class="o">&amp;&amp;</span> <span class="nx">xmlNode</span><span class="o">.</span><span class="nx">item</span><span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">xmlNode</span><span class="o">.</span><span class="nx">item</span><span class="o">(</span><span class="m">0</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nx">data</span> <span class="o">=</span> <span class="nx">xmlNode</span><span class="o">.</span><span class="nx">item</span><span class="o">(</span><span class="m">0</span><span class="o">).</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">nodeValue</span><span class="o">;</span>
                    <span class="k">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">xmlNode</span><span class="o">.</span><span class="nx">item</span><span class="o">(</span><span class="m">0</span><span class="o">);</span>
                    <span class="c">// For IE, then DOM...</span>
<span class="c"></span>                    <span class="nx">data</span> <span class="o">=</span> <span class="o">(</span><span class="nx">item</span><span class="o">.</span><span class="nx">text</span><span class="o">)</span> <span class="o">?</span> <span class="nx">item</span><span class="o">.</span><span class="nx">text</span> <span class="o">:</span> <span class="o">(</span><span class="nx">item</span><span class="o">.</span><span class="nx">textContent</span><span class="o">)</span> <span class="o">?</span> <span class="nx">item</span><span class="o">.</span><span class="nx">textContent</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="c">// ...then fallback, but check for multiple child nodes</span>
<span class="c"></span>                    <span class="k">if</span><span class="o">(!</span><span class="nx">data</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">datapieces</span> <span class="o">=</span> <span class="o">[];</span>
                        <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="m">0</span><span class="o">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">item</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">len</span><span class="o">;</span> <span class="nx">j</span><span class="o">++)</span> <span class="o">{</span>
                            <span class="k">if</span><span class="o">(</span><span class="nx">item</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">nodeValue</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">datapieces</span><span class="o">[</span><span class="nx">datapieces</span><span class="o">.</span><span class="nx">length</span><span class="o">]</span> <span class="o">=</span> <span class="nx">item</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">nodeValue</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                        <span class="k">if</span><span class="o">(</span><span class="nx">datapieces</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">data</span> <span class="o">=</span> <span class="nx">datapieces</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">);</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c">// Safety net</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                   <span class="nx">data</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c">// Backward compatibility</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(!</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">&amp;&amp;</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">=</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">?</span>
                <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">:</span>
                <span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">parser</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">data</span> <span class="o">=</span> <span class="nx">parser</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">data</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c">// Safety measure</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nx">oResult</span><span class="o">[</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">data</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="nx">oResult</span><span class="o">;</span>
<span class="o">},</span>



<span class="c">/**</span>
<span class="c"> * Overridable method parses XML data into a response object.</span>
<span class="c"> *</span>
<span class="c"> * @method parseXMLData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full XML response from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties&lt;br&gt;</span>
<span class="c"> *     - results (Array) Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - error (Boolean) True if there was an error</span>
<span class="c"> */</span>
<span class="nx">parseXMLData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">bError</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
        <span class="nx">schema</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">,</span>
        <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">meta</span><span class="o">:{}},</span>
        <span class="nx">xmlList</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">metaNode</span>      <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">metaNode</span><span class="o">,</span>
        <span class="nx">metaLocators</span>  <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">metaFields</span> <span class="o">||</span> <span class="o">{},</span>
        <span class="nx">i</span><span class="o">,</span><span class="nx">k</span><span class="o">,</span><span class="nx">loc</span><span class="o">,</span><span class="nx">v</span><span class="o">;</span>

    <span class="c">// In case oFullResponse is something funky</span>
<span class="c"></span>    <span class="k">try</span> <span class="o">{</span>
        <span class="nx">xmlList</span> <span class="o">=</span> <span class="o">(</span><span class="nx">schema</span><span class="o">.</span><span class="nx">resultNode</span><span class="o">)</span> <span class="o">?</span>
            <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">schema</span><span class="o">.</span><span class="nx">resultNode</span><span class="o">)</span> <span class="o">:</span>
            <span class="kc">null</span><span class="o">;</span>

        <span class="c">// Pull any meta identified</span>
<span class="c"></span>        <span class="nx">metaNode</span> <span class="o">=</span> <span class="nx">metaNode</span> <span class="o">?</span> <span class="nx">oFullResponse</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">metaNode</span><span class="o">)[</span><span class="m">0</span><span class="o">]</span> <span class="o">:</span>
                   <span class="nx">oFullResponse</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="nx">metaNode</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">metaLocators</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">metaLocators</span><span class="o">,</span> <span class="nx">k</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nx">loc</span> <span class="o">=</span> <span class="nx">metaLocators</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>
                    <span class="c">// Look for a node</span>
<span class="c"></span>                    <span class="nx">v</span> <span class="o">=</span> <span class="nx">metaNode</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">loc</span><span class="o">)[</span><span class="m">0</span><span class="o">];</span>

                    <span class="k">if</span> <span class="o">(</span><span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">nodeValue</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                        <span class="c">// Look for an attribute</span>
<span class="c"></span>                        <span class="nx">v</span> <span class="o">=</span> <span class="nx">metaNode</span><span class="o">.</span><span class="nx">attributes</span><span class="o">.</span><span class="nx">getNamedItem</span><span class="o">(</span><span class="nx">loc</span><span class="o">);</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">v</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="o">.</span><span class="nx">value</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>

                    <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">v</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">meta</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">catch</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(!</span><span class="nx">xmlList</span> <span class="o">||</span> <span class="o">!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">schema</span><span class="o">.</span><span class="nx">fields</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">bError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c">// Loop through each result</span>
<span class="c"></span>    <span class="k">else</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="k">for</span><span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">xmlList</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span> <span class="o">;</span> <span class="o">--</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">oResult</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">parseXMLResult</span><span class="o">(</span><span class="nx">xmlList</span><span class="o">.</span><span class="nx">item</span><span class="o">(</span><span class="nx">i</span><span class="o">));</span>
            <span class="c">// Capture each array of values into an array of results</span>
<span class="c"></span>            <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">oResult</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">bError</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method parses JSON data into a response object.</span>
<span class="c"> *</span>
<span class="c"> * @method parseJSONData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full JSON from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties&lt;br&gt;</span>
<span class="c"> *     - results (Array) Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - error (Boolean) True if there was an error</span>
<span class="c"> */</span>
<span class="nx">parseJSONData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">results</span><span class="o">:[],</span><span class="nx">meta</span><span class="o">:{}};</span>
    
    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">resultsList</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">,</span>
            <span class="nx">fields</span>          <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">fields</span><span class="o">,</span>
            <span class="nx">resultsList</span>     <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">,</span>
            <span class="nx">results</span>         <span class="o">=</span> <span class="o">[],</span>
            <span class="nx">metaFields</span>      <span class="o">=</span> <span class="nx">schema</span><span class="o">.</span><span class="nx">metaFields</span> <span class="o">||</span> <span class="o">{},</span>
            <span class="nx">fieldParsers</span>    <span class="o">=</span> <span class="o">[],</span>
            <span class="nx">fieldPaths</span>      <span class="o">=</span> <span class="o">[],</span>
            <span class="nx">simpleFields</span>    <span class="o">=</span> <span class="o">[],</span>
            <span class="nx">bError</span>          <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
            <span class="nx">i</span><span class="o">,</span><span class="nx">len</span><span class="o">,</span><span class="nx">j</span><span class="o">,</span><span class="nx">v</span><span class="o">,</span><span class="nx">key</span><span class="o">,</span><span class="nx">parser</span><span class="o">,</span><span class="nx">path</span><span class="o">;</span>

        <span class="c">// Function to convert the schema&#39;s fields into walk paths</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">buildPath</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">needle</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span> <span class="nx">keys</span> <span class="o">=</span> <span class="o">[],</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">needle</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">// Strip the [&quot;string keys&quot;] and [1] array indexes</span>
<span class="c"></span>                <span class="nx">needle</span> <span class="o">=</span> <span class="nx">needle</span><span class="o">.</span>
                    <span class="nx">replace</span><span class="o">(</span><span class="sr">/\[([&#39;&quot;])(.*?)\1\]/g</span><span class="o">,</span>
                    <span class="k">function</span> <span class="o">(</span><span class="nx">x</span><span class="o">,</span><span class="nx">$1</span><span class="o">,</span><span class="nx">$2</span><span class="o">)</span> <span class="o">{</span><span class="nx">keys</span><span class="o">[</span><span class="nx">i</span><span class="o">]=</span><span class="nx">$2</span><span class="o">;</span><span class="k">return</span> <span class="s1">&#39;.@&#39;</span><span class="o">+(</span><span class="nx">i</span><span class="o">++);}).</span>
                    <span class="nx">replace</span><span class="o">(</span><span class="sr">/\[(\d+)\]/g</span><span class="o">,</span>
                    <span class="k">function</span> <span class="o">(</span><span class="nx">x</span><span class="o">,</span><span class="nx">$1</span><span class="o">)</span> <span class="o">{</span><span class="nx">keys</span><span class="o">[</span><span class="nx">i</span><span class="o">]=</span><span class="nb">parseInt</span><span class="o">(</span><span class="nx">$1</span><span class="o">,</span><span class="m">10</span><span class="o">)|</span><span class="m">0</span><span class="o">;</span><span class="k">return</span> <span class="s1">&#39;.@&#39;</span><span class="o">+(</span><span class="nx">i</span><span class="o">++);}).</span>
                    <span class="nx">replace</span><span class="o">(</span><span class="sr">/^\./</span><span class="o">,</span><span class="s1">&#39;&#39;</span><span class="o">);</span> <span class="c">// remove leading dot</span>
<span class="c"></span>
                <span class="c">// If the cleaned needle contains invalid characters, the</span>
<span class="c"></span>                <span class="c">// path is invalid</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(!</span><span class="sr">/[^\w\.\$@]/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">needle</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nx">path</span> <span class="o">=</span> <span class="nx">needle</span><span class="o">.</span><span class="nx">split</span><span class="o">(</span><span class="s1">&#39;.&#39;</span><span class="o">);</span>
                    <span class="k">for</span> <span class="o">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">path</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">path</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">charAt</span><span class="o">(</span><span class="m">0</span><span class="o">)</span> <span class="o">===</span> <span class="s1">&#39;@&#39;</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">path</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">keys</span><span class="o">[</span><span class="nb">parseInt</span><span class="o">(</span><span class="nx">path</span><span class="o">[</span><span class="nx">i</span><span class="o">].</span><span class="nx">substr</span><span class="o">(</span><span class="m">1</span><span class="o">),</span><span class="m">10</span><span class="o">)];</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="nx">path</span><span class="o">;</span>
        <span class="o">};</span>


        <span class="c">// Function to walk a path and return the pot of gold</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">walkPath</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">path</span><span class="o">,</span> <span class="nx">origin</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">origin</span><span class="o">,</span><span class="nx">i</span><span class="o">=</span><span class="m">0</span><span class="o">,</span><span class="nx">len</span><span class="o">=</span><span class="nx">path</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span> <span class="o">&amp;&amp;</span> <span class="nx">v</span><span class="o">;++</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="o">[</span><span class="nx">path</span><span class="o">[</span><span class="nx">i</span><span class="o">]];</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="nx">v</span><span class="o">;</span>
        <span class="o">};</span>

        <span class="c">// Parse the response</span>
<span class="c"></span>        <span class="c">// Step 1. Pull the resultsList from oFullResponse (default assumes</span>
<span class="c"></span>        <span class="c">// oFullResponse IS the resultsList)</span>
<span class="c"></span>        <span class="nx">path</span> <span class="o">=</span> <span class="nx">buildPath</span><span class="o">(</span><span class="nx">schema</span><span class="o">.</span><span class="nx">resultsList</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">path</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">resultsList</span> <span class="o">=</span> <span class="nx">walkPath</span><span class="o">(</span><span class="nx">path</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">resultsList</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">bError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nx">bError</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">if</span> <span class="o">(!</span><span class="nx">resultsList</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">resultsList</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">resultsList</span><span class="o">))</span> <span class="o">{</span>
            <span class="nx">resultsList</span> <span class="o">=</span> <span class="o">[</span><span class="nx">resultsList</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="nx">bError</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// Step 2. Parse out field data if identified</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">schema</span><span class="o">.</span><span class="nx">fields</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">field</span><span class="o">;</span>
                <span class="c">// Build the field parser map and location paths</span>
<span class="c"></span>                <span class="k">for</span> <span class="o">(</span><span class="nx">i</span><span class="o">=</span><span class="m">0</span><span class="o">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="o">;</span> <span class="nx">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="nx">field</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                    <span class="nx">key</span>    <span class="o">=</span> <span class="nx">field</span><span class="o">.</span><span class="nx">key</span> <span class="o">||</span> <span class="nx">field</span><span class="o">;</span>
                    <span class="nx">parser</span> <span class="o">=</span> <span class="o">((</span><span class="k">typeof</span> <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">?</span>
                        <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">:</span>
                        <span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">])</span> <span class="o">||</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">;</span>
                    <span class="nx">path</span>   <span class="o">=</span> <span class="nx">buildPath</span><span class="o">(</span><span class="nx">key</span><span class="o">);</span>
    
                    <span class="k">if</span> <span class="o">(</span><span class="nx">parser</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">fieldParsers</span><span class="o">[</span><span class="nx">fieldParsers</span><span class="o">.</span><span class="nx">length</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="nx">key</span><span class="o">:</span><span class="nx">key</span><span class="o">,</span><span class="nx">parser</span><span class="o">:</span><span class="nx">parser</span><span class="o">};</span>
                    <span class="o">}</span>
    
                    <span class="k">if</span> <span class="o">(</span><span class="nx">path</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">path</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">fieldPaths</span><span class="o">[</span><span class="nx">fieldPaths</span><span class="o">.</span><span class="nx">length</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="nx">key</span><span class="o">:</span><span class="nx">key</span><span class="o">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">path</span><span class="o">};</span>
                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                            <span class="nx">simpleFields</span><span class="o">[</span><span class="nx">simpleFields</span><span class="o">.</span><span class="nx">length</span><span class="o">]</span> <span class="o">=</span> <span class="o">{</span><span class="nx">key</span><span class="o">:</span><span class="nx">key</span><span class="o">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">path</span><span class="o">[</span><span class="m">0</span><span class="o">]};</span>
                        <span class="o">}</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="o">}</span>
                <span class="o">}</span>

                <span class="c">// Process the results, flattening the records and/or applying parsers if needed</span>
<span class="c"></span>                <span class="c">//if (fieldParsers.length || fieldPaths.length) {</span>
<span class="c"></span>                    <span class="k">for</span> <span class="o">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">resultsList</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">resultsList</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">rec</span> <span class="o">=</span> <span class="o">{};</span>
                        <span class="k">for</span> <span class="o">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">simpleFields</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">j</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c">// Bug 1777850: data might be held in an array</span>
<span class="c"></span>                            <span class="nx">rec</span><span class="o">[</span><span class="nx">simpleFields</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span>
                                    <span class="o">(</span><span class="nx">r</span><span class="o">[</span><span class="nx">simpleFields</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">path</span><span class="o">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">?</span>
                                    <span class="nx">r</span><span class="o">[</span><span class="nx">simpleFields</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">path</span><span class="o">]</span> <span class="o">:</span> <span class="nx">r</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
                        <span class="o">}</span>

                        <span class="k">for</span> <span class="o">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">fieldPaths</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">j</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">rec</span><span class="o">[</span><span class="nx">fieldPaths</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">walkPath</span><span class="o">(</span><span class="nx">fieldPaths</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">path</span><span class="o">,</span><span class="nx">r</span><span class="o">);</span>
                        <span class="o">}</span>

                        <span class="k">for</span> <span class="o">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">fieldParsers</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="o">;</span> <span class="o">--</span><span class="nx">j</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">fieldParsers</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">key</span><span class="o">;</span>
                            <span class="nx">rec</span><span class="o">[</span><span class="nx">p</span><span class="o">]</span> <span class="o">=</span> <span class="nx">fieldParsers</span><span class="o">[</span><span class="nx">j</span><span class="o">].</span><span class="nx">parser</span><span class="o">(</span><span class="nx">rec</span><span class="o">[</span><span class="nx">p</span><span class="o">]);</span>
                            <span class="k">if</span> <span class="o">(</span><span class="nx">rec</span><span class="o">[</span><span class="nx">p</span><span class="o">]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">rec</span><span class="o">[</span><span class="nx">p</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                        <span class="nx">results</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="nx">rec</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="c">//}</span>
<span class="c"></span>            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="nx">results</span> <span class="o">=</span> <span class="nx">resultsList</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">for</span> <span class="o">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">metaFields</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">hasOwnProperty</span><span class="o">(</span><span class="nx">metaFields</span><span class="o">,</span><span class="nx">key</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nx">path</span> <span class="o">=</span> <span class="nx">buildPath</span><span class="o">(</span><span class="nx">metaFields</span><span class="o">[</span><span class="nx">key</span><span class="o">]);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">path</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">v</span> <span class="o">=</span> <span class="nx">walkPath</span><span class="o">(</span><span class="nx">path</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">);</span>
                        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">meta</span><span class="o">[</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>

        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>

            <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span> <span class="o">=</span> <span class="nx">results</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overridable method parses an HTML TABLE element reference into a response object.</span>
<span class="c"> * Data is parsed out of TR elements from all TBODY elements. </span>
<span class="c"> *</span>
<span class="c"> * @method parseHTMLTableData</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oFullResponse {Object} The full HTML element reference from the live database.</span>
<span class="c"> * @return {Object} Parsed response object with the following properties&lt;br&gt;</span>
<span class="c"> *     - results (Array) Array of parsed data results&lt;br&gt;</span>
<span class="c"> *     - error (Boolean) True if there was an error</span>
<span class="c"> */</span>
<span class="nx">parseHTMLTableData</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oFullResponse</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">bError</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">elTable</span> <span class="o">=</span> <span class="nx">oFullResponse</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">responseSchema</span><span class="o">.</span><span class="nx">fields</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">oParsedResponse</span> <span class="o">=</span> <span class="o">{</span><span class="nx">results</span><span class="o">:[]};</span>

    <span class="c">// Iterate through each TBODY</span>
<span class="c"></span>    <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="m">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">elTable</span><span class="o">.</span><span class="nx">tBodies</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">elTbody</span> <span class="o">=</span> <span class="nx">elTable</span><span class="o">.</span><span class="nx">tBodies</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>

        <span class="c">// Iterate through each TR</span>
<span class="c"></span>        <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">elTbody</span><span class="o">.</span><span class="nx">rows</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">elRow</span> <span class="o">=</span> <span class="nx">elTbody</span><span class="o">.</span><span class="nx">rows</span><span class="o">[</span><span class="nx">j</span><span class="o">];</span>
            <span class="k">var</span> <span class="nx">oResult</span> <span class="o">=</span> <span class="o">{};</span>
            
            <span class="k">for</span><span class="o">(</span><span class="k">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">fields</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span> <span class="nx">k</span><span class="o">&gt;-</span><span class="m">1</span><span class="o">;</span> <span class="nx">k</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">field</span> <span class="o">=</span> <span class="nx">fields</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>
                <span class="k">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">field</span><span class="o">.</span><span class="nx">key</span><span class="o">))</span> <span class="o">?</span> <span class="nx">field</span><span class="o">.</span><span class="nx">key</span> <span class="o">:</span> <span class="nx">field</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">elRow</span><span class="o">.</span><span class="nx">cells</span><span class="o">[</span><span class="nx">k</span><span class="o">].</span><span class="nx">innerHTML</span><span class="o">;</span>

                <span class="c">// Backward compatibility</span>
<span class="c"></span>                <span class="k">if</span><span class="o">(!</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">&amp;&amp;</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">=</span> <span class="nx">field</span><span class="o">.</span><span class="nx">converter</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="o">(</span><span class="k">typeof</span> <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">?</span>
                    <span class="nx">field</span><span class="o">.</span><span class="nx">parser</span> <span class="o">:</span>
                    <span class="nx">DS</span><span class="o">.</span><span class="nx">Parser</span><span class="o">[</span><span class="nx">field</span><span class="o">.</span><span class="nx">parser</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="o">];</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">parser</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">data</span> <span class="o">=</span> <span class="nx">parser</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">data</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="c">// Safety measure</span>
<span class="c"></span>                <span class="k">if</span><span class="o">(</span><span class="nx">data</span> <span class="o">===</span> <span class="kc">undefined</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="nx">oResult</span><span class="o">[</span><span class="nx">key</span><span class="o">]</span> <span class="o">=</span> <span class="nx">data</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">results</span><span class="o">[</span><span class="nx">j</span><span class="o">]</span> <span class="o">=</span> <span class="nx">oResult</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">if</span><span class="o">(</span><span class="nx">bError</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oParsedResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nx">oParsedResponse</span><span class="o">;</span>
<span class="o">}</span>

<span class="o">};</span>

<span class="c">// DataSourceBase uses EventProvider</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentProto</span><span class="o">(</span><span class="nx">DS</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">EventProvider</span><span class="o">);</span>



<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * LocalDataSource class for in-memory data structs including JavaScript arrays,</span>
<span class="c"> * JavaScript object literals (JSON), XML documents, and HTML tables.</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.LocalDataSource</span>
<span class="c"> * @extends YAHOO.util.DataSourceBase </span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">dataType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_LOCAL</span><span class="o">;</span>
    
    <span class="k">if</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">))</span> <span class="o">{</span> <span class="c">// array</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">;</span>
        <span class="o">}</span>
         <span class="c">// xml</span>
<span class="c"></span>        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">&amp;&amp;</span> <span class="nx">oLiveData</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">9</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">oLiveData</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">==</span> <span class="s2">&quot;table&quot;</span><span class="o">))</span> <span class="o">{</span> <span class="c">// table</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_HTMLTABLE</span><span class="o">;</span>
            <span class="nx">oLiveData</span> <span class="o">=</span> <span class="nx">oLiveData</span><span class="o">.</span><span class="nx">cloneNode</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span>    
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">))</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">))</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="nx">oLiveData</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span> 
<span class="o">};</span>

<span class="c">// LocalDataSource extends DataSourceBase</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>

<span class="c">// Copy static members to LocalDataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>













<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * FunctionDataSource class for JavaScript functions.</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.FunctionDataSource</span>
<span class="c"> * @extends YAHOO.util.DataSourceBase  </span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">dataType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSFUNCTION</span><span class="o">;</span>
    <span class="nx">oLiveData</span> <span class="o">=</span> <span class="nx">oLiveData</span> <span class="o">||</span> <span class="k">function</span><span class="o">()</span> <span class="o">{};</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span> 
<span class="o">};</span>

<span class="c">// FunctionDataSource extends DataSourceBase</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">,</span> <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// FunctionDataSource public methods</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Overriding method passes query to a function. The returned response is then</span>
<span class="c"> * forwarded to the handleResponse function.</span>
<span class="c"> *</span>
<span class="c"> * @method makeConnection</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} Callback object literal.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Transaction ID.</span>
<span class="c"> */</span>
<span class="nx">makeConnection</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">tId</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">_nTransactionId</span><span class="o">++;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;requestEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">tId</span><span class="o">:</span><span class="nx">tId</span><span class="o">,</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>

    <span class="c">// Pass the request in as a parameter and</span>
<span class="c"></span>    <span class="c">// forward the return value to the handler</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">oRawResponse</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">);</span>
    
    <span class="c">// Try to sniff data type if it has not been defined</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">===</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// array</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">;</span>
        <span class="o">}</span>
         <span class="c">// xml</span>
<span class="c"></span>        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">9</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">==</span> <span class="s2">&quot;table&quot;</span><span class="o">))</span> <span class="o">{</span> <span class="c">// table</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_HTMLTABLE</span><span class="o">;</span>
        <span class="o">}</span>    
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>            <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">this</span><span class="o">.</span><span class="nx">handleResponse</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oRawResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">,</span> <span class="nx">tId</span><span class="o">);</span>
    <span class="k">return</span> <span class="nx">tId</span><span class="o">;</span>
<span class="o">}</span>

<span class="o">});</span>

<span class="c">// Copy static members to FunctionDataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>













<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * ScriptNodeDataSource class for accessing remote data via the YUI Get Utility. </span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.ScriptNodeDataSource</span>
<span class="c"> * @extends YAHOO.util.DataSourceBase  </span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">dataType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_SCRIPTNODE</span><span class="o">;</span>
    <span class="nx">oLiveData</span> <span class="o">=</span> <span class="nx">oLiveData</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span> 
<span class="o">};</span>

<span class="c">// ScriptNodeDataSource extends DataSourceBase</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">,</span> <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// ScriptNodeDataSource public properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Alias to YUI Get Utility, to allow implementers to use a custom class.</span>
<span class="c"> *</span>
<span class="c"> * @property getUtility</span>
<span class="c"> * @type Object</span>
<span class="c"> * @default YAHOO.util.Get</span>
<span class="c"> */</span>
<span class="nx">getUtility</span> <span class="o">:</span> <span class="nx">util</span><span class="o">.</span><span class="nx">Get</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Defines request/response management in the following manner:</span>
<span class="c"> * &lt;dl&gt;</span>
<span class="c"> *     &lt;!--&lt;dt&gt;queueRequests&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;If a request is already in progress, wait until response is returned before sending the next request.&lt;/dd&gt;</span>
<span class="c"> *     &lt;dt&gt;cancelStaleRequests&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;If a request is already in progress, cancel it before sending the next request.&lt;/dd&gt;--&gt;</span>
<span class="c"> *     &lt;dt&gt;ignoreStaleResponses&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;Send all requests, but handle only the response for the most recently sent request.&lt;/dd&gt;</span>
<span class="c"> *     &lt;dt&gt;allowAll&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt;</span>
<span class="c"> * &lt;/dl&gt;</span>
<span class="c"> *</span>
<span class="c"> * @property asyncMode</span>
<span class="c"> * @type String</span>
<span class="c"> * @default &quot;allowAll&quot;</span>
<span class="c"> */</span>
<span class="nx">asyncMode</span> <span class="o">:</span> <span class="s2">&quot;allowAll&quot;</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Callback string parameter name sent to the remote script. By default,</span>
<span class="c"> * requests are sent to</span>
<span class="c"> * &amp;#60;URI&amp;#62;?&amp;#60;scriptCallbackParam&amp;#62;=callbackFunction</span>
<span class="c"> *</span>
<span class="c"> * @property scriptCallbackParam</span>
<span class="c"> * @type String</span>
<span class="c"> * @default &quot;callback&quot;</span>
<span class="c"> */</span>
<span class="nx">scriptCallbackParam</span> <span class="o">:</span> <span class="s2">&quot;callback&quot;</span><span class="o">,</span>


<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// ScriptNodeDataSource public methods</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Creates a request callback that gets appended to the script URI. Implementers</span>
<span class="c"> * can customize this string to match their server&#39;s query syntax.</span>
<span class="c"> *</span>
<span class="c"> * @method generateRequestCallback</span>
<span class="c"> * @return {String} String fragment that gets appended to script URI that </span>
<span class="c"> * specifies the callback function </span>
<span class="c"> */</span>
<span class="nx">generateRequestCallback</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s2">&quot;&amp;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">scriptCallbackParam</span> <span class="o">+</span> <span class="s2">&quot;=YAHOO.util.ScriptNodeDataSource.callbacks[&quot;</span><span class="o">+</span><span class="nx">id</span><span class="o">+</span><span class="s2">&quot;]&quot;</span> <span class="o">;</span>
<span class="o">},</span>

<span class="c">/**</span>
<span class="c"> * Overriding method passes query to Get Utility. The returned</span>
<span class="c"> * response is then forwarded to the handleResponse function.</span>
<span class="c"> *</span>
<span class="c"> * @method makeConnection</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} Callback object literal.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Transaction ID.</span>
<span class="c"> */</span>
<span class="nx">makeConnection</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">tId</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">_nTransactionId</span><span class="o">++;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;requestEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">tId</span><span class="o">:</span><span class="nx">tId</span><span class="o">,</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>
    
    <span class="c">// If there are no global pending requests, it is safe to purge global callback stack and global counter</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_nPending</span> <span class="o">===</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">callbacks</span> <span class="o">=</span> <span class="o">[];</span>
        <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_nId</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="c">// ID for this request</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_nId</span><span class="o">;</span>
    <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_nId</span><span class="o">++;</span>
    
    <span class="c">// Dynamically add handler function with a closure to the callback stack</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">oSelf</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">callbacks</span><span class="o">[</span><span class="nx">id</span><span class="o">]</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">((</span><span class="nx">oSelf</span><span class="o">.</span><span class="nx">asyncMode</span> <span class="o">!==</span> <span class="s2">&quot;ignoreStaleResponses&quot;</span><span class="o">)||</span>
                <span class="o">(</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">callbacks</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">))</span> <span class="o">{</span> <span class="c">// Must ignore stale responses</span>
<span class="c"></span>                
            <span class="c">// Try to sniff data type if it has not been defined</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">===</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// array</span>
<span class="c"></span>                    <span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSARRAY</span><span class="o">;</span>
                <span class="o">}</span>
                 <span class="c">// xml</span>
<span class="c"></span>                <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">&amp;&amp;</span> <span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">==</span> <span class="m">9</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">oRawResponse</span><span class="o">.</span><span class="nx">nodeName</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">==</span> <span class="s2">&quot;table&quot;</span><span class="o">))</span> <span class="o">{</span> <span class="c">// table</span>
<span class="c"></span>                    <span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_HTMLTABLE</span><span class="o">;</span>
                <span class="o">}</span>    
                <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>                    <span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oRawResponse</span><span class="o">))</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>                    <span class="nx">oSelf</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="nx">oSelf</span><span class="o">.</span><span class="nx">handleResponse</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oRawResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">,</span> <span class="nx">tId</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
        <span class="o">}</span>
    
        <span class="nx">delete</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">callbacks</span><span class="o">[</span><span class="nx">id</span><span class="o">];</span>
    <span class="o">};</span>
    
    <span class="c">// We are now creating a request</span>
<span class="c"></span>    <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_nPending</span><span class="o">++;</span>
    <span class="k">var</span> <span class="nx">sUri</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span> <span class="o">+</span> <span class="nx">oRequest</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">generateRequestCallback</span><span class="o">(</span><span class="nx">id</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">getUtility</span><span class="o">.</span><span class="nx">script</span><span class="o">(</span><span class="nx">sUri</span><span class="o">,</span>
            <span class="o">{</span><span class="nx">autopurge</span><span class="o">:</span> <span class="kc">true</span><span class="o">,</span>
            <span class="nx">onsuccess</span><span class="o">:</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_bumpPendingDown</span><span class="o">,</span>
            <span class="nx">onfail</span><span class="o">:</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">.</span><span class="nx">_bumpPendingDown</span><span class="o">});</span>

    <span class="k">return</span> <span class="nx">tId</span><span class="o">;</span>
<span class="o">}</span>

<span class="o">});</span>

<span class="c">// Copy static members to ScriptNodeDataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>

<span class="c">// Copy static members to ScriptNodeDataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">,</span>  <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// ScriptNodeDataSource private static properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Unique ID to track requests.</span>
<span class="c"> *</span>
<span class="c"> * @property _nId</span>
<span class="c"> * @type Number</span>
<span class="c"> * @private</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">_nId</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Counter for pending requests. When this is 0, it is safe to purge callbacks</span>
<span class="c"> * array.</span>
<span class="c"> *</span>
<span class="c"> * @property _nPending</span>
<span class="c"> * @type Number</span>
<span class="c"> * @private</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">_nPending</span> <span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/**</span>
<span class="c"> * Global array of callback functions, one for each request sent.</span>
<span class="c"> *</span>
<span class="c"> * @property callbacks</span>
<span class="c"> * @type Function[]</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="nx">callbacks</span> <span class="o">:</span> <span class="o">[]</span>

<span class="o">});</span>














<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * XHRDataSource class for accessing remote data via the YUI Connection Manager</span>
<span class="c"> * Utility</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.XHRDataSource</span>
<span class="c"> * @extends YAHOO.util.DataSourceBase  </span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">dataType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XHR</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">connMgr</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">connMgr</span> <span class="o">||</span> <span class="nx">util</span><span class="o">.</span><span class="nx">Connect</span><span class="o">;</span>
    <span class="nx">oLiveData</span> <span class="o">=</span> <span class="nx">oLiveData</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    
    <span class="k">this</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span> 
<span class="o">};</span>

<span class="c">// XHRDataSource extends DataSourceBase</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">,</span> <span class="o">{</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// XHRDataSource public properties</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
 <span class="c">/**</span>
<span class="c"> * Alias to YUI Connection Manager, to allow implementers to use a custom class.</span>
<span class="c"> *</span>
<span class="c"> * @property connMgr</span>
<span class="c"> * @type Object</span>
<span class="c"> * @default YAHOO.util.Connect</span>
<span class="c"> */</span>
<span class="nx">connMgr</span><span class="o">:</span> <span class="kc">null</span><span class="o">,</span>

 <span class="c">/**</span>
<span class="c"> * Defines request/response management in the following manner:</span>
<span class="c"> * &lt;dl&gt;</span>
<span class="c"> *     &lt;dt&gt;queueRequests&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;If a request is already in progress, wait until response is returned</span>
<span class="c"> *     before sending the next request.&lt;/dd&gt;</span>
<span class="c"> *</span>
<span class="c"> *     &lt;dt&gt;cancelStaleRequests&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;If a request is already in progress, cancel it before sending the next</span>
<span class="c"> *     request.&lt;/dd&gt;</span>
<span class="c"> *</span>
<span class="c"> *     &lt;dt&gt;ignoreStaleResponses&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;Send all requests, but handle only the response for the most recently</span>
<span class="c"> *     sent request.&lt;/dd&gt;</span>
<span class="c"> *</span>
<span class="c"> *     &lt;dt&gt;allowAll&lt;/dt&gt;</span>
<span class="c"> *     &lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt;</span>
<span class="c"> *</span>
<span class="c"> * &lt;/dl&gt;</span>
<span class="c"> *</span>
<span class="c"> * @property connXhrMode</span>
<span class="c"> * @type String</span>
<span class="c"> * @default &quot;allowAll&quot;</span>
<span class="c"> */</span>
<span class="nx">connXhrMode</span><span class="o">:</span> <span class="s2">&quot;allowAll&quot;</span><span class="o">,</span>

 <span class="c">/**</span>
<span class="c"> * True if data is to be sent via POST. By default, data will be sent via GET.</span>
<span class="c"> *</span>
<span class="c"> * @property connMethodPost</span>
<span class="c"> * @type Boolean</span>
<span class="c"> * @default false</span>
<span class="c"> */</span>
<span class="nx">connMethodPost</span><span class="o">:</span> <span class="kc">false</span><span class="o">,</span>

 <span class="c">/**</span>
<span class="c"> * The connection timeout defines how many  milliseconds the XHR connection will</span>
<span class="c"> * wait for a server response. Any non-zero value will enable the Connection Manager&#39;s</span>
<span class="c"> * Auto-Abort feature.</span>
<span class="c"> *</span>
<span class="c"> * @property connTimeout</span>
<span class="c"> * @type Number</span>
<span class="c"> * @default 0</span>
<span class="c"> */</span>
<span class="nx">connTimeout</span><span class="o">:</span> <span class="m">0</span><span class="o">,</span>

<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c">//</span>
<span class="c">// XHRDataSource public methods</span>
<span class="c">//</span>
<span class="c">/////////////////////////////////////////////////////////////////////////////</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c"> * Overriding method passes query to Connection Manager. The returned</span>
<span class="c"> * response is then forwarded to the handleResponse function.</span>
<span class="c"> *</span>
<span class="c"> * @method makeConnection</span>
<span class="c"> * @param oRequest {Object} Request object.</span>
<span class="c"> * @param oCallback {Object} Callback object literal.</span>
<span class="c"> * @param oCaller {Object} (deprecated) Use oCallback.scope.</span>
<span class="c"> * @return {Number} Transaction ID.</span>
<span class="c"> */</span>
<span class="nx">makeConnection</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">)</span> <span class="o">{</span>

    <span class="k">var</span> <span class="nx">oRawResponse</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">tId</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">_nTransactionId</span><span class="o">++;</span>
    <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;requestEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">tId</span><span class="o">:</span><span class="nx">tId</span><span class="o">,</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span><span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">});</span>

    <span class="c">// Set up the callback object and</span>
<span class="c"></span>    <span class="c">// pass the request in as a URL query and</span>
<span class="c"></span>    <span class="c">// forward the response to the handler</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">oSelf</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">oConnMgr</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">connMgr</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">oQueue</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">_oQueue</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * Define Connection Manager success handler</span>
<span class="c">     *</span>
<span class="c">     * @method _xhrSuccess</span>
<span class="c">     * @param oResponse {Object} HTTPXMLRequest object</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_xhrSuccess</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oResponse</span><span class="o">)</span> <span class="o">{</span>
        <span class="c">// If response ID does not match last made request ID,</span>
<span class="c"></span>        <span class="c">// silently fail and wait for the next response</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(</span><span class="nx">oResponse</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">asyncMode</span> <span class="o">==</span> <span class="s2">&quot;ignoreStaleResponses&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                <span class="o">(</span><span class="nx">oResponse</span><span class="o">.</span><span class="nx">tId</span> <span class="o">!=</span> <span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span><span class="o">.</span><span class="nx">tId</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// Error if no response</span>
<span class="c"></span>        <span class="k">else</span> <span class="k">if</span><span class="o">(!</span><span class="nx">oResponse</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;dataErrorEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span>
                    <span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span> <span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">,</span>
                    <span class="nx">message</span><span class="o">:</span><span class="nx">DS</span><span class="o">.</span><span class="nx">ERROR_DATANULL</span><span class="o">});</span>

            <span class="c">// Send error response back to the caller with the error flag on</span>
<span class="c"></span>            <span class="nx">DS</span><span class="o">.</span><span class="nx">issueCallback</span><span class="o">(</span><span class="nx">oCallback</span><span class="o">,[</span><span class="nx">oRequest</span><span class="o">,</span> <span class="o">{</span><span class="nx">error</span><span class="o">:</span><span class="kc">true</span><span class="o">}],</span> <span class="kc">true</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">);</span>

            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// Forward to handler</span>
<span class="c"></span>        <span class="k">else</span> <span class="o">{</span>
            <span class="c">// Try to sniff data type if it has not been defined</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">===</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_UNKNOWN</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">ctype</span> <span class="o">=</span> <span class="o">(</span><span class="nx">oResponse</span><span class="o">.</span><span class="nx">getResponseHeader</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oResponse</span><span class="o">.</span><span class="nx">getResponseHeader</span><span class="o">[</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">]</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// xml</span>
<span class="c"></span>                    <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;text/xml&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XML</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;application/json&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span> <span class="c">// json</span>
<span class="c"></span>                        <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSON</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">ctype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;text/plain&quot;</span><span class="o">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">{</span> <span class="c">// text</span>
<span class="c"></span>                        <span class="k">this</span><span class="o">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_TEXT</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">this</span><span class="o">.</span><span class="nx">handleResponse</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">oResponse</span><span class="o">,</span> <span class="nx">oCallback</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">,</span> <span class="nx">tId</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Define Connection Manager failure handler</span>
<span class="c">     *</span>
<span class="c">     * @method _xhrFailure</span>
<span class="c">     * @param oResponse {Object} HTTPXMLRequest object</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_xhrFailure</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oResponse</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="nx">fireEvent</span><span class="o">(</span><span class="s2">&quot;dataErrorEvent&quot;</span><span class="o">,</span> <span class="o">{</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span>
                <span class="nx">callback</span><span class="o">:</span><span class="nx">oCallback</span><span class="o">,</span> <span class="nx">caller</span><span class="o">:</span><span class="nx">oCaller</span><span class="o">,</span>
                <span class="nx">message</span><span class="o">:</span><span class="nx">DS</span><span class="o">.</span><span class="nx">ERROR_DATAINVALID</span><span class="o">});</span>

        <span class="c">// Backward compatibility</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
            <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">.</span><span class="nx">lastIndexOf</span><span class="o">(</span><span class="s2">&quot;?&quot;</span><span class="o">)</span> <span class="o">!==</span> <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
            <span class="o">(</span><span class="nx">oRequest</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s2">&quot;?&quot;</span><span class="o">)</span> <span class="o">!==</span> <span class="m">0</span><span class="o">)){</span>
        <span class="o">}</span>

        <span class="c">// Send failure response back to the caller with the error flag on</span>
<span class="c"></span>        <span class="nx">oResponse</span> <span class="o">=</span> <span class="nx">oResponse</span> <span class="o">||</span> <span class="o">{};</span>
        <span class="nx">oResponse</span><span class="o">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="nx">DS</span><span class="o">.</span><span class="nx">issueCallback</span><span class="o">(</span><span class="nx">oCallback</span><span class="o">,[</span><span class="nx">oRequest</span><span class="o">,</span><span class="nx">oResponse</span><span class="o">],</span><span class="kc">true</span><span class="o">,</span> <span class="nx">oCaller</span><span class="o">);</span>

        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Define Connection Manager callback object</span>
<span class="c">     *</span>
<span class="c">     * @property _xhrCallback</span>
<span class="c">     * @param oResponse {Object} HTTPXMLRequest object</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
     <span class="k">var</span> <span class="nx">_xhrCallback</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nx">success</span><span class="o">:</span><span class="nx">_xhrSuccess</span><span class="o">,</span>
        <span class="nx">failure</span><span class="o">:</span><span class="nx">_xhrFailure</span><span class="o">,</span>
        <span class="nx">scope</span><span class="o">:</span> <span class="k">this</span>
    <span class="o">};</span>

    <span class="c">// Apply Connection Manager timeout</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">connTimeout</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">_xhrCallback</span><span class="o">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">connTimeout</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c">// Cancel stale requests</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">connXhrMode</span> <span class="o">==</span> <span class="s2">&quot;cancelStaleRequests&quot;</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// Look in queue for stale requests</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">abort</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">abort</span><span class="o">(</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span><span class="o">);</span>
                    <span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                <span class="o">}</span>
            <span class="o">}</span>
    <span class="o">}</span>

    <span class="c">// Get ready to send the request URL</span>
<span class="c"></span>    <span class="k">if</span><span class="o">(</span><span class="nx">oConnMgr</span> <span class="o">&amp;&amp;</span> <span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">asyncRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">sLiveData</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">liveData</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">isPost</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="nx">connMethodPost</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">sMethod</span> <span class="o">=</span> <span class="o">(</span><span class="nx">isPost</span><span class="o">)</span> <span class="o">?</span> <span class="s2">&quot;POST&quot;</span> <span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="o">;</span>
        <span class="c">// Validate request</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">sUri</span> <span class="o">=</span> <span class="o">(</span><span class="nx">isPost</span> <span class="o">||</span> <span class="o">!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">oRequest</span><span class="o">))</span> <span class="o">?</span> <span class="nx">sLiveData</span> <span class="o">:</span> <span class="nx">sLiveData</span><span class="o">+</span><span class="nx">oRequest</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">sRequest</span> <span class="o">=</span> <span class="o">(</span><span class="nx">isPost</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oRequest</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>

        <span class="c">// Send the request right away</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">connXhrMode</span> <span class="o">!=</span> <span class="s2">&quot;queueRequests&quot;</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span> <span class="o">=</span> <span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">asyncRequest</span><span class="o">(</span><span class="nx">sMethod</span><span class="o">,</span> <span class="nx">sUri</span><span class="o">,</span> <span class="nx">_xhrCallback</span><span class="o">,</span> <span class="nx">sRequest</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c">// Queue up then send the request</span>
<span class="c"></span>        <span class="k">else</span> <span class="o">{</span>
            <span class="c">// Found a request already in progress</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">allRequests</span> <span class="o">=</span> <span class="nx">oQueue</span><span class="o">.</span><span class="nx">requests</span><span class="o">;</span>
                <span class="c">// Add request to queue</span>
<span class="c"></span>                <span class="nx">allRequests</span><span class="o">.</span><span class="nx">push</span><span class="o">({</span><span class="nx">request</span><span class="o">:</span><span class="nx">oRequest</span><span class="o">,</span> <span class="nx">callback</span><span class="o">:</span><span class="nx">_xhrCallback</span><span class="o">});</span>

                <span class="c">// Interval needs to be started</span>
<span class="c"></span>                <span class="k">if</span><span class="o">(!</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">interval</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">oQueue</span><span class="o">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                        <span class="c">// Connection is in progress</span>
<span class="c"></span>                        <span class="k">if</span><span class="o">(</span><span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">isCallInProgress</span><span class="o">(</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span><span class="o">))</span> <span class="o">{</span>
                            <span class="k">return</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="o">{</span>
                            <span class="c">// Send next request</span>
<span class="c"></span>                            <span class="k">if</span><span class="o">(</span><span class="nx">allRequests</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="c">// Validate request</span>
<span class="c"></span>                                <span class="nx">sUri</span> <span class="o">=</span> <span class="o">(</span><span class="nx">isPost</span> <span class="o">||</span> <span class="o">!</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">allRequests</span><span class="o">[</span><span class="m">0</span><span class="o">].</span><span class="nx">request</span><span class="o">))</span> <span class="o">?</span> <span class="nx">sLiveData</span> <span class="o">:</span> <span class="nx">sLiveData</span><span class="o">+</span><span class="nx">allRequests</span><span class="o">[</span><span class="m">0</span><span class="o">].</span><span class="nx">request</span><span class="o">;</span>
                                <span class="nx">sRequest</span> <span class="o">=</span> <span class="o">(</span><span class="nx">isPost</span><span class="o">)</span> <span class="o">?</span> <span class="nx">allRequests</span><span class="o">[</span><span class="m">0</span><span class="o">].</span><span class="nx">request</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
                                <span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span> <span class="o">=</span> <span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">asyncRequest</span><span class="o">(</span><span class="nx">sMethod</span><span class="o">,</span> <span class="nx">sUri</span><span class="o">,</span> <span class="nx">allRequests</span><span class="o">[</span><span class="m">0</span><span class="o">].</span><span class="nx">callback</span><span class="o">,</span> <span class="nx">sRequest</span><span class="o">);</span>

                                <span class="c">// Remove request from queue</span>
<span class="c"></span>                                <span class="nx">allRequests</span><span class="o">.</span><span class="nx">shift</span><span class="o">();</span>
                            <span class="o">}</span>
                            <span class="c">// No more requests</span>
<span class="c"></span>                            <span class="k">else</span> <span class="o">{</span>
                                <span class="nx">clearInterval</span><span class="o">(</span><span class="nx">oQueue</span><span class="o">.</span><span class="nx">interval</span><span class="o">);</span>
                                <span class="nx">oQueue</span><span class="o">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">},</span> <span class="m">50</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c">// Nothing is in progress</span>
<span class="c"></span>            <span class="k">else</span> <span class="o">{</span>
                <span class="nx">oQueue</span><span class="o">.</span><span class="nx">conn</span> <span class="o">=</span> <span class="nx">oConnMgr</span><span class="o">.</span><span class="nx">asyncRequest</span><span class="o">(</span><span class="nx">sMethod</span><span class="o">,</span> <span class="nx">sUri</span><span class="o">,</span> <span class="nx">_xhrCallback</span><span class="o">,</span> <span class="nx">sRequest</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="c">// Send null response back to the caller with the error flag on</span>
<span class="c"></span>        <span class="nx">DS</span><span class="o">.</span><span class="nx">issueCallback</span><span class="o">(</span><span class="nx">oCallback</span><span class="o">,[</span><span class="nx">oRequest</span><span class="o">,{</span><span class="nx">error</span><span class="o">:</span><span class="kc">true</span><span class="o">}],</span><span class="kc">true</span><span class="o">,</span><span class="nx">oCaller</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="nx">tId</span><span class="o">;</span>
<span class="o">}</span>

<span class="o">});</span>

<span class="c">// Copy static members to XHRDataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>













<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * Factory class for creating a BaseDataSource subclass instance. The sublcass is</span>
<span class="c"> * determined by oLiveData&#39;s type, unless the dataType config is explicitly passed in.  </span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @class YAHOO.util.DataSource</span>
<span class="c"> * @constructor</span>
<span class="c"> * @param oLiveData {HTMLElement}  Pointer to live data.</span>
<span class="c"> * @param oConfigs {object} (optional) Object literal of configuration values.</span>
<span class="c"> */</span>
<span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">)</span> <span class="o">{</span>
    <span class="nx">oConfigs</span> <span class="o">=</span> <span class="nx">oConfigs</span> <span class="o">||</span> <span class="o">{};</span>
    
    <span class="c">// Point to one of the subclasses, first by dataType if given, then by sniffing oLiveData type.</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">dataType</span> <span class="o">=</span> <span class="nx">oConfigs</span><span class="o">.</span><span class="nx">dataType</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="nx">dataType</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="nx">dataType</span> <span class="o">==</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_LOCAL</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>            
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">dataType</span> <span class="o">==</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_XHR</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>            
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">dataType</span> <span class="o">==</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_SCRIPTNODE</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">ScriptNodeDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>            
        <span class="o">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">dataType</span> <span class="o">==</span> <span class="nx">DS</span><span class="o">.</span><span class="nx">TYPE_JSFUNCTION</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>            
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">))</span> <span class="o">{</span> <span class="c">// strings default to xhr</span>
<span class="c"></span>        <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">XHRDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">))</span> <span class="o">{</span>
        <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">FunctionDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span> <span class="c">// ultimate default is local</span>
<span class="c"></span>        <span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nx">util</span><span class="o">.</span><span class="nx">LocalDataSource</span><span class="o">(</span><span class="nx">oLiveData</span><span class="o">,</span> <span class="nx">oConfigs</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="c">// Copy static members to DataSource class</span>
<span class="c"></span><span class="nx">lang</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="nx">DS</span><span class="o">);</span>

<span class="o">})();</span>

<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="c">/**</span>
<span class="c"> * The static Number class provides helper functions to deal with data of type</span>
<span class="c"> * Number.</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @requires yahoo</span>
<span class="c"> * @class Number</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nb">Number</span> <span class="o">=</span> <span class="o">{</span>
 
     <span class="c">/**</span>
<span class="c">     * Takes a native JavaScript Number and formats to string for display to user.</span>
<span class="c">     *</span>
<span class="c">     * @method format</span>
<span class="c">     * @param nData {Number} Number.</span>
<span class="c">     * @param oConfig {Object} (Optional) Optional configuration values:</span>
<span class="c">     *  &lt;dl&gt;</span>
<span class="c">     *   &lt;dt&gt;prefix {String}&lt;/dd&gt;</span>
<span class="c">     *   &lt;dd&gt;String prepended before each number, like a currency designator &quot;$&quot;&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;decimalPlaces {Number}&lt;/dd&gt;</span>
<span class="c">     *   &lt;dd&gt;Number of decimal places to round.&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;decimalSeparator {String}&lt;/dd&gt;</span>
<span class="c">     *   &lt;dd&gt;Decimal separator&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;thousandsSeparator {String}&lt;/dd&gt;</span>
<span class="c">     *   &lt;dd&gt;Thousands separator&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;suffix {String}&lt;/dd&gt;</span>
<span class="c">     *   &lt;dd&gt;String appended after each number, like &quot; items&quot; (note the space)&lt;/dd&gt;</span>
<span class="c">     *  &lt;/dl&gt;</span>
<span class="c">     * @return {String} Formatted number for display.</span>
<span class="c">     */</span>
    <span class="nx">format</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">nData</span><span class="o">,</span> <span class="nx">oConfig</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oConfig</span> <span class="o">=</span> <span class="nx">oConfig</span> <span class="o">||</span> <span class="o">{};</span>
        
        <span class="k">if</span><span class="o">(!</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">nData</span><span class="o">))</span> <span class="o">{</span>
            <span class="nx">nData</span> <span class="o">*=</span> <span class="m">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">nData</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">bNegative</span> <span class="o">=</span> <span class="o">(</span><span class="nx">nData</span> <span class="o">&lt;</span> <span class="m">0</span><span class="o">);</span>
            <span class="k">var</span> <span class="nx">sOutput</span> <span class="o">=</span> <span class="nx">nData</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
            <span class="k">var</span> <span class="nx">sDecimalSeparator</span> <span class="o">=</span> <span class="o">(</span><span class="nx">oConfig</span><span class="o">.</span><span class="nx">decimalSeparator</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">decimalSeparator</span> <span class="o">:</span> <span class="s2">&quot;.&quot;</span><span class="o">;</span>
            <span class="k">var</span> <span class="nx">nDotIndex</span><span class="o">;</span>

            <span class="c">// Manage decimals</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">oConfig</span><span class="o">.</span><span class="nx">decimalPlaces</span><span class="o">))</span> <span class="o">{</span>
                <span class="c">// Round to the correct decimal place</span>
<span class="c"></span>                <span class="k">var</span> <span class="nx">nDecimalPlaces</span> <span class="o">=</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">decimalPlaces</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">nDecimal</span> <span class="o">=</span> <span class="nb">Math</span><span class="o">.</span><span class="nx">pow</span><span class="o">(</span><span class="m">10</span><span class="o">,</span> <span class="nx">nDecimalPlaces</span><span class="o">);</span>
                <span class="nx">sOutput</span> <span class="o">=</span> <span class="nb">Math</span><span class="o">.</span><span class="nx">round</span><span class="o">(</span><span class="nx">nData</span><span class="o">*</span><span class="nx">nDecimal</span><span class="o">)/</span><span class="nx">nDecimal</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
                <span class="nx">nDotIndex</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">lastIndexOf</span><span class="o">(</span><span class="s2">&quot;.&quot;</span><span class="o">);</span>

                <span class="k">if</span><span class="o">(</span><span class="nx">nDecimalPlaces</span> <span class="o">&gt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// Add the decimal separator</span>
<span class="c"></span>                    <span class="k">if</span><span class="o">(</span><span class="nx">nDotIndex</span> <span class="o">&lt;</span> <span class="m">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">sOutput</span> <span class="o">+=</span> <span class="nx">sDecimalSeparator</span><span class="o">;</span>
                        <span class="nx">nDotIndex</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">length</span><span class="o">-</span><span class="m">1</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="c">// Replace the &quot;.&quot;</span>
<span class="c"></span>                    <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">sDecimalSeparator</span> <span class="o">!==</span> <span class="s2">&quot;.&quot;</span><span class="o">){</span>
                        <span class="nx">sOutput</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="s2">&quot;.&quot;</span><span class="o">,</span><span class="nx">sDecimalSeparator</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="c">// Add missing zeros</span>
<span class="c"></span>                    <span class="k">while</span><span class="o">((</span><span class="nx">sOutput</span><span class="o">.</span><span class="nx">length</span> <span class="o">-</span> <span class="m">1</span> <span class="o">-</span> <span class="nx">nDotIndex</span><span class="o">)</span> <span class="o">&lt;</span> <span class="nx">nDecimalPlaces</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">sOutput</span> <span class="o">+=</span> <span class="s2">&quot;0&quot;</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
            <span class="c">// Add the thousands separator</span>
<span class="c"></span>            <span class="k">if</span><span class="o">(</span><span class="nx">oConfig</span><span class="o">.</span><span class="nx">thousandsSeparator</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">sThousandsSeparator</span> <span class="o">=</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">thousandsSeparator</span><span class="o">;</span>
                <span class="nx">nDotIndex</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">lastIndexOf</span><span class="o">(</span><span class="nx">sDecimalSeparator</span><span class="o">);</span>
                <span class="nx">nDotIndex</span> <span class="o">=</span> <span class="o">(</span><span class="nx">nDotIndex</span> <span class="o">&gt;</span> <span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">?</span> <span class="nx">nDotIndex</span> <span class="o">:</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">sNewOutput</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">substring</span><span class="o">(</span><span class="nx">nDotIndex</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">nCount</span> <span class="o">=</span> <span class="o">-</span><span class="m">1</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">nDotIndex</span><span class="o">;</span> <span class="nx">i</span><span class="o">&gt;</span><span class="m">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="nx">nCount</span><span class="o">++;</span>
                    <span class="k">if</span> <span class="o">((</span><span class="nx">nCount</span><span class="o">%</span><span class="m">3</span> <span class="o">===</span> <span class="m">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">i</span> <span class="o">!==</span> <span class="nx">nDotIndex</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="nx">bNegative</span> <span class="o">||</span> <span class="o">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="m">1</span><span class="o">)))</span> <span class="o">{</span>
                        <span class="nx">sNewOutput</span> <span class="o">=</span> <span class="nx">sThousandsSeparator</span> <span class="o">+</span> <span class="nx">sNewOutput</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="nx">sNewOutput</span> <span class="o">=</span> <span class="nx">sOutput</span><span class="o">.</span><span class="nx">charAt</span><span class="o">(</span><span class="nx">i</span><span class="o">-</span><span class="m">1</span><span class="o">)</span> <span class="o">+</span> <span class="nx">sNewOutput</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="nx">sOutput</span> <span class="o">=</span> <span class="nx">sNewOutput</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c">// Prepend prefix</span>
<span class="c"></span>            <span class="nx">sOutput</span> <span class="o">=</span> <span class="o">(</span><span class="nx">oConfig</span><span class="o">.</span><span class="nx">prefix</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">prefix</span> <span class="o">+</span> <span class="nx">sOutput</span> <span class="o">:</span> <span class="nx">sOutput</span><span class="o">;</span>

            <span class="c">// Append suffix</span>
<span class="c"></span>            <span class="nx">sOutput</span> <span class="o">=</span> <span class="o">(</span><span class="nx">oConfig</span><span class="o">.</span><span class="nx">suffix</span><span class="o">)</span> <span class="o">?</span> <span class="nx">sOutput</span> <span class="o">+</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">suffix</span> <span class="o">:</span> <span class="nx">sOutput</span><span class="o">;</span>

            <span class="k">return</span> <span class="nx">sOutput</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// Still not a Number, just return unaltered</span>
<span class="c"></span>        <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">nData</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
 <span class="o">};</span>



<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>
<span class="c">/****************************************************************************/</span>

<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>

<span class="k">var</span> <span class="nx">xPad</span><span class="o">=</span><span class="k">function</span> <span class="o">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">pad</span><span class="o">,</span> <span class="nx">r</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">if</span><span class="o">(</span><span class="k">typeof</span> <span class="nx">r</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="nx">r</span><span class="o">=</span><span class="m">10</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span> <span class="o">;</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">x</span><span class="o">,</span> <span class="m">10</span><span class="o">)&lt;</span><span class="nx">r</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span><span class="o">&gt;</span><span class="m">1</span><span class="o">;</span> <span class="nx">r</span><span class="o">/=</span><span class="m">10</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">x</span> <span class="o">=</span> <span class="nx">pad</span><span class="o">.</span><span class="nx">toString</span><span class="o">()</span> <span class="o">+</span> <span class="nx">x</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nx">x</span><span class="o">.</span><span class="nx">toString</span><span class="o">();</span>
<span class="o">};</span>


<span class="c">/**</span>
<span class="c"> * The static Date class provides helper functions to deal with data of type Date.</span>
<span class="c"> *</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @requires yahoo</span>
<span class="c"> * @class Date</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
 <span class="k">var</span> <span class="nx">Dt</span> <span class="o">=</span> <span class="o">{</span>
    <span class="nx">formats</span><span class="o">:</span> <span class="o">{</span>
        <span class="nx">a</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">a</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getDay</span><span class="o">()];</span> <span class="o">},</span>
        <span class="nx">A</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">A</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getDay</span><span class="o">()];</span> <span class="o">},</span>
        <span class="nx">b</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">b</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getMonth</span><span class="o">()];</span> <span class="o">},</span>
        <span class="nx">B</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">B</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getMonth</span><span class="o">()];</span> <span class="o">},</span>
        <span class="nx">C</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nb">parseInt</span><span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()/</span><span class="m">100</span><span class="o">,</span> <span class="m">10</span><span class="o">),</span> <span class="m">0</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">d</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getDate&#39;</span><span class="o">,</span> <span class="s1">&#39;0&#39;</span><span class="o">],</span>
        <span class="nx">e</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getDate&#39;</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">],</span>
        <span class="nx">g</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">G</span><span class="o">(</span><span class="nx">d</span><span class="o">)%</span><span class="m">100</span><span class="o">,</span> <span class="m">10</span><span class="o">),</span> <span class="m">0</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">G</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">();</span>
                <span class="k">var</span> <span class="nx">V</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">V</span><span class="o">(</span><span class="nx">d</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">W</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">W</span><span class="o">(</span><span class="nx">d</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
    
                <span class="k">if</span><span class="o">(</span><span class="nx">W</span> <span class="o">&gt;</span> <span class="nx">V</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">y</span><span class="o">++;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">W</span><span class="o">===</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nx">V</span><span class="o">&gt;=</span><span class="m">52</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">y</span><span class="o">--;</span>
                <span class="o">}</span>
    
                <span class="k">return</span> <span class="nx">y</span><span class="o">;</span>
            <span class="o">},</span>
        <span class="nx">H</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getHours&#39;</span><span class="o">,</span> <span class="s1">&#39;0&#39;</span><span class="o">],</span>
        <span class="nx">I</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">var</span> <span class="nx">I</span><span class="o">=</span><span class="nx">d</span><span class="o">.</span><span class="nx">getHours</span><span class="o">()%</span><span class="m">12</span><span class="o">;</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">I</span><span class="o">===</span><span class="m">0</span><span class="o">?</span><span class="m">12</span><span class="o">:</span><span class="nx">I</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">j</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">gmd_1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;/1/1 GMT&#39;</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">gmdate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getMonth</span><span class="o">()+</span><span class="m">1</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getDate</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39; GMT&#39;</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">ms</span> <span class="o">=</span> <span class="nx">gmdate</span> <span class="o">-</span> <span class="nx">gmd_1</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">doy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">ms</span><span class="sr">/60000/</span><span class="m">60</span><span class="o">/</span><span class="m">24</span><span class="o">,</span> <span class="m">10</span><span class="o">)+</span><span class="m">1</span><span class="o">;</span>
                <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">doy</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">100</span><span class="o">);</span>
            <span class="o">},</span>
        <span class="nx">k</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getHours&#39;</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">],</span>
        <span class="nx">l</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">var</span> <span class="nx">I</span><span class="o">=</span><span class="nx">d</span><span class="o">.</span><span class="nx">getHours</span><span class="o">()%</span><span class="m">12</span><span class="o">;</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">I</span><span class="o">===</span><span class="m">0</span><span class="o">?</span><span class="m">12</span><span class="o">:</span><span class="nx">I</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">m</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getMonth</span><span class="o">()+</span><span class="m">1</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">M</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getMinutes&#39;</span><span class="o">,</span> <span class="s1">&#39;0&#39;</span><span class="o">],</span>
        <span class="nx">p</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">p</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getHours</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="m">12</span> <span class="o">?</span> <span class="m">1</span> <span class="o">:</span> <span class="m">0</span> <span class="o">];</span> <span class="o">},</span>
        <span class="nx">P</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">l</span><span class="o">.</span><span class="nx">P</span><span class="o">[</span><span class="nx">d</span><span class="o">.</span><span class="nx">getHours</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="m">12</span> <span class="o">?</span> <span class="m">1</span> <span class="o">:</span> <span class="m">0</span> <span class="o">];</span> <span class="o">},</span>
        <span class="nx">s</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">,</span> <span class="nx">l</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getTime</span><span class="o">()/</span><span class="m">1000</span><span class="o">,</span> <span class="m">10</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">S</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;getSeconds&#39;</span><span class="o">,</span> <span class="s1">&#39;0&#39;</span><span class="o">],</span>
        <span class="nx">u</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">var</span> <span class="nx">dow</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getDay</span><span class="o">();</span> <span class="k">return</span> <span class="nx">dow</span><span class="o">===</span><span class="m">0</span><span class="o">?</span><span class="m">7</span><span class="o">:</span><span class="nx">dow</span><span class="o">;</span> <span class="o">},</span>
        <span class="nx">U</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">doy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">j</span><span class="o">(</span><span class="nx">d</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">rdow</span> <span class="o">=</span> <span class="m">6</span><span class="o">-</span><span class="nx">d</span><span class="o">.</span><span class="nx">getDay</span><span class="o">();</span>
                <span class="k">var</span> <span class="nx">woy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">((</span><span class="nx">doy</span><span class="o">+</span><span class="nx">rdow</span><span class="o">)/</span><span class="m">7</span><span class="o">,</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">woy</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span>
            <span class="o">},</span>
        <span class="nx">V</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">woy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">W</span><span class="o">(</span><span class="nx">d</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">dow1_1</span> <span class="o">=</span> <span class="o">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;/1/1&#39;</span><span class="o">)).</span><span class="nx">getDay</span><span class="o">();</span>
                <span class="c">// First week is 01 and not 00 as in the case of %U and %W,</span>
<span class="c"></span>                <span class="c">// so we add 1 to the final result except if day 1 of the year</span>
<span class="c"></span>                <span class="c">// is a Monday (then %W returns 01).</span>
<span class="c"></span>                <span class="c">// We also need to subtract 1 if the day 1 of the year is </span>
<span class="c"></span>                <span class="c">// Friday-Sunday, so the resulting equation becomes:</span>
<span class="c"></span>                <span class="k">var</span> <span class="nx">idow</span> <span class="o">=</span> <span class="nx">woy</span> <span class="o">+</span> <span class="o">(</span><span class="nx">dow1_1</span> <span class="o">&gt;</span> <span class="m">4</span> <span class="o">||</span> <span class="nx">dow1_1</span> <span class="o">&lt;=</span> <span class="m">1</span> <span class="o">?</span> <span class="m">0</span> <span class="o">:</span> <span class="m">1</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="nx">idow</span> <span class="o">===</span> <span class="m">53</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;/12/31&#39;</span><span class="o">)).</span><span class="nx">getDay</span><span class="o">()</span> <span class="o">&lt;</span> <span class="m">4</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="nx">idow</span> <span class="o">=</span> <span class="m">1</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">idow</span> <span class="o">===</span> <span class="m">0</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="nx">idow</span> <span class="o">=</span> <span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">V</span><span class="o">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()-</span><span class="m">1</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39;/12/31&#39;</span><span class="o">));</span>
                <span class="o">}</span>
    
                <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">idow</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span>
            <span class="o">},</span>
        <span class="nx">w</span><span class="o">:</span> <span class="s1">&#39;getDay&#39;</span><span class="o">,</span>
        <span class="nx">W</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">doy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">j</span><span class="o">(</span><span class="nx">d</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">rdow</span> <span class="o">=</span> <span class="m">7</span><span class="o">-</span><span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">u</span><span class="o">(</span><span class="nx">d</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">woy</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="o">((</span><span class="nx">doy</span><span class="o">+</span><span class="nx">rdow</span><span class="o">)/</span><span class="m">7</span><span class="o">,</span> <span class="m">10</span><span class="o">);</span>
                <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">woy</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">10</span><span class="o">);</span>
            <span class="o">},</span>
        <span class="nx">y</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">d</span><span class="o">.</span><span class="nx">getFullYear</span><span class="o">()%</span><span class="m">100</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span> <span class="o">},</span>
        <span class="nx">Y</span><span class="o">:</span> <span class="s1">&#39;getFullYear&#39;</span><span class="o">,</span>
        <span class="nx">z</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">getTimezoneOffset</span><span class="o">();</span>
                <span class="k">var</span> <span class="nx">H</span> <span class="o">=</span> <span class="nx">xPad</span><span class="o">(</span><span class="nb">parseInt</span><span class="o">(</span><span class="nb">Math</span><span class="o">.</span><span class="nx">abs</span><span class="o">(</span><span class="nx">o</span><span class="o">/</span><span class="m">60</span><span class="o">),</span> <span class="m">10</span><span class="o">),</span> <span class="m">0</span><span class="o">);</span>
                <span class="k">var</span> <span class="nx">M</span> <span class="o">=</span> <span class="nx">xPad</span><span class="o">(</span><span class="nb">Math</span><span class="o">.</span><span class="nx">abs</span><span class="o">(</span><span class="nx">o</span><span class="o">%</span><span class="m">60</span><span class="o">),</span> <span class="m">0</span><span class="o">);</span>
                <span class="k">return</span> <span class="o">(</span><span class="nx">o</span><span class="o">&gt;</span><span class="m">0</span><span class="o">?</span><span class="s1">&#39;-&#39;</span><span class="o">:</span><span class="s1">&#39;+&#39;</span><span class="o">)</span> <span class="o">+</span> <span class="nx">H</span> <span class="o">+</span> <span class="nx">M</span><span class="o">;</span>
            <span class="o">},</span>
        <span class="nx">Z</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">var</span> <span class="nx">tz</span> <span class="o">=</span> <span class="nx">d</span><span class="o">.</span><span class="nx">toString</span><span class="o">().</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/^.*:\d\d( GMT[+-]\d+)? \(?([A-Za-z ]+)\)?\d*$/</span><span class="o">,</span> <span class="s1">&#39;$2&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/[a-z ]/g</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span><span class="nx">tz</span><span class="o">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="m">4</span><span class="o">)</span> <span class="o">{</span>
			<span class="nx">tz</span> <span class="o">=</span> <span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">.</span><span class="nx">z</span><span class="o">(</span><span class="nx">d</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="nx">tz</span><span class="o">;</span>
	<span class="o">},</span>
        <span class="s1">&#39;%&#39;</span><span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">d</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="s1">&#39;%&#39;</span><span class="o">;</span> <span class="o">}</span>
    <span class="o">},</span>

    <span class="nx">aggregates</span><span class="o">:</span> <span class="o">{</span>
        <span class="nx">c</span><span class="o">:</span> <span class="s1">&#39;locale&#39;</span><span class="o">,</span>
        <span class="nx">D</span><span class="o">:</span> <span class="s1">&#39;%m/%d/%y&#39;</span><span class="o">,</span>
        <span class="nx">F</span><span class="o">:</span> <span class="s1">&#39;%Y-%m-%d&#39;</span><span class="o">,</span>
        <span class="nx">h</span><span class="o">:</span> <span class="s1">&#39;%b&#39;</span><span class="o">,</span>
        <span class="nx">n</span><span class="o">:</span> <span class="s1">&#39;\n&#39;</span><span class="o">,</span>
        <span class="nx">r</span><span class="o">:</span> <span class="s1">&#39;locale&#39;</span><span class="o">,</span>
        <span class="nx">R</span><span class="o">:</span> <span class="s1">&#39;%H:%M&#39;</span><span class="o">,</span>
        <span class="nx">t</span><span class="o">:</span> <span class="s1">&#39;\t&#39;</span><span class="o">,</span>
        <span class="nx">T</span><span class="o">:</span> <span class="s1">&#39;%H:%M:%S&#39;</span><span class="o">,</span>
        <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;locale&#39;</span><span class="o">,</span>
        <span class="nx">X</span><span class="o">:</span> <span class="s1">&#39;locale&#39;</span>
        <span class="c">//&#39;+&#39;: &#39;%a %b %e %T %Z %Y&#39;</span>
<span class="c"></span>    <span class="o">},</span>

     <span class="c">/**</span>
<span class="c">     * Takes a native JavaScript Date and formats to string for display to user.</span>
<span class="c">     *</span>
<span class="c">     * @method format</span>
<span class="c">     * @param oDate {Date} Date.</span>
<span class="c">     * @param oConfig {Object} (Optional) Optional configuration values:</span>
<span class="c">     *  &lt;dl&gt;</span>
<span class="c">     *   &lt;dt&gt;format {String}&lt;/dt&gt;</span>
<span class="c">     *   &lt;dd&gt;Any format defined by strftime is supported&lt;/dd&gt;</span>
<span class="c">     *  &lt;/dl&gt;</span>
<span class="c">     *  strftime has several format specifiers defined by the Open group at </span>
<span class="c">     *  http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</span>
<span class="c">     *</span>
<span class="c">     *  PHP added a few of its own, defined at http://www.php.net/strftime</span>
<span class="c">     *</span>
<span class="c">     *  This javascript implementation supports all the PHP specifiers and a few more.</span>
<span class="c">     *</span>
<span class="c">     *  @arg \%a - abbreviated weekday name according to the current locale</span>
<span class="c">     *  @arg \%A - full weekday name according to the current locale</span>
<span class="c">     *  @arg \%b - abbreviated month name according to the current locale</span>
<span class="c">     *  @arg \%B - full month name according to the current locale</span>
<span class="c">     *  @arg \%c - preferred date and time representation for the current locale</span>
<span class="c">     *  @arg \%C - century number (the year divided by 100 and truncated to an integer, range 00 to 99)</span>
<span class="c">     *  @arg \%d - day of the month as a decimal number (range 01 to 31)</span>
<span class="c">     *  @arg \%D - same as %m/%d/%y</span>
<span class="c">     *  @arg \%e - day of the month as a decimal number, a single digit is preceded by a space (range &#39; 1&#39; to &#39;31&#39;)</span>
<span class="c">     *  @arg \%F - same as %Y-%m-%d (ISO 8601 date format)</span>
<span class="c">     *  @arg \%g - like %G, but without the century</span>
<span class="c">     *  @arg \%G - The 4-digit year corresponding to the ISO week number</span>
<span class="c">     *  @arg \%h - same as %b</span>
<span class="c">     *  @arg \%H - hour as a decimal number using a 24-hour clock (range 00 to 23)</span>
<span class="c">     *  @arg \%I - hour as a decimal number using a 12-hour clock (range 01 to 12)</span>
<span class="c">     *  @arg \%j - day of the year as a decimal number (range 001 to 366)</span>
<span class="c">     *  @arg \%k - hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</span>
<span class="c">     *  @arg \%l - hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </span>
<span class="c">     *  @arg \%m - month as a decimal number (range 01 to 12)</span>
<span class="c">     *  @arg \%M - minute as a decimal number</span>
<span class="c">     *  @arg \%n - newline character</span>
<span class="c">     *  @arg \%p - either `AM&#39; or `PM&#39; according to the given time value, or the corresponding strings for the current locale</span>
<span class="c">     *  @arg \%P - like %p, but lower case</span>
<span class="c">     *  @arg \%r - time in a.m. and p.m. notation equal to %I:%M:%S %p</span>
<span class="c">     *  @arg \%R - time in 24 hour notation equal to %H:%M</span>
<span class="c">     *  @arg \%s - number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</span>
<span class="c">     *  @arg \%S - second as a decimal number</span>
<span class="c">     *  @arg \%t - tab character</span>
<span class="c">     *  @arg \%T - current time, equal to %H:%M:%S</span>
<span class="c">     *  @arg \%u - weekday as a decimal number [1,7], with 1 representing Monday</span>
<span class="c">     *  @arg \%U - week number of the current year as a decimal number, starting with</span>
<span class="c">     *             the first Sunday as the first day of the first week</span>
<span class="c">     *  @arg \%V - The ISO 8601:1988 week number of the current year as a decimal number,</span>
<span class="c">     *             range 01 to 53, where week 1 is the first week that has at least 4 days</span>
<span class="c">     *             in the current year, and with Monday as the first day of the week.</span>
<span class="c">     *  @arg \%w - day of the week as a decimal, Sunday being 0</span>
<span class="c">     *  @arg \%W - week number of the current year as a decimal number, starting with the</span>
<span class="c">     *             first Monday as the first day of the first week</span>
<span class="c">     *  @arg \%x - preferred date representation for the current locale without the time</span>
<span class="c">     *  @arg \%X - preferred time representation for the current locale without the date</span>
<span class="c">     *  @arg \%y - year as a decimal number without a century (range 00 to 99)</span>
<span class="c">     *  @arg \%Y - year as a decimal number including the century</span>
<span class="c">     *  @arg \%z - numerical time zone representation</span>
<span class="c">     *  @arg \%Z - time zone name or abbreviation</span>
<span class="c">     *  @arg \%% - a literal `\%&#39; character</span>
<span class="c">     * @param sLocale {String} (Optional) The locale to use when displaying days of week,</span>
<span class="c">     *  months of the year, and other locale specific strings.  The following locales are</span>
<span class="c">     *  built in:</span>
<span class="c">     *  &lt;dl&gt;</span>
<span class="c">     *   &lt;dt&gt;en&lt;/dt&gt;</span>
<span class="c">     *   &lt;dd&gt;English&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;en-US&lt;/dt&gt;</span>
<span class="c">     *   &lt;dd&gt;US English&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;en-GB&lt;/dt&gt;</span>
<span class="c">     *   &lt;dd&gt;British English&lt;/dd&gt;</span>
<span class="c">     *   &lt;dt&gt;en-AU&lt;/dt&gt;</span>
<span class="c">     *   &lt;dd&gt;Australian English (identical to British English)&lt;/dd&gt;</span>
<span class="c">     *  &lt;/dl&gt;</span>
<span class="c">     *  More locales may be added by subclassing of YAHOO.util.DateLocale.</span>
<span class="c">     *  See YAHOO.util.DateLocale for more information.</span>
<span class="c">     * @return {String} Formatted date for display.</span>
<span class="c">     * @sa YAHOO.util.DateLocale</span>
<span class="c">     */</span>
    <span class="nx">format</span> <span class="o">:</span> <span class="k">function</span> <span class="o">(</span><span class="nx">oDate</span><span class="o">,</span> <span class="nx">oConfig</span><span class="o">,</span> <span class="nx">sLocale</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">oConfig</span> <span class="o">=</span> <span class="nx">oConfig</span> <span class="o">||</span> <span class="o">{};</span>
        
        <span class="k">if</span><span class="o">(!(</span><span class="nx">oDate</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isValue</span><span class="o">(</span><span class="nx">oDate</span><span class="o">)</span> <span class="o">?</span> <span class="nx">oDate</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">var</span> <span class="nx">format</span> <span class="o">=</span> <span class="nx">oConfig</span><span class="o">.</span><span class="nx">format</span> <span class="o">||</span> <span class="s2">&quot;%m/%d/%Y&quot;</span><span class="o">;</span>

        <span class="c">// Be backwards compatible, support strings that are</span>
<span class="c"></span>        <span class="c">// exactly equal to YYYY/MM/DD, DD/MM/YYYY and MM/DD/YYYY</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(</span><span class="nx">format</span> <span class="o">===</span> <span class="s1">&#39;YYYY/MM/DD&#39;</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">format</span> <span class="o">=</span> <span class="s1">&#39;%Y/%m/%d&#39;</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">format</span> <span class="o">===</span> <span class="s1">&#39;DD/MM/YYYY&#39;</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">format</span> <span class="o">=</span> <span class="s1">&#39;%d/%m/%Y&#39;</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="nx">format</span> <span class="o">===</span> <span class="s1">&#39;MM/DD/YYYY&#39;</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">format</span> <span class="o">=</span> <span class="s1">&#39;%m/%d/%Y&#39;</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c">// end backwards compatibility block</span>
<span class="c"></span> 
        <span class="nx">sLocale</span> <span class="o">=</span> <span class="nx">sLocale</span> <span class="o">||</span> <span class="s2">&quot;en&quot;</span><span class="o">;</span>

        <span class="c">// Make sure we have a definition for the requested locale, or default to en.</span>
<span class="c"></span>        <span class="k">if</span><span class="o">(!(</span><span class="nx">sLocale</span> <span class="k">in</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="nx">sLocale</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/-[a-zA-Z]+$/</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">)</span> <span class="k">in</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">sLocale</span> <span class="o">=</span> <span class="nx">sLocale</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/-[a-zA-Z]+$/</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="nx">sLocale</span> <span class="o">=</span> <span class="s2">&quot;en&quot;</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">var</span> <span class="nx">aLocale</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="nx">sLocale</span><span class="o">];</span>

        <span class="k">var</span> <span class="nx">replace_aggs</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">m0</span><span class="o">,</span> <span class="nx">m1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">Dt</span><span class="o">.</span><span class="nx">aggregates</span><span class="o">[</span><span class="nx">m1</span><span class="o">];</span>
            <span class="k">return</span> <span class="o">(</span><span class="nx">f</span> <span class="o">===</span> <span class="s1">&#39;locale&#39;</span> <span class="o">?</span> <span class="nx">aLocale</span><span class="o">[</span><span class="nx">m1</span><span class="o">]</span> <span class="o">:</span> <span class="nx">f</span><span class="o">);</span>
        <span class="o">};</span>

        <span class="k">var</span> <span class="nx">replace_formats</span> <span class="o">=</span> <span class="k">function</span> <span class="o">(</span><span class="nx">m0</span><span class="o">,</span> <span class="nx">m1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">Dt</span><span class="o">.</span><span class="nx">formats</span><span class="o">[</span><span class="nx">m1</span><span class="o">];</span>
            <span class="k">if</span><span class="o">(</span><span class="k">typeof</span> <span class="nx">f</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>             <span class="c">// string =&gt; built in date function</span>
<span class="c"></span>                <span class="k">return</span> <span class="nx">oDate</span><span class="o">[</span><span class="nx">f</span><span class="o">]();</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="k">typeof</span> <span class="nx">f</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="o">)</span> <span class="o">{</span>    <span class="c">// function =&gt; our own function</span>
<span class="c"></span>                <span class="k">return</span> <span class="nx">f</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">oDate</span><span class="o">,</span> <span class="nx">oDate</span><span class="o">,</span> <span class="nx">aLocale</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="k">typeof</span> <span class="nx">f</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">f</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="o">)</span> <span class="o">{</span>  <span class="c">// built in function with padding</span>
<span class="c"></span>                <span class="k">return</span> <span class="nx">xPad</span><span class="o">(</span><span class="nx">oDate</span><span class="o">[</span><span class="nx">f</span><span class="o">[</span><span class="m">0</span><span class="o">]](),</span> <span class="nx">f</span><span class="o">[</span><span class="m">1</span><span class="o">]);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nx">m1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>

        <span class="c">// First replace aggregates (run in a loop because an agg may be made up of other aggs)</span>
<span class="c"></span>        <span class="k">while</span><span class="o">(</span><span class="nx">format</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="sr">/%[cDFhnrRtTxX]/</span><span class="o">))</span> <span class="o">{</span>
            <span class="nx">format</span> <span class="o">=</span> <span class="nx">format</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/%([cDFhnrRtTxX])/g</span><span class="o">,</span> <span class="nx">replace_aggs</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c">// Now replace formats (do not run in a loop otherwise %%a will be replace with the value of %a)</span>
<span class="c"></span>        <span class="k">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">format</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/%([aAbBCdegGHIjklmMpPsSuUVwWyYzZ%])/g</span><span class="o">,</span> <span class="nx">replace_formats</span><span class="o">);</span>

        <span class="nx">replace_aggs</span> <span class="o">=</span> <span class="nx">replace_formats</span> <span class="o">=</span> <span class="kc">undefined</span><span class="o">;</span>

        <span class="k">return</span> <span class="nx">str</span><span class="o">;</span>
    <span class="o">}</span>
 <span class="o">};</span>
 
 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">namespace</span><span class="o">(</span><span class="s2">&quot;YAHOO.util&quot;</span><span class="o">);</span>
 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nb">Date</span> <span class="o">=</span> <span class="nx">Dt</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * The DateLocale class is a container and base class for all</span>
<span class="c"> * localised date strings used by YAHOO.util.Date. It is used</span>
<span class="c"> * internally, but may be extended to provide new date localisations.</span>
<span class="c"> *</span>
<span class="c"> * To create your own DateLocale, follow these steps:</span>
<span class="c"> * &lt;ol&gt;</span>
<span class="c"> *  &lt;li&gt;Find an existing locale that matches closely with your needs&lt;/li&gt;</span>
<span class="c"> *  &lt;li&gt;Use this as your base class.  Use YAHOO.util.DateLocale if nothing</span>
<span class="c"> *   matches.&lt;/li&gt;</span>
<span class="c"> *  &lt;li&gt;Create your own class as an extension of the base class using</span>
<span class="c"> *   YAHOO.lang.merge, and add your own localisations where needed.&lt;/li&gt;</span>
<span class="c"> * &lt;/ol&gt;</span>
<span class="c"> * See the YAHOO.util.DateLocale[&#39;en-US&#39;] and YAHOO.util.DateLocale[&#39;en-GB&#39;]</span>
<span class="c"> * classes which extend YAHOO.util.DateLocale[&#39;en&#39;].</span>
<span class="c"> *</span>
<span class="c"> * For example, to implement locales for French french and Canadian french,</span>
<span class="c"> * we would do the following:</span>
<span class="c"> * &lt;ol&gt;</span>
<span class="c"> *  &lt;li&gt;For French french, we have no existing similar locale, so use</span>
<span class="c"> *   YAHOO.util.DateLocale as the base, and extend it:</span>
<span class="c"> *   &lt;pre&gt;</span>
<span class="c"> *      YAHOO.util.DateLocale[&#39;fr&#39;] = YAHOO.lang.merge(YAHOO.util.DateLocale, {</span>
<span class="c"> *          a: [&#39;dim&#39;, &#39;lun&#39;, &#39;mar&#39;, &#39;mer&#39;, &#39;jeu&#39;, &#39;ven&#39;, &#39;sam&#39;],</span>
<span class="c"> *          A: [&#39;dimanche&#39;, &#39;lundi&#39;, &#39;mardi&#39;, &#39;mercredi&#39;, &#39;jeudi&#39;, &#39;vendredi&#39;, &#39;samedi&#39;],</span>
<span class="c"> *          b: [&#39;jan&#39;, &#39;f&amp;eacute;v&#39;, &#39;mar&#39;, &#39;avr&#39;, &#39;mai&#39;, &#39;jun&#39;, &#39;jui&#39;, &#39;ao&amp;ucirc;&#39;, &#39;sep&#39;, &#39;oct&#39;, &#39;nov&#39;, &#39;d&amp;eacute;c&#39;],</span>
<span class="c"> *          B: [&#39;janvier&#39;, &#39;f&amp;eacute;vrier&#39;, &#39;mars&#39;, &#39;avril&#39;, &#39;mai&#39;, &#39;juin&#39;, &#39;juillet&#39;, &#39;ao&amp;ucirc;t&#39;, &#39;septembre&#39;, &#39;octobre&#39;, &#39;novembre&#39;, &#39;d&amp;eacute;cembre&#39;],</span>
<span class="c"> *          c: &#39;%a %d %b %Y %T %Z&#39;,</span>
<span class="c"> *          p: [&#39;&#39;, &#39;&#39;],</span>
<span class="c"> *          P: [&#39;&#39;, &#39;&#39;],</span>
<span class="c"> *          x: &#39;%d.%m.%Y&#39;,</span>
<span class="c"> *          X: &#39;%T&#39;</span>
<span class="c"> *      });</span>
<span class="c"> *   &lt;/pre&gt;</span>
<span class="c"> *  &lt;/li&gt;</span>
<span class="c"> *  &lt;li&gt;For Canadian french, we start with French french and change the meaning of \%x:</span>
<span class="c"> *   &lt;pre&gt;</span>
<span class="c"> *      YAHOO.util.DateLocale[&#39;fr-CA&#39;] = YAHOO.lang.merge(YAHOO.util.DateLocale[&#39;fr&#39;], {</span>
<span class="c"> *          x: &#39;%Y-%m-%d&#39;</span>
<span class="c"> *      });</span>
<span class="c"> *   &lt;/pre&gt;</span>
<span class="c"> *  &lt;/li&gt;</span>
<span class="c"> * &lt;/ol&gt;</span>
<span class="c"> *</span>
<span class="c"> * With that, you can use your new locales:</span>
<span class="c"> * &lt;pre&gt;</span>
<span class="c"> *    var d = new Date(&quot;2008/04/22&quot;);</span>
<span class="c"> *    YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr&quot;);</span>
<span class="c"> * &lt;/pre&gt;</span>
<span class="c"> * will return:</span>
<span class="c"> * &lt;pre&gt;</span>
<span class="c"> *    mardi, 22 avril == 22.04.2008</span>
<span class="c"> * &lt;/pre&gt;</span>
<span class="c"> * And</span>
<span class="c"> * &lt;pre&gt;</span>
<span class="c"> *    YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr-CA&quot;);</span>
<span class="c"> * &lt;/pre&gt;</span>
<span class="c"> * Will return:</span>
<span class="c"> * &lt;pre&gt;</span>
<span class="c"> *   mardi, 22 avril == 2008-04-22</span>
<span class="c"> * &lt;/pre&gt;</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @requires yahoo</span>
<span class="c"> * @class DateLocale</span>
<span class="c"> */</span>
 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nx">a</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;Sun&#39;</span><span class="o">,</span> <span class="s1">&#39;Mon&#39;</span><span class="o">,</span> <span class="s1">&#39;Tue&#39;</span><span class="o">,</span> <span class="s1">&#39;Wed&#39;</span><span class="o">,</span> <span class="s1">&#39;Thu&#39;</span><span class="o">,</span> <span class="s1">&#39;Fri&#39;</span><span class="o">,</span> <span class="s1">&#39;Sat&#39;</span><span class="o">],</span>
        <span class="nx">A</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;Sunday&#39;</span><span class="o">,</span> <span class="s1">&#39;Monday&#39;</span><span class="o">,</span> <span class="s1">&#39;Tuesday&#39;</span><span class="o">,</span> <span class="s1">&#39;Wednesday&#39;</span><span class="o">,</span> <span class="s1">&#39;Thursday&#39;</span><span class="o">,</span> <span class="s1">&#39;Friday&#39;</span><span class="o">,</span> <span class="s1">&#39;Saturday&#39;</span><span class="o">],</span>
        <span class="nx">b</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;Jan&#39;</span><span class="o">,</span> <span class="s1">&#39;Feb&#39;</span><span class="o">,</span> <span class="s1">&#39;Mar&#39;</span><span class="o">,</span> <span class="s1">&#39;Apr&#39;</span><span class="o">,</span> <span class="s1">&#39;May&#39;</span><span class="o">,</span> <span class="s1">&#39;Jun&#39;</span><span class="o">,</span> <span class="s1">&#39;Jul&#39;</span><span class="o">,</span> <span class="s1">&#39;Aug&#39;</span><span class="o">,</span> <span class="s1">&#39;Sep&#39;</span><span class="o">,</span> <span class="s1">&#39;Oct&#39;</span><span class="o">,</span> <span class="s1">&#39;Nov&#39;</span><span class="o">,</span> <span class="s1">&#39;Dec&#39;</span><span class="o">],</span>
        <span class="nx">B</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;January&#39;</span><span class="o">,</span> <span class="s1">&#39;February&#39;</span><span class="o">,</span> <span class="s1">&#39;March&#39;</span><span class="o">,</span> <span class="s1">&#39;April&#39;</span><span class="o">,</span> <span class="s1">&#39;May&#39;</span><span class="o">,</span> <span class="s1">&#39;June&#39;</span><span class="o">,</span> <span class="s1">&#39;July&#39;</span><span class="o">,</span> <span class="s1">&#39;August&#39;</span><span class="o">,</span> <span class="s1">&#39;September&#39;</span><span class="o">,</span> <span class="s1">&#39;October&#39;</span><span class="o">,</span> <span class="s1">&#39;November&#39;</span><span class="o">,</span> <span class="s1">&#39;December&#39;</span><span class="o">],</span>
        <span class="nx">c</span><span class="o">:</span> <span class="s1">&#39;%a %d %b %Y %T %Z&#39;</span><span class="o">,</span>
        <span class="nx">p</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;AM&#39;</span><span class="o">,</span> <span class="s1">&#39;PM&#39;</span><span class="o">],</span>
        <span class="nx">P</span><span class="o">:</span> <span class="o">[</span><span class="s1">&#39;am&#39;</span><span class="o">,</span> <span class="s1">&#39;pm&#39;</span><span class="o">],</span>
        <span class="nx">r</span><span class="o">:</span> <span class="s1">&#39;%I:%M:%S %p&#39;</span><span class="o">,</span>
        <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;%d/%m/%y&#39;</span><span class="o">,</span>
        <span class="nx">X</span><span class="o">:</span> <span class="s1">&#39;%T&#39;</span>
 <span class="o">};</span>

 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">merge</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">,</span> <span class="o">{});</span>

 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en-US&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">merge</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en&#39;</span><span class="o">],</span> <span class="o">{</span>
        <span class="nx">c</span><span class="o">:</span> <span class="s1">&#39;%a %d %b %Y %I:%M:%S %p %Z&#39;</span><span class="o">,</span>
        <span class="nx">x</span><span class="o">:</span> <span class="s1">&#39;%m/%d/%Y&#39;</span><span class="o">,</span>
        <span class="nx">X</span><span class="o">:</span> <span class="s1">&#39;%I:%M:%S %p&#39;</span>
 <span class="o">});</span>

 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en-GB&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">merge</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en&#39;</span><span class="o">],</span> <span class="o">{</span>
        <span class="nx">r</span><span class="o">:</span> <span class="s1">&#39;%l:%M:%S %P %Z&#39;</span>
 <span class="o">});</span>
 <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en-AU&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">merge</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DateLocale</span><span class="o">[</span><span class="s1">&#39;en&#39;</span><span class="o">]);</span>

<span class="o">})();</span>

<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">register</span><span class="o">(</span><span class="s2">&quot;datasource&quot;</span><span class="o">,</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">DataSource</span><span class="o">,</span> <span class="o">{</span><span class="nx">version</span><span class="o">:</span> <span class="s2">&quot;2.6.0&quot;</span><span class="o">,</span> <span class="nx">build</span><span class="o">:</span> <span class="s2">&quot;1321&quot;</span><span class="o">});</span>
</pre></div>

<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC All rights reserved.</span>
<span class="c"> * Version: 1.0.00</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * The console pacakge extends the &quot;mvc/core.js&quot; package with additional console logging capabilities. This package</span>
<span class="c"> *  first attempts to use the FireBug console logger, and then, when that is not available will open a new browser window</span>
<span class="c"> *  and log there.</span>
<span class="c"> * @class Core</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">_YD</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Dom</span><span class="o">,</span>
        <span class="nx">_YL</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">;</span>

    <span class="k">var</span> <span class="nx">_consoleBody</span><span class="o">,</span>
        <span class="nx">_consoleDoc</span><span class="o">,</span>
        <span class="nx">_consoleObject</span> <span class="o">=</span> <span class="o">{},</span>
        <span class="nx">_consoleWindow</span><span class="o">,</span>
        <span class="nx">_countTimerMap</span> <span class="o">=</span> <span class="o">{},</span>
        <span class="nx">_countNameMap</span> <span class="o">=</span> <span class="o">{},</span>
        <span class="nx">_nextLogType</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
        <span class="nx">_timeNameMap</span> <span class="o">=</span> <span class="o">{};</span>

    <span class="k">var</span> <span class="nx">_HTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;en&quot; lang=&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;Mint Console Logger&lt;/title&gt;&lt;style type=&quot;text/css&quot;&gt;p{margin:0; padding: 0.25em;}div.log{font-family: console, arial, san-serif; font-size: 12px; border: 1px solid #EEE;color: #333; margin: 0; padding: 0.25em;}span.label{color:#009; font-weight:bold; padding-right: 0.25em;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * Prepends the time onto the message.</span>
<span class="c">     * @method _prependTime</span>
<span class="c">     * @param message {String} Required. The value to prepend.</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_prependTime</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="s1">&#39;@&#39;</span> <span class="o">+</span> <span class="o">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">()).</span><span class="nx">formatTime</span><span class="o">()</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span><span class="o">)</span> <span class="o">+</span> <span class="nx">message</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Evaluates if the FireBug console object is available.</span>
<span class="c">     * @method _hasConsole</span>
<span class="c">     * @return {Boolean} The console exists.</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_hasConsole</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nb">window</span><span class="o">.</span><span class="nx">console</span> <span class="o">&amp;&amp;</span> <span class="nb">window</span><span class="o">.</span><span class="nx">console</span><span class="o">.</span><span class="nx">firebug</span><span class="o">;</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Create a new one and pointers to interal document.</span>
<span class="c">     * @method _setWindow</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_setWindow</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span> <span class="nx">_consoleWindow</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">_consoleWindow</span> <span class="o">=</span> <span class="nb">window</span><span class="o">.</span><span class="nx">open</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span><span class="s2">&quot;_consoleWindow&quot;</span><span class="o">,</span><span class="s2">&quot;width=500,height=300,scrollbars=1,resizable=1&quot;</span><span class="o">);</span>
            <span class="nx">_consoleDoc</span> <span class="o">=</span> <span class="nx">_consoleWindow</span><span class="o">.</span><span class="nb">window</span><span class="o">.</span><span class="nb">document</span><span class="o">;</span>
            <span class="nx">_consoleDoc</span><span class="o">.</span><span class="nx">open</span><span class="o">();</span>
            <span class="nx">_consoleDoc</span><span class="o">.</span><span class="nx">write</span><span class="o">(</span><span class="nx">_HTML</span><span class="o">);</span>
            <span class="nx">_consoleDoc</span><span class="o">.</span><span class="nx">close</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span> <span class="nx">_consoleBody</span><span class="o">)</span> <span class="o">{</span>
            <span class="nx">_consoleBody</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getBodyElement</span><span class="o">(</span><span class="nx">_consoleDoc</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nx">_consoleWindow</span> <span class="o">&amp;&amp;</span> <span class="nx">_consoleBody</span> <span class="o">&amp;&amp;</span> <span class="nx">_consoleDoc</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Inserts a log statement into the logging window.</span>
<span class="c">     * @method _log</span>
<span class="c">     * @param message {String} Required. The message.</span>
<span class="c">     * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">     * @private</span>
<span class="c">     */</span>
    <span class="k">var</span> <span class="nx">_log</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">;</span>

        <span class="nx">_YL</span><span class="o">.</span><span class="nx">callLazy</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">_consoleBody</span><span class="o">.</span><span class="nx">insertBefore</span><span class="o">(</span><span class="nx">_consoleDoc</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="s1">&#39;div&#39;</span><span class="o">),</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getFirstChild</span><span class="o">(</span><span class="nx">_consoleBody</span><span class="o">)),</span>
                <span class="nx">j</span> <span class="o">=</span> <span class="nx">args</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>

            <span class="nx">message</span> <span class="o">=</span> <span class="nx">_prependTime</span><span class="o">(</span><span class="nx">message</span><span class="o">);</span>
            <span class="nx">p</span><span class="o">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;log&#39;</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="nx">_nextLogType</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;#333&#39;</span><span class="o">,</span>
                    <span class="nx">symbol</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>

                <span class="nx">switch</span> <span class="o">(</span><span class="nx">_nextLogType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">case</span> <span class="s1">&#39;error&#39;</span><span class="o">:</span>
                        <span class="nx">color</span> <span class="o">=</span> <span class="s1">&#39;#900&#39;</span><span class="o">;</span>
                        <span class="nx">symbol</span> <span class="o">=</span> <span class="s1">&#39;(X)&#39;</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>

                    <span class="nx">case</span> <span class="s1">&#39;info&#39;</span><span class="o">:</span>
                        <span class="nx">symbol</span> <span class="o">=</span> <span class="s1">&#39;(i)&#39;</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>

                    <span class="nx">case</span> <span class="s1">&#39;warn&#39;</span><span class="o">:</span>
                        <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">p</span><span class="o">,</span> <span class="s1">&#39;backgroundColor&#39;</span><span class="o">,</span> <span class="s1">&#39;#0FF&#39;</span><span class="o">);</span>
                        <span class="nx">symbol</span> <span class="o">=</span> <span class="s1">&#39;(!)&#39;</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>

                    <span class="nx">default</span><span class="o">:</span> <span class="c">// do nothing</span>
<span class="c"></span>                <span class="o">}</span>

                <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">p</span><span class="o">,</span> <span class="s1">&#39;color&#39;</span><span class="o">,</span> <span class="nx">color</span><span class="o">);</span>

                <span class="k">if</span> <span class="o">(</span><span class="nx">symbol</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;&lt;strong&gt;&#39;</span> <span class="o">+</span> <span class="nx">symbol</span> <span class="o">+</span> <span class="s1">&#39; &lt;/strong&gt;&#39;</span> <span class="o">+</span> <span class="nx">message</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="nx">_nextLogType</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">j</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">arg</span> <span class="o">=</span> <span class="nx">args</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">rx</span><span class="o">;</span>

                <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">arg</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nx">rx</span> <span class="o">=</span> <span class="sr">/\%s/</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">arg</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nb">parseInt</span><span class="o">(</span><span class="nx">arg</span><span class="o">)</span> <span class="o">===</span> <span class="nx">arg</span><span class="o">)</span> <span class="o">{</span>
                        <span class="nx">rx</span> <span class="o">=</span> <span class="sr">/\%d|\%i/</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="nx">rx</span> <span class="o">=</span> <span class="sr">/\%f/</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="nx">rx</span> <span class="o">=</span> <span class="sr">/\%o/</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="nx">message</span> <span class="o">=</span> <span class="nx">message</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="nx">rx</span><span class="o">,</span> <span class="nx">arg</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nx">_YD</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="nx">p</span><span class="o">,</span> <span class="nx">message</span><span class="o">);</span>
        <span class="o">},</span> <span class="nx">_setWindow</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="c">/**</span>
<span class="c">     * Fetches the console object for logging; emulates console in non-FF browsers.</span>
<span class="c">     * @method getConsole</span>
<span class="c">     * @return {Object} The console object.</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">Core</span><span class="o">.</span><span class="nx">getConsole</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nx">_hasConsole</span><span class="o">())</span> <span class="o">{</span>
            <span class="c">/*</span>
<span class="c">                note: the FireBug implementation of string substitution patterns does not check type, it simply</span>
<span class="c">                    finds the first instance of a substitution pattern and replaces it with the agument in that position.</span>
<span class="c">                    this means that console.log(&#39;test - %d %s&#39;, &#39;s1&#39;, &#39;s2&#39;) will produce the message &quot;test - s1 s2&quot; not &quot;test - %d s1&quot;</span>
<span class="c">             */</span>

			<span class="nx">_consoleObject</span> <span class="o">=</span> <span class="nb">window</span><span class="o">.</span><span class="nx">console</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>

            <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_consoleObject</span><span class="o">,</span> <span class="o">{</span>

                <span class="c">/**</span>
<span class="c">                 * Tests an expression, inserting an error message, when false.</span>
<span class="c">                 * @method assert</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">assert</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">;</span>

                    <span class="k">if</span> <span class="o">(!</span> <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">])</span> <span class="o">{</span>
                        <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;assertion &lt;span class=&quot;label&quot;&gt;false&lt;/span&gt;&#39;</span><span class="o">;</span>
                        <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">error</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">args</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Writes the number of times that the line of code where count was called was executed.</span>
<span class="c">                 * @method count</span>
<span class="c">                 * @param name {String} Required. The name of this event.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">count</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">name</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(!</span> <span class="nx">_countNameMap</span><span class="o">[</span><span class="nx">name</span><span class="o">])</span> <span class="o">{</span><span class="nx">_countNameMap</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="m">0</span><span class="o">;}</span>
                    <span class="nx">_countNameMap</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">+=</span> <span class="m">1</span><span class="o">;</span>

                    <span class="c">// attempt to emulate the count logic logging that fires after codeblock is done in FireBug</span>
<span class="c"></span>                    <span class="nx">clearTimeout</span><span class="o">(</span><span class="nx">_countTimerMap</span><span class="o">[</span><span class="nx">name</span><span class="o">]);</span>
                    <span class="nx">_countTimerMap</span><span class="o">[</span><span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                        <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">debug</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s1">&#39;%s %i&#39;</span><span class="o">,</span> <span class="nx">name</span><span class="o">,</span> <span class="nx">_countNameMap</span><span class="o">[</span><span class="nx">name</span><span class="o">],</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">);</span>
                    <span class="o">},</span> <span class="m">1000</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Inserts a debug statement into the logging window with a line number.</span>
<span class="c">                 * @method debug</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">debug</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">;</span>
                    <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">+=</span> <span class="s1">&#39;; %s (line %d)&#39;</span><span class="o">;</span>
                    <span class="nx">_log</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">args</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Prints a listing of all properties of the object.</span>
<span class="c">                 * @method dir</span>
<span class="c">                 * @param o {Object} Required. The evaluation object.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">dir</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">sb</span> <span class="o">=</span> <span class="o">[];</span>

                    <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">o</span><span class="o">[</span><span class="nx">k</span><span class="o">],</span>
                            <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;&lt;p&gt;&lt;span class=&quot;label&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">k</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="o">;</span>

                        <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;function()&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;Object&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;Array&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">obj</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="nx">obj</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;Undefined&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isNull</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;Null&#39;</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isDate</span><span class="o">(</span><span class="nx">obj</span><span class="o">))</span> <span class="o">{</span>
                            <span class="nx">s</span> <span class="o">+=</span> <span class="nx">obj</span><span class="o">.</span><span class="nx">formatTime</span><span class="o">();</span>
                        <span class="o">}</span>

                        <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="o">;</span>
                        <span class="nx">sb</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">s</span><span class="o">);</span>
                    <span class="o">}</span>

                    <span class="c">// sorts the functions to the end, everything else alphabetically</span>
<span class="c"></span>                    <span class="nx">sb</span><span class="o">.</span><span class="nx">sort</span><span class="o">(</span><span class="k">function</span><span class="o">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">aIsFunction</span> <span class="o">=</span> <span class="o">-</span><span class="m">1</span> <span class="o">&lt;</span> <span class="nx">a</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s1">&#39;function()&#39;</span><span class="o">);</span>
                        <span class="k">var</span> <span class="nx">bIsFunction</span> <span class="o">=</span> <span class="o">-</span><span class="m">1</span> <span class="o">&lt;</span> <span class="nx">b</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">(</span><span class="s1">&#39;function()&#39;</span><span class="o">);</span>

                        <span class="k">if</span> <span class="o">(</span><span class="nx">aIsFunction</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nx">bIsFunction</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">return</span> <span class="m">1</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">bIsFunction</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nx">aIsFunction</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">return</span> <span class="o">-</span><span class="m">1</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="c">// sort alpha</span>
<span class="c"></span>                        <span class="k">else</span> <span class="o">{</span>
                            <span class="k">var</span> <span class="nx">rx</span> <span class="o">=</span> <span class="sr">/.*?\&quot;\&gt;(.*)?\&lt;\/span\&gt;.*/</span><span class="o">,</span>
                                <span class="nx">nameA</span> <span class="o">=</span> <span class="nx">a</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="nx">rx</span><span class="o">,</span> <span class="s1">&#39;$1&#39;</span><span class="o">),</span>
                                <span class="nx">temp</span> <span class="o">=</span> <span class="o">[</span><span class="nx">nameA</span><span class="o">,</span> <span class="nx">b</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="nx">rx</span><span class="o">,</span> <span class="s1">&#39;$1&#39;</span><span class="o">)];</span>

                            <span class="nx">temp</span><span class="o">.</span><span class="nx">sort</span><span class="o">();</span>
                            <span class="k">return</span> <span class="nx">nameA</span> <span class="o">===</span> <span class="nx">temp</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">?</span> <span class="o">-</span><span class="m">1</span> <span class="o">:</span> <span class="m">1</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">});</span>

                    <span class="nx">_log</span><span class="o">(</span><span class="nx">sb</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">));</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Prints the XML source tree of an HTML or XML element.</span>
<span class="c">                 * @method dirxml</span>
<span class="c">                 * @param node {Element} Required. The evaluation element.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">dirxml</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// todo: implement</span>
<span class="c"></span>                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Inserts an error statement into the logging window with a line number.</span>
<span class="c">                 * @method error</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">error</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">_nextLogType</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span><span class="o">;</span>
                    <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">debug</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Writes a message to the console and opens a nested block to indent all future messages sent to the console; filename and linenumber required.</span>
<span class="c">                 * @method group</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">group</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// todo: implement</span>
<span class="c"></span>                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Closes the most recently opened block created by a call to console.group.</span>
<span class="c">                 * @method groupEnd</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">groupEnd</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">// todo: implement</span>
<span class="c"></span>                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Inserts an info statement into the logging window with a line number.</span>
<span class="c">                 * @method info</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">info</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">message</span><span class="o">,</span> <span class="nx">objectX</span><span class="o">,</span> <span class="nx">fileName</span><span class="o">,</span> <span class="nx">lineNumber</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">_nextLogType</span> <span class="o">=</span> <span class="s1">&#39;info&#39;</span><span class="o">;</span>
                    <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">debug</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Inserts a log statement into the logging window.</span>
<span class="c">                 * @method log</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">log</span><span class="o">:</span> <span class="nx">_log</span><span class="o">,</span>

                <span class="c">/**</span>
<span class="c">                 * Prevents the profile call from throwing an exception in non-FireBug enabled browsers.</span>
<span class="c">                 * @method profile</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">profile</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nx">_log</span><span class="o">(</span><span class="s1">&#39;profile unimplemented&#39;</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Prevents the profileEnd call from throwing an exception in non-FireBug enabled browsers.</span>
<span class="c">                 * @method profileEnd</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">profileEnd</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nx">_log</span><span class="o">(</span><span class="s1">&#39;profileEnd unimplemented&#39;</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Creates a new timer under the given name. Call console.timeEnd(name) with the same name to stop the timer and print the time elapsed.</span>
<span class="c">                 * @method time</span>
<span class="c">                 * @param name {String} Required. The name of this event.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">time</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">name</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">_timeNameMap</span><span class="o">[</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="o">();</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Stops a timer created by a call to console.time(name) and writes the time elapsed.</span>
<span class="c">                 * @method timeEnd</span>
<span class="c">                 * @param name {String} Required. The name of this event.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">timeEnd</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">name</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">_timeNameMap</span><span class="o">[</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="o">])</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">;</span>
                        <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">]</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;: &#39;</span> <span class="o">+</span> <span class="nb">Date</span><span class="o">.</span><span class="nx">diff</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="nx">_timeNameMap</span><span class="o">[</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="o">],</span> <span class="nb">Date</span><span class="o">.</span><span class="nx">MILLISECOND</span><span class="o">)</span> <span class="o">+</span> <span class="s1">&#39;ms&#39;</span><span class="o">;</span>
                        <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">debug</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">args</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Prevents the trace call from throwing an exception in non-FireBug enabled browsers.</span>
<span class="c">                 * @method trace</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">trace</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nx">_log</span><span class="o">(</span><span class="s1">&#39;Trace unimplemented&#39;</span><span class="o">);</span>
                <span class="o">},</span>

                <span class="c">/**</span>
<span class="c">                 * Inserts a warn statement into the logging window with a line number.</span>
<span class="c">                 * @method warn</span>
<span class="c">                 * @param message {String} Required. The message.</span>
<span class="c">                 * @param objectX {Object} Optional. Objects to substitue in message.</span>
<span class="c">                 * @param fileName {String} Required. The JavaScript filename; the second to last parameter.</span>
<span class="c">                 * @param lineNumber {Number} Required. The line number; the last parameter.</span>
<span class="c">                 * @public</span>
<span class="c">                 */</span>
                <span class="nx">warn</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nx">_nextLogType</span> <span class="o">=</span> <span class="s1">&#39;warn&#39;</span><span class="o">;</span>
                    <span class="nx">_consoleObject</span><span class="o">.</span><span class="nx">debug</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="nx">Core</span><span class="o">.</span><span class="nx">getConsole</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="k">return</span> <span class="nx">_consoleObject</span><span class="o">;};</span>
        <span class="k">return</span> <span class="nx">_consoleObject</span><span class="o">;</span>
    <span class="o">};</span>
<span class="o">})();</span>
</pre></div>

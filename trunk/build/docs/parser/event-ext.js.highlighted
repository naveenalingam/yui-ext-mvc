<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC. All rights reserved.</span>
<span class="c"> * Version: 1.0.03</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * Extending YAHOO.util.Event.</span>
<span class="c"> * @class Event</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">_YL</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">,</span>
        <span class="nx">_YE</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Event</span><span class="o">,</span>
        <span class="nx">_YK</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">KeyListener</span><span class="o">.</span><span class="nx">KEY</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">(!</span> <span class="nx">_YE</span><span class="o">)</span> <span class="o">{</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_NOT_DEFINED</span><span class="o">,</span> <span class="s1">&#39;YAHOO.util.Event&#39;</span><span class="o">,</span> <span class="s1">&#39;extend&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo-ext/event.js&#39;</span><span class="o">);}</span>

    <span class="k">var</span> <span class="nx">_throwNotImplemented</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span> <span class="o">?</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
		<span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_NOT_IMPLEMENTED</span><span class="o">,</span> <span class="s1">&#39;YAHOO.util.Dom&#39;</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
	<span class="o">}:</span> <span class="k">function</span><span class="o">(</span><span class="nx">text</span><span class="o">)</span> <span class="o">{</span><span class="k">throw</span><span class="o">(</span><span class="nx">text</span><span class="o">);};</span>

    <span class="nx">_YE</span><span class="o">.</span><span class="nx">throwErrors</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

    <span class="k">var</span> <span class="nx">_that</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c">/**</span>
<span class="c">         * An alias for YAHOO.util.Event.removeListener.</span>
<span class="c">         * @method off</span>
<span class="c">         * @see YAHOO.util.Event.removeListener</span>
<span class="c">         */</span>
        <span class="nx">off</span><span class="o">:</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">removeListener</span><span class="o">,</span>

        <span class="c">/**</span>
<span class="c">         * Adds a listener to input that checks keydown events for keycode, then calls the appropriately scoped function, passing the event.</span>
<span class="c">         * @method addKeyListener</span>
<span class="c">         * @param attachTo {Element} Required. Pointer or string reference to DOM input element to listen on.</span>
<span class="c">         * @param keycodes {Array} Required. A collection of desired keycodes.</span>
<span class="c">         * @param callback {Function} Required. The callback function.</span>
<span class="c">         * @param scope {Object} Optional. The execution scope of callback function.</span>
<span class="c">         * @param correctScope {Boolean} Optional. True, if you want to correct the scope of callback.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">addKeyListener</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="nx">keycodes</span><span class="o">,</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">,</span> <span class="nx">correctScope</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">kl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">KeyListener</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="nx">keycodes</span><span class="o">,</span> <span class="o">{</span><span class="nx">fn</span><span class="o">:</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">:</span> <span class="nx">scope</span> <span class="o">?</span> <span class="nx">scope</span><span class="o">:</span> <span class="nb">window</span><span class="o">,</span> <span class="nx">correctScope</span><span class="o">:</span> <span class="nx">correctScope</span><span class="o">});</span>
            <span class="nx">kl</span><span class="o">.</span><span class="nx">enable</span><span class="o">();</span>
            <span class="k">return</span> <span class="nx">kl</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Adds a listener to input that checks keypress events for enter, then</span>
<span class="c">         *  calls the appropriate function or method. (pass the window into obj for functions).</span>
<span class="c">         * @method addEnterListener</span>
<span class="c">         * @param attachTo {Element} Required. Pointer or string reference to DOM input element to listen on.</span>
<span class="c">         * @param callback {Function} Required. The callback function.</span>
<span class="c">         * @param scope {Object} Optional. The execution scope of callback function.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">addEnterListener</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">addKeyListener</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="o">{</span><span class="nx">keys</span><span class="o">:</span> <span class="nx">_YK</span><span class="o">.</span><span class="nx">ENTER</span><span class="o">},</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Adds a listener to input that checks keypress events for escape, then</span>
<span class="c">         *  calls the appropriate function or method. (pass the window into obj for functions).</span>
<span class="c">         * @method addEscapeListener</span>
<span class="c">         * @param attachTo {Element} Required. Pointer or string reference to DOM input element to listen on.</span>
<span class="c">         * @param callback {Function} Required. The callback function.</span>
<span class="c">         * @param scope {Object} Optional. The execution scope of callback function.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">addEscapeListener</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">addKeyListener</span><span class="o">(</span><span class="nx">attachTo</span><span class="o">,</span> <span class="o">{</span><span class="nx">keys</span><span class="o">:</span> <span class="nx">_YK</span><span class="o">.</span><span class="nx">ESCAPE</span><span class="o">},</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">scope</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Retrieves the {x, y} coordinates of an event.</span>
<span class="c">         * @method getMousePosition</span>
<span class="c">         * @param e {Event} Required. The triggered JavaScript event; any mouse event.</span>
<span class="c">         * @return {Object} Where x = x coordinate and y = y coordinate of event.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getMousePosition</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">{</span><span class="nx">x</span><span class="o">:</span><span class="nx">_YE</span><span class="o">.</span><span class="nx">getPageX</span><span class="o">(</span><span class="nx">e</span><span class="o">),</span> <span class="nx">y</span><span class="o">:</span><span class="nx">_YE</span><span class="o">.</span><span class="nx">getPageY</span><span class="o">(</span><span class="nx">e</span><span class="o">)};</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">simulateClick</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;simulateClick&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">simulateEvent</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;simulateEvent&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);}</span>
    <span class="o">};</span>

    <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YE</span><span class="o">,</span> <span class="nx">_that</span><span class="o">);</span>

    <span class="c">// YAHOO.lang extensions are included</span>
<span class="c"></span>    <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">_thatIfLangExtended</span> <span class="o">=</span> <span class="o">{</span>

            <span class="c">/**</span>
<span class="c">             * Simulates a click event on an element. Will iterate up the DOM tree until the root is reached or node becomes undefined.</span>
<span class="c">             * @method simulateClick</span>
<span class="c">             * @param elem {Element} Required. The element to click on.</span>
<span class="c">             * @param rt {Element} Optional. The ancestor to stop on; default is document.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">simulateClick</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">rt</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">_YE</span><span class="o">.</span><span class="nx">simulateEvent</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="s1">&#39;click&#39;</span><span class="o">,</span> <span class="nx">rt</span><span class="o">);</span>
            <span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Simulates an event on an element. Will iterate up the DOM tree until the root is reached or node becomes undefined.</span>
<span class="c">             * @method simulateEvent</span>
<span class="c">             * @param node {Element} Required. The element to click on.</span>
<span class="c">             * @param eventType {String} Required. The event type to fire.</span>
<span class="c">             * @param rt {Element} Optional. The ancestor to stop on; default is document.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">simulateEvent</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">eventType</span><span class="o">,</span> <span class="nx">rt</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">rt</span> <span class="o">||</span> <span class="nb">document</span><span class="o">,</span>
                    <span class="nx">searchNode</span> <span class="o">=</span> <span class="nx">node</span><span class="o">;</span>

                <span class="c">// iterate up the DOM tree</span>
<span class="c"></span>                <span class="k">while</span> <span class="o">(</span><span class="nx">searchNode</span> <span class="o">&amp;&amp;</span> <span class="nx">root</span> <span class="o">!==</span> <span class="nx">searchNode</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">listeners</span> <span class="o">=</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">getListeners</span><span class="o">(</span><span class="nx">searchNode</span><span class="o">,</span> <span class="nx">eventType</span><span class="o">);</span>

                    <span class="c">// node has listeners</span>
<span class="c"></span>                    <span class="k">if</span> <span class="o">(</span><span class="nx">listeners</span> <span class="o">&amp;&amp;</span> <span class="nx">listeners</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c">// iterate on those listeners</span>
<span class="c"></span>                        <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">listeners</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
                            <span class="nx">o</span><span class="o">.</span><span class="nx">fn</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">adjust</span> <span class="o">?</span> <span class="nx">o</span><span class="o">.</span><span class="nx">scope</span> <span class="o">:</span> <span class="k">this</span><span class="o">,</span> <span class="o">{</span><span class="nx">target</span><span class="o">:</span> <span class="nx">node</span><span class="o">},</span> <span class="nx">o</span><span class="o">.</span><span class="nx">obj</span><span class="o">);</span> <span class="c">// execute function</span>
<span class="c"></span>                        <span class="o">});</span>
                    <span class="o">}</span>

                    <span class="nx">searchNode</span> <span class="o">=</span> <span class="nx">searchNode</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">};</span>

        <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YE</span><span class="o">,</span> <span class="nx">_thatIfLangExtended</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">})();</span>
</pre></div>

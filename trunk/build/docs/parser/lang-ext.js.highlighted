<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC All rights reserved.</span>
<span class="c"> * Version: 1.0.01</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * Extending YAHOO.lang.</span>
<span class="c"> * @class YAHOO.lang</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>    
    <span class="k">var</span> <span class="nx">_YL</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">,</span>
        <span class="nx">_YUA</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">env</span><span class="o">.</span><span class="nx">ua</span><span class="o">;</span>

	<span class="k">var</span> <span class="nx">_that</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c">/**</span>
<span class="c">         * The error text to throw when a method is not implemetented.</span>
<span class="c">         * @property ERROR_NOT_IMPLEMENTED</span>
<span class="c">         * @type String</span>
<span class="c">         * @static</span>
<span class="c">         * @final</span>
<span class="c">         */</span>
        <span class="nx">ERROR_NOT_IMPLEMENTED</span><span class="o">:</span> <span class="s1">&#39;Method &quot;??.??&quot; not available without including &quot;??&quot; in your library.&#39;</span><span class="o">,</span>

        <span class="c">/**</span>
<span class="c">         * The error text to throw when invalid parameters are passed into a method.</span>
<span class="c">         * @property ERROR_INVALID_PARAMETERS</span>
<span class="c">         * @type String</span>
<span class="c">         * @static</span>
<span class="c">         * @final</span>
<span class="c">         */</span>
        <span class="nx">ERROR_INVALID_PARAMETERS</span><span class="o">:</span> <span class="s1">&#39;Method &quot;??.??&quot; is missing required parameter of (??) &quot;??&quot;.&#39;</span><span class="o">,</span>

        <span class="c">/**</span>
<span class="c">         * The error text to throw when a required value is not defined.</span>
<span class="c">         * @property ERROR_NOT_DEFINED</span>
<span class="c">         * @type String</span>
<span class="c">         * @static</span>
<span class="c">         * @final</span>
<span class="c">         */</span>
        <span class="nx">ERROR_NOT_DEFINED</span><span class="o">:</span> <span class="s1">&#39;?? - &quot;??&quot; not defined, unable to ?? &quot;??&quot;&#39;</span><span class="o">,</span>

        <span class="c">/**</span>
<span class="c">         * The error text to throw when an object is missing a required key.</span>
<span class="c">         * @property ERROR_MALFORMED_OBJECT</span>
<span class="c">         * @type String</span>
<span class="c">         * @static</span>
<span class="c">         * @final</span>
<span class="c">         */</span>
        <span class="nx">ERROR_MALFORMED_OBJECT</span><span class="o">:</span> <span class="s1">&#39;?? - Object &quot;??&quot; does not contain required parameter (??) &quot;??&quot;&#39;</span><span class="o">,</span>

        <span class="c">/**</span>
<span class="c">		 * Iterates on the provided array and calls provided function with the value of each index.</span>
<span class="c">		 * @method arrayWalk</span>
<span class="c">		 * @param arr {Array} Required. The array or array-like object to iterate on (must have a length).</span>
<span class="c">		 * @param fx {Function} Required. The function to execute.</span>
<span class="c">		 * @param scope {Object} Optional. The execution scope.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">arrayWalk</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">arr</span><span class="o">,</span> <span class="nx">fx</span><span class="o">,</span> <span class="nx">scope</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">arr</span> <span class="o">||</span> <span class="nx">arr</span><span class="o">.</span><span class="nx">length</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>
			<span class="k">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nx">arr</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
			<span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">fx</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="nb">window</span><span class="o">,</span> <span class="nx">arr</span><span class="o">[</span><span class="nx">i</span><span class="o">],</span> <span class="nx">i</span><span class="o">);</span>
				<span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isDefined</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="nx">o</span><span class="o">;}</span>
			<span class="o">}</span>
		<span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Wrapper for simple lazy-loading functions.</span>
<span class="c">		 * @method callLazy</span>
<span class="c">		 * @param callback {Function} Required. The callback method.</span>
<span class="c">		 * @param isReady {Function} Required. The is ready test function.</span>
<span class="c">		 * @param conf {Object} Optional. Configuration options for execution.</span>
<span class="c">		 *          failure: {Function} The method to call if max iteration is reached.</span>
<span class="c">		 *          maxExec: {Number} The maximum number of time to execute; default is 25.</span>
<span class="c">		 *          timeout: {Number} The number of milliseconds to wait before checking &#39;isReady&#39;; default is 100ms.</span>
<span class="c">		 *          params: {Object} An object to pass through to callback function.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">callLazy</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">callback</span><span class="o">,</span> <span class="nx">isReady</span><span class="o">,</span> <span class="nx">conf</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">// define cfg and set default values</span>
<span class="c"></span>            <span class="k">var</span> <span class="nx">cfg</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">conf</span><span class="o">)</span> <span class="o">?</span> <span class="nx">conf</span> <span class="o">:</span> <span class="o">{};</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="m">0</span> <span class="o">&lt;</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">maxExec</span><span class="o">))</span> <span class="o">{</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">maxExec</span> <span class="o">=</span> <span class="m">25</span><span class="o">;}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="m">0</span> <span class="o">&lt;</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">timeout</span><span class="o">))</span> <span class="o">{</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">timeout</span> <span class="o">=</span> <span class="m">100</span><span class="o">;}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">callback</span><span class="o">))</span> <span class="o">{</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_INVALID_PARAMETERS</span><span class="o">,</span> <span class="s1">&#39;YAHOO.lang&#39;</span><span class="o">,</span> <span class="s1">&#39;callLazy&#39;</span><span class="o">,</span> <span class="k">typeof</span> <span class="nx">callback</span><span class="o">,</span> <span class="nx">callback</span><span class="o">);}</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">isReady</span><span class="o">))</span> <span class="o">{</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_INVALID_PARAMETERS</span><span class="o">,</span> <span class="s1">&#39;YAHOO.lang&#39;</span><span class="o">,</span> <span class="s1">&#39;callLazy&#39;</span><span class="o">,</span> <span class="k">typeof</span> <span class="nx">isReady</span><span class="o">,</span> <span class="nx">isReady</span><span class="o">);}</span>

            <span class="k">var</span> <span class="nx">fx</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">index</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">// index does not yet exceed maxExec</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">maxExec</span> <span class="o">&gt;</span> <span class="nx">index</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">isReady</span><span class="o">())</span> <span class="o">{</span>
                        <span class="nx">callback</span><span class="o">(</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">params</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
					    <span class="nx">setTimeout</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">fx</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">index</span> <span class="o">+</span> <span class="m">1</span><span class="o">);},</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">timeout</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="c">// exceeding maxExec; terminate</span>
<span class="c"></span>                <span class="k">else</span> <span class="o">{</span>
                    <span class="c">// was a failutre function provided</span>
<span class="c"></span>                    <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">failure</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nx">cfg</span><span class="o">.</span><span class="nx">failure</span><span class="o">(</span><span class="nx">fx</span><span class="o">,</span> <span class="nx">cfg</span><span class="o">,</span> <span class="nx">i</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">};</span>

            <span class="nx">fx</span><span class="o">(</span><span class="m">0</span><span class="o">);</span>
		<span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Provides a safe method for executing a for ... in&quot; loop on the provided object, calling the function with the object and key.</span>
<span class="c">         * @method forEach</span>
<span class="c">         * @param obj {Object} Required. The object to loop through.</span>
<span class="c">         * @param fx {Function} Required. The callback function.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">forEach</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">obj</span><span class="o">,</span> <span class="nx">fx</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isDefined</span><span class="o">(</span><span class="nx">obj</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">fx</span><span class="o">)))</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>
    
            <span class="c">// iterate on the keys in data</span>
<span class="c"></span>            <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">obj</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">obj</span><span class="o">[</span><span class="nx">k</span><span class="o">];</span>

                <span class="k">if</span> <span class="o">(!</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">{</span> <span class="c">// ignore functions</span>
<span class="c"></span>                    <span class="nx">fx</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">k</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Evaluates if the provided object is an arguments object or not.</span>
<span class="c">         * @method isArgument</span>
<span class="c">         * @param o {Object} Required. The object to evaluate.</span>
<span class="c">         * @return {Boolean} The object is an argument.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isArgument</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span><span class="o">.</span><span class="nx">callee</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Evaluates if the provided object is an Date object or not; the special &quot;o.length&quot; check is for Array-Like object that may not have &#39;constructor&#39;.</span>
<span class="c">         * @method isDate</span>
<span class="c">         * @param o {Object} Required. The object to evaluate.</span>
<span class="c">         * @return {Boolean} The object is a Date.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isDate</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nb">Date</span> <span class="o">===</span> <span class="nx">o</span><span class="o">.</span><span class="nx">constructor</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Evaluates if the provided object is defined or not; defined means not NULL and not UNDEFINED. Slightly more performance than YAHOO.lang.isValue.</span>
<span class="c">         * @see YAHOO.lang.isValue</span>
<span class="c">         * @method isDefined</span>
<span class="c">         * @param o {Object} Required. The object to evaluate.</span>
<span class="c">         * @return {Boolean} The object is a defined.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isDefined</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
		    <span class="k">return</span> <span class="nx">o</span> <span class="o">||</span> <span class="o">!</span> <span class="o">(</span><span class="kc">undefined</span> <span class="o">===</span> <span class="nx">o</span> <span class="o">||</span> <span class="kc">null</span> <span class="o">===</span> <span class="nx">o</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is firefox.</span>
<span class="c">         * @method isFireFox</span>
<span class="c">         * @return {Boolean} The client is firefox.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isFireFox</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">0</span> <span class="o">&lt;</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">firefox</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is IE.</span>
<span class="c">         * @method isIE</span>
<span class="c">         * @return {Boolean} The client is IE.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isIE</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">0</span> <span class="o">&lt;</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">ie</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is IE 6.</span>
<span class="c">         * @method isIE6</span>
<span class="c">         * @return {Boolean} The client is IE 6.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isIE6</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">7</span> <span class="o">&gt;</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">ie</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is IE 7.</span>
<span class="c">         * @method isIE7</span>
<span class="c">         * @return {Boolean} The client is IE 7.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isIE7</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">7</span> <span class="o">&lt;=</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">ie</span> <span class="o">||</span> <span class="m">8</span> <span class="o">&gt;=</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">ie</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is opera.</span>
<span class="c">         * @method isOpera</span>
<span class="c">         * @return {Boolean} The client is opera.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isOpera</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">7</span> <span class="o">&gt;</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">opera</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Evaluates if the provided object is a regular expression object or not.</span>
<span class="c">         * @method isRegExp</span>
<span class="c">         * @param o {Object} Required. The object to evaluate.</span>
<span class="c">         * @return {Boolean} The object is a RegExp.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isRegExp</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span><span class="o">.</span><span class="nx">match</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Test if the client browser is safari.</span>
<span class="c">         * @method isSafari</span>
<span class="c">         * @return {Boolean} The client is safari.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isSafari</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="m">0</span> <span class="o">&lt;</span> <span class="nx">_YUA</span><span class="o">.</span><span class="nx">webkit</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Throws the provided error text after performing text replacement.</span>
<span class="c">         * @method throwError</span>
<span class="c">         * @param text {String} Required. The error text.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">throwError</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">text</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="o">[];</span>
			
			<span class="k">var</span> <span class="nx">fx</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
				<span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
					<span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isArray</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">||</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isArgument</span><span class="o">(</span><span class="nx">o</span><span class="o">))</span> <span class="o">{</span>
						<span class="nx">fx</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">o</span><span class="o">);</span>
					<span class="o">}</span>
					<span class="k">else</span> <span class="o">{</span>
						<span class="nx">params</span><span class="o">.</span><span class="nx">push</span><span class="o">(</span><span class="nx">o</span><span class="o">);</span>
					<span class="o">}</span>
				<span class="o">});</span>
			<span class="o">};</span>
			
			<span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
				<span class="nx">params</span> <span class="o">=</span> <span class="o">[];</span>
				<span class="nx">fx</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
				
				<span class="k">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="o">[</span><span class="m">0</span><span class="o">];</span>
				<span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">params</span><span class="o">.</span><span class="nx">slice</span><span class="o">(</span><span class="m">1</span><span class="o">),</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">)</span> <span class="o">{</span>
					<span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\?\?/</span><span class="o">,</span> <span class="nx">o</span><span class="o">);</span>
				<span class="o">});</span>
				
				<span class="k">throw</span><span class="o">(</span><span class="nx">str</span><span class="o">);</span>
			<span class="o">};</span>
			
			<span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>

    <span class="c">// fixing IE; index of is assumed to be available</span>
<span class="c"></span>    <span class="k">if</span> <span class="o">(!</span> <span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">indexOf</span><span class="o">)</span> <span class="o">{</span>

        <span class="c">// this is not to be JavaDoc&#39;ed as it will confuse the compiler</span>
<span class="c"></span>        <span class="c">/*</span>
<span class="c">         * The last index of value in the array.</span>
<span class="c">         * @namespace window</span>
<span class="c">         * @method indexOf</span>
<span class="c">         * @param val {Object} Required. Any non-Object, object.</span>
<span class="c">         * @param strict {Boolean} Optional. True when also comparing type.</span>
<span class="c">         * @return {Number} The index of value or -1 when object is not in array.</span>
<span class="c">         * @public</span>
<span class="c">         */</span>
        <span class="nb">Array</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">indexOf</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">val</span><span class="o">,</span> <span class="nx">strict</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">t1</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">o</span><span class="o">,</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="o">(</span><span class="nx">o</span> <span class="o">===</span> <span class="nx">val</span><span class="o">)</span> <span class="o">||</span> <span class="o">(!</span> <span class="nx">strict</span> <span class="o">&amp;&amp;</span> <span class="nx">o</span> <span class="o">==</span> <span class="nx">val</span><span class="o">)</span> <span class="o">?</span> <span class="nx">i</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">});</span>
            <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isNumber</span><span class="o">(</span><span class="nx">t1</span><span class="o">)</span> <span class="o">?</span> <span class="nx">t1</span> <span class="o">:</span> <span class="o">-</span><span class="m">1</span><span class="o">;</span>
        <span class="o">};</span>
    <span class="o">}</span>
	
    <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YL</span><span class="o">,</span> <span class="nx">_that</span><span class="o">);</span>
<span class="o">})();</span>
</pre></div>

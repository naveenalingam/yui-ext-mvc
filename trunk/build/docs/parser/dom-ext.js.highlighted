<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC All rights reserved.</span>
<span class="c"> * Version: 1.0.06</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * Extending YAHOO.util.Dom.</span>
<span class="c"> * @class Dom</span>
<span class="c"> * @namespace YAHOO.util</span>
<span class="c"> * @static</span>
<span class="c"> */</span>
<span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">var</span> <span class="nx">_DOC</span> <span class="o">=</span> <span class="nb">document</span><span class="o">,</span>
        <span class="nx">_YD</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Dom</span><span class="o">,</span>
        <span class="nx">_YE</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Event</span><span class="o">,</span>
        <span class="nx">_YL</span> <span class="o">=</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">;</span>

    <span class="k">if</span> <span class="o">(!</span> <span class="nx">_YD</span><span class="o">)</span> <span class="o">{</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_NOT_DEFINED</span><span class="o">,</span> <span class="s1">&#39;YAHOO.util.Dom&#39;</span><span class="o">,</span> <span class="s1">&#39;extend&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo-ext/dom.js&#39;</span><span class="o">);}</span>
		
	<span class="k">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">get</span><span class="o">,</span>
        <span class="nx">_scrollIntervalId</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span>

    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">IS_DELETING</span> <span class="o">=</span> <span class="s1">&#39;isDeleting&#39;</span><span class="o">;</span>

    <span class="c">/*</span>
<span class="c">	 * W3C DOM Level 2 standard node types; for older browsers and IE.</span>
<span class="c">	 */</span>
	<span class="k">if</span> <span class="o">(!</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">ELEMENT_NODE</span><span class="o">)</span> <span class="o">{</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">ELEMENT_NODE</span> <span class="o">=</span> <span class="m">1</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">ATTRIBUTE_NODE</span> <span class="o">=</span> <span class="m">2</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">TEXT_NODE</span> <span class="o">=</span> <span class="m">3</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">CDATA_SECTION_NODE</span> <span class="o">=</span> <span class="m">4</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">ENTITY_REFERENCE_NODE</span> <span class="o">=</span> <span class="m">5</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">ENTITY_NODE</span> <span class="o">=</span> <span class="m">6</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">PROCESSING_INSTRUCTION_NODE</span> <span class="o">=</span> <span class="m">7</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">COMMENT_NODE</span> <span class="o">=</span> <span class="m">8</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">DOCUMENT_NODE</span> <span class="o">=</span> <span class="m">9</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">DOCUMENT_TYPE_NODE</span> <span class="o">=</span> <span class="m">10</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">DOCUMENT_FRAGMENT_NODE</span> <span class="o">=</span> <span class="m">11</span><span class="o">;</span>
		<span class="nx">_DOC</span><span class="o">.</span><span class="nx">NOTATION_NODE</span> <span class="o">=</span> <span class="m">12</span><span class="o">;</span>
	<span class="o">}</span>

    <span class="k">var</span> <span class="nx">_throwNotImplemented</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span> <span class="o">?</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
		<span class="nx">_YL</span><span class="o">.</span><span class="nx">throwError</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">ERROR_NOT_IMPLEMENTED</span><span class="o">,</span> <span class="s1">&#39;YAHOO.util.Dom&#39;</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
	<span class="o">}:</span> <span class="k">function</span><span class="o">(</span><span class="nx">text</span><span class="o">)</span> <span class="o">{</span><span class="k">throw</span><span class="o">(</span><span class="nx">text</span><span class="o">);};</span>

    <span class="k">var</span> <span class="nx">_that</span> <span class="o">=</span> <span class="o">{</span>

        <span class="c">/* defined below */</span>
        <span class="nx">animate</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;animate&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo/animation.js&#39;</span><span class="o">);},</span>

        <span class="c">/**</span>
<span class="c">         * Removes whitespace-only text node children.</span>
<span class="c">         * @method cleanWhitespace</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">         * @return {Element} Cleaned DOM node for convenience or NULL.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">cleanWhitespace</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>
            <span class="k">var</span> <span class="nx">cld</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span>

            <span class="k">while</span> <span class="o">(</span><span class="nx">cld</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">nextNode</span> <span class="o">=</span> <span class="nx">cld</span><span class="o">.</span><span class="nx">nextSibling</span><span class="o">;</span>
                
                <span class="k">if</span> <span class="o">(</span><span class="nx">_DOC</span><span class="o">.</span><span class="nx">COMMENT_NODE</span> <span class="o">===</span> <span class="nx">cld</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">||</span> <span class="o">(</span><span class="nx">_DOC</span><span class="o">.</span><span class="nx">TEXT_NODE</span> <span class="o">===</span> <span class="nx">cld</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="sr">/\S/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">cld</span><span class="o">.</span><span class="nx">nodeValue</span><span class="o">)))</span> <span class="o">{</span>
                    <span class="nx">node</span><span class="o">.</span><span class="nx">removeChild</span><span class="o">(</span><span class="nx">cld</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="nx">cld</span> <span class="o">=</span> <span class="nx">nextNode</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Positions the second element at the same coords as the first.</span>
<span class="c">         * @method cloneDimensions</span>
<span class="c">         * @param srcElem {Element|String} Required. The element to get position of.</span>
<span class="c">         * @param applyElem {Element|String} Required. The element to set position of.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">cloneDimensions</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">srcElem</span><span class="o">,</span> <span class="nx">applyElem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getRegion</span><span class="o">(</span><span class="nx">srcElem</span><span class="o">),</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">applyElem</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">height</span><span class="o">))</span> <span class="o">{</span> <span class="c">// for YUI &lt; 2.7</span>
<span class="c"></span>                <span class="nx">o</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">bottom</span> <span class="o">-</span> <span class="nx">o</span><span class="o">.</span><span class="nx">top</span><span class="o">;</span>
                <span class="nx">o</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">o</span><span class="o">.</span><span class="nx">right</span> <span class="o">-</span> <span class="nx">o</span><span class="o">.</span><span class="nx">left</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="s1">&#39;left&#39;</span><span class="o">,</span> <span class="nx">o</span><span class="o">.</span><span class="nx">left</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="o">);</span>
            <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="s1">&#39;top&#39;</span><span class="o">,</span> <span class="nx">o</span><span class="o">.</span><span class="nx">top</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="o">);</span>
            <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="s1">&#39;height&#39;</span><span class="o">,</span> <span class="nx">o</span><span class="o">.</span><span class="nx">height</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="o">);</span>
            <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="s1">&#39;width&#39;</span><span class="o">,</span> <span class="nx">o</span><span class="o">.</span><span class="nx">width</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span><span class="o">);</span>

            <span class="c">// debugging tools</span>
<span class="c"></span>            <span class="c">// _YD.setStyle(node, &#39;border&#39;, &#39;red solid 1px&#39;);</span>
<span class="c"></span>    		<span class="c">// alert(node.id + &#39;left: &#39; + o.left + &#39;, top: &#39; + o.top + &#39;, height: &#39; + o.height + &#39;, width: &#39; + o.width);</span>
<span class="c"></span>        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * If possible creates the document element according to the xhtml namespace, otherwise, normally;</span>
<span class="c">         *  failure returns a Function that throws an exception.</span>
<span class="c">         * @method createNode</span>
<span class="c">         * @param tagName {String} Required. Tag name to create.</span>
<span class="c">         * @return {Element} The newly created element.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">createNode</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagName</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">_DOC</span><span class="o">.</span><span class="nx">createElementNS</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">_YD</span><span class="o">.</span><span class="nx">createNode</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagName</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nx">tagName</span> <span class="o">?</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">createElementNS</span><span class="o">(</span><span class="s1">&#39;http://www.w3.org/1999/xhtml&#39;</span><span class="o">,</span> <span class="nx">tagName</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">};</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">_DOC</span><span class="o">.</span><span class="nx">createElement</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">_YD</span><span class="o">.</span><span class="nx">createNode</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagName</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nx">tagName</span> <span class="o">?</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">createElement</span><span class="o">(</span><span class="nx">tagName</span><span class="o">)</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">};</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="nx">_YD</span><span class="o">.</span><span class="nx">createNode</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="k">throw</span> <span class="s1">&#39;createElement is not available.&#39;</span><span class="o">;};</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">createNode</span><span class="o">(</span><span class="nx">tagName</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
        <span class="nx">createTag</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;createTag&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/**</span>
<span class="c">         * Removes a node from the DOM, using a fading animation and clearning all events.</span>
<span class="c">         * @method deleteNode</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to delete.</span>
<span class="c">         * @param func {Function} Optional. The callback function after animation finishes; default is undefined.</span>
<span class="c">         * @param isRemoveListener {Boolean} Optional. True, when you want to purge event listeners from node and children; default is undefined.</span>
<span class="c">         * @param isAnimate {Boolean} Optional. Animated this action.</span>
<span class="c">         * @return {Boolean} Node deleted.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">deleteNode</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">func</span><span class="o">,</span> <span class="nx">isRemoveListener</span><span class="o">,</span> <span class="nx">isAnimate</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">),</span>
                <span class="nx">fn</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isFunction</span><span class="o">(</span><span class="nx">func</span><span class="o">)</span> <span class="o">?</span> <span class="nx">func</span> <span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{};</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span> <span class="o">||</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">hasClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">IS_DELETING</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">false</span><span class="o">;}</span>
            <span class="k">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>

            <span class="c">// remove listeners when YAHOO.util.Event is available, but not required</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(</span><span class="nx">isRemoveListener</span> <span class="o">&amp;&amp;</span> <span class="nx">_YE</span> <span class="o">&amp;&amp;</span> <span class="nx">_YE</span><span class="o">.</span><span class="nx">purgeElement</span><span class="o">)</span> <span class="o">{</span><span class="nx">_YE</span><span class="o">.</span><span class="nx">purgeElement</span><span class="o">(</span><span class="nx">node</span><span class="o">);}</span>

            <span class="c">// animate when YAHOO.util.Anim  is available, but not required</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Anim</span> <span class="o">&amp;&amp;</span> <span class="nx">isAnimate</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">_YD</span><span class="o">.</span><span class="nx">addClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">IS_DELETING</span><span class="o">);</span>
                <span class="nx">_YD</span><span class="o">.</span><span class="nx">animate</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="o">{</span><span class="nx">opacity</span><span class="o">:</span> <span class="o">{</span><span class="nx">from</span><span class="o">:</span> <span class="m">1</span><span class="o">,</span> <span class="nx">to</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">25</span><span class="o">}},</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Easing</span><span class="o">.</span><span class="nx">easeOut</span><span class="o">,</span> <span class="o">[{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;onComplete&#39;</span><span class="o">,</span> <span class="nx">fx</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="nx">parent</span><span class="o">.</span><span class="nx">removeChild</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>
                    <span class="nx">_YD</span><span class="o">.</span><span class="nx">addClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">IS_DELETING</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">fn</span><span class="o">)</span> <span class="o">{</span><span class="nx">fn</span><span class="o">(</span><span class="nx">parent</span><span class="o">);}</span>
                <span class="o">}}]);</span>
            <span class="o">}</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="nx">parent</span><span class="o">.</span><span class="nx">removeChild</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>
                <span class="nx">fn</span><span class="o">(</span><span class="nx">parent</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Navigates on the element through native JavaScript properties or YUI equivalent, as provided by instructions.</span>
<span class="c">         * @method exec</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to search from.</span>
<span class="c">         * @param instructions (String} Required. The &#39;.&#39; delimited navigation instructions.</span>
<span class="c">         * @return {Element} The found node or NULL.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">exec</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">instructions</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">instructions</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>

            <span class="k">var</span> <span class="nx">_s</span> <span class="o">=</span> <span class="nx">instructions</span><span class="o">.</span><span class="nx">split</span><span class="o">(</span><span class="s1">&#39;.&#39;</span><span class="o">);</span>

            <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">_s</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">_s</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>

                    <span class="k">if</span> <span class="o">(</span><span class="nx">_YD</span><span class="o">[</span><span class="nx">task</span><span class="o">])</span> <span class="o">{</span>
                        <span class="nx">node</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">[</span><span class="nx">task</span><span class="o">](</span><span class="nx">node</span><span class="o">);</span>
                    <span class="o">}</span> <span class="c">// todo: support childNodes[]</span>
<span class="c"></span>                    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="nx">node</span><span class="o">[</span><span class="nx">task</span><span class="o">])</span> <span class="o">{</span>
                        <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="o">[</span><span class="nx">task</span><span class="o">];</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="c">// unsupported technique</span>
<span class="c"></span>                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Find and replace the first text (ignores whitespaces), or append a textnode when there is no textnode.</span>
<span class="c">         * @method findFirstText</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">         * @return {Element} The first available text node or null.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">findFirstText</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>

            <span class="c">// this is a text node and not a whitespace, so update it</span>
<span class="c"></span>            <span class="k">if</span> <span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">isTextNode</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">||</span> <span class="sr">/\S/</span><span class="o">.</span><span class="nx">test</span><span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span><span class="o">)))</span> <span class="o">{</span>
				<span class="k">return</span> <span class="nx">node</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="c">// find text node</span>
<span class="c"></span>			<span class="k">else</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">firstText</span> <span class="o">=</span> <span class="kc">null</span><span class="o">,</span>
                    <span class="nx">nextSibling</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">;</span>

                <span class="c">// iterate until nextSibling is null or set to false, indicating we have found a matching node</span>
<span class="c"></span>                <span class="k">while</span> <span class="o">(!</span> <span class="nx">firstText</span> <span class="o">&amp;&amp;</span> <span class="nx">nextSibling</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">firstText</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">findFirstText</span><span class="o">(</span><span class="nx">nextSibling</span><span class="o">);</span>
                    <span class="nx">nextSibling</span> <span class="o">=</span> <span class="nx">nextSibling</span><span class="o">.</span><span class="nx">nextSibling</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="k">return</span> <span class="nx">firstText</span><span class="o">;</span>
			<span class="o">}</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Animates the background color of the element with a color flash.</span>
<span class="c">         * @method flashBackgroundColor</span>
<span class="c">         * @param node {Element} Required. Pointer or string reference to DOM element to animate.</span>
<span class="c">         * @param color {String} Required. The color to animate to.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">flashBackgroundColor</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">color</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">node</span> <span class="o">||</span> <span class="nx">color</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>

            <span class="k">var</span> <span class="nx">attr</span> <span class="o">=</span> <span class="o">{</span><span class="nx">backgroundColor</span><span class="o">:</span> <span class="o">{</span><span class="nx">to</span><span class="o">:</span> <span class="nx">color</span><span class="o">}},</span>
                <span class="nx">anim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">ColorAnim</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">attr</span><span class="o">),</span>
                <span class="nx">oColor</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getBackgroundColor</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>

            <span class="nx">anim</span><span class="o">.</span><span class="nx">onComplete</span><span class="o">.</span><span class="nx">subscribe</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                <span class="nx">setTimeout</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">attr</span> <span class="o">=</span> <span class="o">{</span><span class="nx">backgroundColor</span><span class="o">:</span> <span class="o">{</span><span class="nx">to</span><span class="o">:</span> <span class="nx">oColor</span><span class="o">}},</span>
                        <span class="nx">anim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">ColorAnim</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">attr</span><span class="o">);</span>

                    <span class="nx">anim</span><span class="o">.</span><span class="nx">animate</span><span class="o">();</span>
                <span class="o">},</span> <span class="m">500</span><span class="o">);</span>
            <span class="o">});</span>

            <span class="nx">anim</span><span class="o">.</span><span class="nx">animate</span><span class="o">();</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Determines the background color of an element in Hexidecimal format, will head up the document stack, if transparent.</span>
<span class="c">         * @method getBackgroundColor</span>
<span class="c">         * @param node {Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">         * @return {String} The background color.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getBackgroundColor</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>
            <span class="k">var</span> <span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="s1">&#39;backgroundColor&#39;</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="s1">&#39;transparent&#39;</span> <span class="o">===</span> <span class="nx">backgroundColor</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getBackgroundColor</span><span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">);}</span>
            <span class="k">var</span> <span class="nx">rgb</span> <span class="o">=</span> <span class="nx">backgroundColor</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/rgba?\((.*?)\)/</span><span class="o">,</span> <span class="s1">&#39;$1&#39;</span><span class="o">).</span><span class="nx">split</span><span class="o">(</span><span class="s1">&#39;, &#39;</span><span class="o">);</span>
            <span class="k">return</span> <span class="nb">String</span><span class="o">.</span><span class="nx">RGBtoHex</span><span class="o">(</span><span class="nx">rgb</span><span class="o">[</span><span class="m">0</span><span class="o">],</span> <span class="nx">rgb</span><span class="o">[</span><span class="m">1</span><span class="o">],</span> <span class="nx">rgb</span><span class="o">[</span><span class="m">2</span><span class="o">]);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Retrieves the HTMLBodyElement, x-browser safe.</span>
<span class="c">         * @method getBodyElement</span>
<span class="c">         * @param newDoc {Document} Optional. The document to use.</span>
<span class="c">         * @return {Element} Body DOM node for convenience or NULL.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getBodyElement</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">newDoc</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">body</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="nx">newDoc</span> <span class="o">||</span> <span class="nx">newDoc</span> <span class="o">===</span> <span class="nx">_DOC</span><span class="o">)</span> <span class="o">{</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">ID</span><span class="o">.</span><span class="nx">BODY</span><span class="o">);}</span> <span class="c">// get body by the ID</span>
<span class="c"></span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">body</span><span class="o">)</span> <span class="o">{</span> <span class="c">// find the body the tag</span>
<span class="c"></span>                <span class="k">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">newDoc</span> <span class="o">||</span> <span class="nx">_DOC</span><span class="o">;</span>
                <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="s1">&#39;body&#39;</span><span class="o">)[</span><span class="m">0</span><span class="o">];</span>

                <span class="k">if</span> <span class="o">(!</span> <span class="nx">body</span><span class="o">)</span> <span class="o">{</span> <span class="c">// try find the body on the document</span>
<span class="c"></span>                    <span class="c">//noinspection XHTMLIncompatabilitiesJS</span>
<span class="c"></span>                    <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="o">.</span><span class="nx">body</span> <span class="o">||</span> <span class="nx">doc</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">[</span><span class="m">0</span><span class="o">].</span><span class="nx">childNodes</span><span class="o">[</span><span class="m">1</span><span class="o">];</span>

                    <span class="k">if</span> <span class="o">(!</span> <span class="nx">body</span><span class="o">)</span> <span class="o">{</span> <span class="c">// No body, try appending to document</span>
<span class="c"></span>                        <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="nx">body</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Fetchs the childNode of the node, whilst ignoring whitespaces.</span>
<span class="c">         * @method getChildNode</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">         * @param i {Number} Required. The index of the node to get;</span>
<span class="c">         * @return {Element} The pointer to the found DOM node or NULL.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getChildNode</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="m">0</span><span class="o">,</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>

            <span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getFirstChildBy</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">i</span> <span class="o">===</span> <span class="nx">j</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
                <span class="nx">j</span> <span class="o">+=</span> <span class="m">1</span><span class="o">;</span>
            <span class="o">});</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Find the common ancestor shared by two elements, or NULL otherwise.</span>
<span class="c">         * @method getCommonAncestor</span>
<span class="c">         * @param elem1 {Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">         * @param elem1 {Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">         * @return {Element} The desired node or null.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getCommonAncestor</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem1</span><span class="o">,</span> <span class="nx">elem2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node1</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem1</span><span class="o">),</span>
                <span class="nx">node2</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem2</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">node1</span> <span class="o">&amp;&amp;</span> <span class="nx">node2</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span> <span class="c">// missing parameter, fail</span>
<span class="c"></span>            <span class="nx">node1</span> <span class="o">=</span> <span class="nx">node1</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>

            <span class="c">// iterate up the DOM tree</span>
<span class="c"></span>            <span class="k">while</span> <span class="o">(</span><span class="nx">node1</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">isAncestor</span><span class="o">(</span><span class="nx">node1</span><span class="o">,</span> <span class="nx">node2</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="nx">node1</span><span class="o">;}</span>
                <span class="nx">node1</span> <span class="o">=</span> <span class="nx">node1</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">getContentAsFloat</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;getContentAsFloat&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">getContentAsInteger</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;getContentAsInteger&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">getContentAsString</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;getContentAsString&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/**</span>
<span class="c">         * Returns the left and top scroll value of the document.</span>
<span class="c">         * @method getDocumentScroll</span>
<span class="c">         * @param doc {HTMLDocument} Optional. The document to evaluate.</span>
<span class="c">         * @return {Object} An object where left/top (Number) are the values the document is scrolled to.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getDocumentScroll</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">doc</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">{</span><span class="nx">left</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getDocumentScrollLeft</span><span class="o">(</span><span class="nx">doc</span><span class="o">),</span> <span class="nx">top</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getDocumentScrollTop</span><span class="o">(</span><span class="nx">doc</span><span class="o">)};</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Returns the height and width of the document.</span>
<span class="c">         * @method getDocumentSize</span>
<span class="c">         * @param doc {HTMLDocument} Optional. The document to evaluate.</span>
<span class="c">         * @return {Object} An object where height/width (Number) are the actual height/width of document (which includes the body and its margin).</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getDocumentSize</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">doc</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">{</span><span class="nx">height</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getDocumentHeight</span><span class="o">(</span><span class="nx">doc</span><span class="o">),</span> <span class="nx">width</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getDocumentWidth</span><span class="o">(</span><span class="nx">doc</span><span class="o">)};</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
		<span class="nx">getElementsByTagName</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;getElementsByTagName&#39;</span><span class="o">,</span> <span class="s1">&#39;native.ext/array.js&#39;</span><span class="o">);},</span>

		<span class="c">/**</span>
<span class="c">		 * Returns the first childnode of the node with tag name and class name.</span>
<span class="c">		 * @method getFirstChildByTagAndClass</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">		 * @param tagName {String} Optional. The DOM node tag name to limit by.</span>
<span class="c">		 * @param className {String} Optional. The DOM node attribute class name to limit by.</span>
<span class="c">		 * @return {Element} The first matching element or null.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">getFirstChildByTagAndClass</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">tagName</span><span class="o">,</span> <span class="nx">className</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>

			<span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">tagName</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isString</span><span class="o">(</span><span class="nx">className</span><span class="o">)))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>

			<span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getFirstChildBy</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">var</span> <span class="nx">tn</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getTagName</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>
				<span class="k">return</span> <span class="o">(</span><span class="nx">tn</span> <span class="o">===</span> <span class="nx">tagName</span> <span class="o">&amp;&amp;</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">hasClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">className</span><span class="o">));</span>
			<span class="o">});</span>
		<span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Retrieves the first text nodes value.</span>
<span class="c">         * @method getFirstText</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">         * @return {String} The value of the first text node.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getFirstText</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">findFirstText</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">;}</span>
            <span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">isTextNode</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">?</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
        <span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Returns an image object with src, useful for image caching.</span>
<span class="c">		 * @method getImage</span>
<span class="c">		 * @param src {String} Required. The location of the image.</span>
<span class="c">		 * @return {Image} A Javascript Image Object with the src set.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">getImage</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">src</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Image</span><span class="o">();</span>
			<span class="nx">img</span><span class="o">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">src</span><span class="o">;</span>
			<span class="k">return</span> <span class="nx">img</span><span class="o">;</span>
		<span class="o">},</span>

		<span class="c">/*</span>
<span class="c">		 * Finds element&#39;s absolute position.</span>
<span class="c">		 * @method getPos</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">		 * @return {Object} The {x:posX, y:posY} of DOM node.</span>
<span class="c">		 * @static</span>
<span class="c">		 *//*</span>
<span class="c">		getPos: function(elem) {</span>
<span class="c">			var node = $(elem),</span>
<span class="c">				curleft = 0, curtop = 0;</span>
<span class="c"></span>
<span class="c">			if (node &amp;&amp; node.offsetParent) {</span>
<span class="c">				curleft = node.offsetLeft;</span>
<span class="c">				curtop = node.offsetTop;</span>
<span class="c"></span>
<span class="c">				while (node.offsetParent) {</span>
<span class="c">					node = node.offsetParent;</span>
<span class="c">					curleft += node.offsetLeft;</span>
<span class="c">					curtop += node.offsetTop;</span>
<span class="c">				}</span>
<span class="c">			}</span>
<span class="c"></span>
<span class="c">			return {x:curleft, y:curtop};</span>
<span class="c">		},*/</span>

        <span class="c">/**</span>
<span class="c">         * Safe method for fetching the tagName of a node; also converts to lower-case.</span>
<span class="c">         * @method getTagName</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">         * @return {String} The tagName or an emtpy string.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getTagName</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="k">return</span> <span class="nx">node</span> <span class="o">?</span> <span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">node</span><span class="o">.</span><span class="nx">tagName</span><span class="o">).</span><span class="nx">toLowerCase</span><span class="o">()</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Returns the current height and width of the viewport.</span>
<span class="c">         * @method getViewport</span>
<span class="c">         * @return {Object} An object where height/width (Number) are the current viewable area of the page (excludes scrollbars).</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">getViewport</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">doc</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">{</span><span class="nx">height</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getViewportHeight</span><span class="o">(</span><span class="nx">doc</span><span class="o">),</span> <span class="nx">width</span><span class="o">:</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getViewportWidth</span><span class="o">(</span><span class="nx">doc</span><span class="o">)};</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
        <span class="nx">hide</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;hide&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

		<span class="c">/*</span>
<span class="c">		 * X-browser importNode function to insert.</span>
<span class="c">		 * @method _importNode</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to activate.</span>
<span class="c">		 * @param allChildren {Boolean} Required. Set to true, when you want to copy the children nodes as well.</span>
<span class="c">		 * @static</span>
<span class="c">		 * @deprecated Note: keeping around, as I might one day want to use it again</span>
<span class="c">		 *</span>
<span class="c">		 * Example:</span>
<span class="c">		 *  var newNode = null, importedNode = null;</span>
<span class="c">		 *</span>
<span class="c">		 *  newNode = xhrResponse.responseXML.getElementsByTagName (&#39;title&#39;)[0].childNodes[0];</span>
<span class="c">		 *  if (newNode.nodeType != document.ELEMENT_NODE) {newNode = newNode.nextSibling;}</span>
<span class="c">		 *  if (newNode) {</span>
<span class="c">		 *  importedNode = document._importNode(newNode, true);</span>
<span class="c">		 *  document.getElementById(&#39;divTitleContainer&#39;).appendChild(importedNode);</span>
<span class="c">		 *  if (!document.importNode) {</span>
<span class="c">		 *     document.getElementById(&#39;divTitleContainer&#39;).innerHTML = document.getElementById(&#39;divTitleContainer&#39;).innerHTML;</span>
<span class="c">		 *  }</span>
<span class="c">		 *  }</span>
<span class="c">		 *//*</span>
<span class="c">		_importNode: function(elem, allChildren) {</span>
<span class="c">			var node = YAHOO.util.$(elem);</span>
<span class="c"></span>
<span class="c">			switch (node ? null : node.nodeType) {</span>
<span class="c">				case document.ELEMENT_NODE:</span>
<span class="c">					var newNode = document.createElement(node.nodeName);</span>
<span class="c"></span>
<span class="c">					// does the node have any attributes to add?</span>
<span class="c">					if (node.attributes &amp;&amp; node.getAttribute &amp;&amp; newNode.setAttribute &amp;&amp; 0 &lt; node.attributes.length) {</span>
<span class="c">						Mint.batch(node.attributes, function(n) {</span>
<span class="c">							if (n &amp;&amp; Object.is(n) &amp;&amp; node.getAttribute(n.nodeName)) {</span>
<span class="c">								newNode.setAttribute(n.nodeName, node.getAttribute(n.nodeName));</span>
<span class="c">							}</span>
<span class="c">						});</span>
<span class="c">					}</span>
<span class="c"></span>
<span class="c">					// are we going after children too, and does the node have any?</span>
<span class="c">					if (allChildren &amp;&amp; node.childNodes &amp;&amp; 0 &lt; node.childNodes.length) {</span>
<span class="c">						Mint.batch(node.childNodes, function(n) {</span>
<span class="c">							newNode.appendChild(document._importNode(n, allChildren));</span>
<span class="c">						});</span>
<span class="c">					}</span>
<span class="c"></span>
<span class="c">					return newNode;</span>
<span class="c"></span>
<span class="c">				case document.TEXT_NODE:</span>
<span class="c">				case document.CDATA_SECTION_NODE:</span>
<span class="c">				case document.COMMENT_NODE:</span>
<span class="c">					return document.createTextNode(node.nodeValue);</span>
<span class="c"></span>
<span class="c">				default:</span>
<span class="c">					return null;</span>
<span class="c">			}</span>
<span class="c">		},*/</span>

        <span class="c">/**</span>
<span class="c">         * Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy; this is different from YUI method,</span>
<span class="c">         * because it takes no shortcuts and works right all the time.</span>
<span class="c">         * @method isAncestorOf</span>
<span class="c">         * @param ancestor {String | HTMLElement} Required. The possible ancestor.</span>
<span class="c">         * @param decendant {String | HTMLElement} Required. The possible decendant.</span>
<span class="c">         * @return {Boolean} Is ancestor of decendant.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isAncestorOf</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">ancestor</span><span class="o">,</span> <span class="nx">decendant</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">haystack</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">get</span><span class="o">(</span><span class="nx">ancestor</span><span class="o">),</span>
                <span class="nx">needle</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">get</span><span class="o">(</span><span class="nx">decendant</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">haystack</span> <span class="o">&amp;&amp;</span> <span class="nx">needle</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>

            <span class="k">while</span> <span class="o">(</span><span class="nx">needle</span> <span class="o">&amp;&amp;</span> <span class="nx">needle</span> <span class="o">!==</span> <span class="nx">_DOC</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="nx">needle</span> <span class="o">===</span> <span class="nx">ancestor</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
                <span class="nx">needle</span> <span class="o">=</span> <span class="nx">needle</span><span class="o">.</span><span class="nx">parentNode</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
        <span class="nx">isTagName</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;isTagName&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/* defined below */</span>
        <span class="nx">isElementType</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;isElementType&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

        <span class="c">/**</span>
<span class="c">         * Tests if the node is one of 3 text types.</span>
<span class="c">         * @method isTextNode</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">         * @return {Boolean} True, if the elem is a comment, text, or cdata node.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">isTextNode</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">),</span>
                <span class="nx">isValidNode</span> <span class="o">=</span> <span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span><span class="o">;</span> <span class="c">// not calling isNodeOfType because this is faster</span>
<span class="c"></span>
            <span class="k">return</span> <span class="nx">isValidNode</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">CDATA_SECTION_NODE</span> <span class="o">||</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">COMMENT_NODE</span> <span class="o">||</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">_DOC</span><span class="o">.</span><span class="nx">TEXT_NODE</span><span class="o">);</span>
        <span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Remove childNodes from node, should be used instead of element.innerHTML = &#39;&#39; as this is xhtml compliant.</span>
<span class="c">         * @method removeChildNodes</span>
<span class="c">         * @param elem {String|Element} Required. Pointer or string reference to DOM element to clear.</span>
<span class="c">         * @return {Number} The number of removed nodes.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">removeChildNodes</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
                <span class="nx">val</span> <span class="o">=</span> <span class="nx">node</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">hasChildNodes</span><span class="o">())</span> <span class="o">{</span>
                    <span class="nx">node</span><span class="o">.</span><span class="nx">removeChild</span><span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="nx">val</span><span class="o">;</span>
        <span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Replaces all children of elem as a textnode of text.</span>
<span class="c">		 * @method replace</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to replace content of.</span>
<span class="c">		 * @param text {String} Required. The innerHTML value equivalent to replace content with.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">replace</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">text</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>
            <span class="c">//noinspection InnerHTMLJS</span>
<span class="c"></span>            <span class="nx">node</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">text</span><span class="o">;</span>
		<span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Scrolls to a given position, animating using a fractal algorithm.</span>
<span class="c">         * @method scrollTo</span>
<span class="c">         * @param x {Number} Required. The x position to scroll to.</span>
<span class="c">         * @param y {Number} Required. The y position to scroll to.</span>
<span class="c">         * @param n {Number} Optional. The number of steps to take; default is 5.</span>
<span class="c">         * @param ms {Number} Optional. The length of time to animate.</span>
<span class="c">         * @param ease {Function} Optional. The easing function.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">scrollTo</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span> <span class="nx">ms</span><span class="o">,</span> <span class="nx">ease</span><span class="o">)</span> <span class="o">{</span>
            <span class="c">//noinspection UnnecessaryLocalVariableJS</span>
<span class="c"></span>            <span class="k">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getDocumentScroll</span><span class="o">(),</span>
                <span class="nx">steps</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">||</span> <span class="m">5</span><span class="o">,</span>
                <span class="nx">i</span> <span class="o">=</span> <span class="nx">steps</span><span class="o">,</span>
                <span class="nx">time</span> <span class="o">=</span> <span class="nx">ms</span> <span class="o">||</span> <span class="m">250</span><span class="o">,</span>
                <span class="nx">xdiff</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">-</span> <span class="nx">offset</span><span class="o">.</span><span class="nx">left</span><span class="o">,</span>
                <span class="nx">ydiff</span> <span class="o">=</span> <span class="nx">y</span> <span class="o">-</span> <span class="nx">offset</span><span class="o">.</span><span class="nx">top</span><span class="o">,</span>
                <span class="nx">fx</span> <span class="o">=</span> <span class="nx">ease</span> <span class="o">?</span> <span class="nx">ease</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nb">Math</span><span class="o">.</span><span class="nx">pow</span><span class="o">(</span><span class="m">2</span><span class="o">,</span> <span class="nx">i</span><span class="o">);</span> <span class="c">// easing out; fast then slow</span>
<span class="c"></span>                <span class="o">};</span>

            <span class="k">if</span> <span class="o">(</span><span class="nx">offset</span><span class="o">.</span><span class="nx">left</span> <span class="o">===</span> <span class="nx">x</span> <span class="o">&amp;&amp;</span> <span class="nx">offset</span><span class="o">.</span><span class="nx">top</span> <span class="o">===</span> <span class="nx">y</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span> <span class="c">// no need to scroll</span>
<span class="c"></span>
            <span class="nx">clearInterval</span><span class="o">(</span><span class="nx">_scrollIntervalId</span><span class="o">);</span>
            <span class="nx">_scrollIntervalId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
                <span class="nx">i</span> <span class="o">-=</span> <span class="m">1</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">divisor</span> <span class="o">=</span> <span class="nx">fx</span><span class="o">(</span><span class="nx">i</span><span class="o">,</span> <span class="nx">steps</span><span class="o">);</span>

                <span class="nb">window</span><span class="o">.</span><span class="nx">scroll</span><span class="o">(</span><span class="nx">xdiff</span> <span class="sr">/ divisor + offset.left, ydiff /</span> <span class="nx">divisor</span> <span class="o">+</span> <span class="nx">offset</span><span class="o">.</span><span class="nx">top</span><span class="o">);</span>

                <span class="c">// last step</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="m">0</span> <span class="o">===</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">clearInterval</span><span class="o">(</span><span class="nx">_scrollIntervalId</span><span class="o">);</span>
                    <span class="nb">window</span><span class="o">.</span><span class="nx">scroll</span><span class="o">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">},</span> <span class="nx">time</span> <span class="o">/</span> <span class="nx">steps</span><span class="o">);</span>
        <span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Scroll to the top of the page using the native window.scroll method and 0,0 coordinates.</span>
<span class="c">		 * @method scrollTop</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">scrollTop</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
			<span class="nx">_that</span><span class="o">.</span><span class="nx">scrollTo</span><span class="o">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">);</span>
		<span class="o">},</span>

        <span class="c">/**</span>
<span class="c">         * Find and replace the first text, or append a textnode when there is no textnode.</span>
<span class="c">         * @method setFirstText</span>
<span class="c">         * @param elem {String|Element} Required. A pointer or string reference to DOM element to set first text of.</span>
<span class="c">         * @param text {String} Required. The text value to set.</span>
<span class="c">         * @static</span>
<span class="c">         */</span>
        <span class="nx">setFirstText</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">text</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span> <span class="o">||</span> <span class="o">!</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isDefined</span><span class="o">(</span><span class="nx">text</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span><span class="o">;}</span>
            <span class="k">var</span> <span class="nx">tn</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">findFirstText</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="nx">tn</span><span class="o">)</span> <span class="o">{</span><span class="nx">tn</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">=</span> <span class="nx">text</span><span class="o">;}</span>
        <span class="o">},</span>

        <span class="c">/* defined below */</span>
        <span class="nx">show</span><span class="o">:</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span><span class="nx">_throwNotImplemented</span><span class="o">(</span><span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="s1">&#39;yahoo.ext/lang.js&#39;</span><span class="o">);},</span>

		<span class="c">/**</span>
<span class="c">		 * Toggles the className for the provided element as a result of the boolean.</span>
<span class="c">		 * @method toggleClass</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element apply class to.</span>
<span class="c">		 * @param className {String} Required. The class name to apply.</span>
<span class="c">		 * @param b {Boolean} Optional. Force class instead of toggle.</span>
<span class="c">		 */</span>
		<span class="nx">toggleClass</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">className</span><span class="o">,</span> <span class="nx">b</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">var</span> <span class="nx">bool</span> <span class="o">=</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">isUndefined</span><span class="o">(</span><span class="nx">b</span><span class="o">)</span> <span class="o">?</span> <span class="o">!</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">hasClass</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">className</span><span class="o">)</span> <span class="o">:</span> <span class="nx">b</span><span class="o">;</span>
			<span class="nx">_YD</span><span class="o">[</span><span class="nx">bool</span> <span class="o">?</span> <span class="s1">&#39;addClass&#39;</span> <span class="o">:</span> <span class="s1">&#39;removeClass&#39;</span><span class="o">](</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">className</span><span class="o">);</span>
		<span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Hides displayed elements and shows non-displayed element.</span>
<span class="c">		 * @method toggleDisplay</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to style.</span>
<span class="c">		 * @param b {Boolean} Optional. Force display instead of toggle.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">toggleDisplay</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">b</span><span class="o">)</span> <span class="o">{</span>
			<span class="nx">_YD</span><span class="o">.</span><span class="nx">toggleClass</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDE</span><span class="o">,</span> <span class="o">!</span> <span class="nx">b</span><span class="o">);</span>
		<span class="o">},</span>

		<span class="c">/**</span>
<span class="c">		 * Toggles the visibility of element.</span>
<span class="c">		 * @method visibility</span>
<span class="c">		 * @param elem {String|Element} Required. Pointer or string reference to DOM element to toggle style of.</span>
<span class="c">		 * @param b {Boolean} Optional. Force visible instead of toggle.</span>
<span class="c">		 * @static</span>
<span class="c">		 */</span>
		<span class="nx">toggleVisibility</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">b</span><span class="o">)</span> <span class="o">{</span>
			<span class="nx">_YD</span><span class="o">.</span><span class="nx">toggleClass</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDDEN</span><span class="o">,</span> <span class="o">!</span> <span class="nx">b</span><span class="o">);</span>
		<span class="o">}</span>
    <span class="o">};</span>

    <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YD</span><span class="o">,</span> <span class="nx">_that</span><span class="o">);</span>

    <span class="c">// backwards compatibility for &#39;getRegion&#39;, height/width added in YUI 2.7</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">bodyRegion</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getRegion</span><span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">getBodyElement</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(!</span> <span class="nx">bodyRegion</span><span class="o">.</span><span class="nx">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">_YD</span><span class="o">.</span><span class="nx">$old_getRegion</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getRegion</span><span class="o">;</span>
        <span class="nx">_YD</span><span class="o">.</span><span class="nx">getRegion</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">var</span> <span class="nx">dim</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">$old_getRegion</span><span class="o">.</span><span class="nx">apply</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">arguments</span><span class="o">);</span>
            <span class="nx">dim</span><span class="o">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">dim</span><span class="o">.</span><span class="nx">bottom</span> <span class="o">-</span> <span class="nx">dim</span><span class="o">.</span><span class="nx">top</span><span class="o">;</span>
            <span class="nx">dim</span><span class="o">.</span><span class="nx">width</span> <span class="o">=</span> <span class="nx">dim</span><span class="o">.</span><span class="nx">right</span> <span class="o">-</span> <span class="nx">dim</span><span class="o">.</span><span class="nx">left</span><span class="o">;</span>
            <span class="k">return</span> <span class="nx">dim</span><span class="o">;</span>
        <span class="o">};</span>
    <span class="o">}</span>

    <span class="c">// YAHOO.lang extensions are included</span>
<span class="c"></span>    <span class="k">if</span> <span class="o">(</span><span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">_thatIfLangExtended</span> <span class="o">=</span> <span class="o">{</span>

            <span class="c">/**</span>
<span class="c">             * Creates and returns an html element and adds attributes from the hash.</span>
<span class="c">             * @method createTag</span>
<span class="c">             * @param tagName {String} Required. Tag name to create.</span>
<span class="c">             * @param hash {Object} Optional. The hashtable of attributes, styles, and classes; defaults is empty object.</span>
<span class="c">             * @return {Element} The newly created element; returns null otherwise.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">createTag</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagName</span><span class="o">,</span> <span class="nx">hash</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">createNode</span><span class="o">(</span><span class="nx">tagName</span><span class="o">);</span>

                <span class="c">// iterate through the possible attributes</span>
<span class="c"></span>                <span class="nx">_YL</span><span class="o">.</span><span class="nx">forEach</span><span class="o">(</span><span class="nx">hash</span> <span class="o">||</span> <span class="o">{},</span> <span class="k">function</span><span class="o">(</span><span class="nx">v</span><span class="o">,</span> <span class="nx">k</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nx">switch</span> <span class="o">(</span><span class="nx">k</span><span class="o">.</span><span class="nx">toLowerCase</span><span class="o">())</span> <span class="o">{</span>
                        <span class="nx">case</span> <span class="s1">&#39;classname&#39;</span><span class="o">:</span>
                        <span class="nx">case</span> <span class="s1">&#39;class&#39;</span><span class="o">:</span>
                        <span class="nx">case</span> <span class="s1">&#39;cls&#39;</span><span class="o">:</span>
                            <span class="nx">_YD</span><span class="o">.</span><span class="nx">addClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">v</span><span class="o">);</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;cellpadding&#39;</span><span class="o">:</span>
                            <span class="nx">node</span><span class="o">.</span><span class="nx">cellPadding</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;cellspacing&#39;</span><span class="o">:</span>
                            <span class="nx">node</span><span class="o">.</span><span class="nx">cellSpacing</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;colspan&#39;</span><span class="o">:</span>
                            <span class="nx">node</span><span class="o">.</span><span class="nx">colSpan</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;src&#39;</span><span class="o">:</span>
                        <span class="nx">case</span> <span class="s1">&#39;checked&#39;</span><span class="o">:</span>
                        <span class="nx">case</span> <span class="s1">&#39;disabled&#39;</span><span class="o">:</span>
                            <span class="c">// Capitolization is important in your hashtable for these to work properly in all browsers</span>
<span class="c"></span>                            <span class="nx">node</span><span class="o">[</span><span class="nx">k</span><span class="o">]</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;rowspan&#39;</span><span class="o">:</span>
                            <span class="nx">node</span><span class="o">.</span><span class="nx">rowSpan</span> <span class="o">=</span> <span class="nx">v</span><span class="o">;</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;style&#39;</span><span class="o">:</span>
                            <span class="c">// iterate on the styles and set them</span>
<span class="c"></span>                            <span class="nx">_YL</span><span class="o">.</span><span class="nx">forEach</span><span class="o">(</span><span class="nx">v</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">v</span><span class="o">,</span> <span class="nx">k</span><span class="o">)</span> <span class="o">{</span>
                                <span class="nx">_YD</span><span class="o">.</span><span class="nx">setStyle</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">k</span><span class="o">,</span> <span class="nx">v</span><span class="o">);</span>
                            <span class="o">});</span>
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">case</span> <span class="s1">&#39;innerhtml&#39;</span><span class="o">:</span>
                        <span class="nx">case</span> <span class="s1">&#39;text&#39;</span><span class="o">:</span>
                            <span class="k">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="o">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">v</span><span class="o">);</span>

                            <span class="k">if</span> <span class="o">(</span><span class="nx">text</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="sr">/&lt;.*?&gt;/</span><span class="o">)</span> <span class="o">||</span> <span class="nx">text</span><span class="o">.</span><span class="nx">match</span><span class="o">(</span><span class="sr">/&amp;.*?;/</span><span class="o">))</span> <span class="o">{</span>
	                            <span class="nx">_YD</span><span class="o">.</span><span class="nx">replace</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">text</span><span class="o">);</span>
                            <span class="o">}</span>
                            <span class="k">else</span> <span class="o">{</span>
	                            <span class="nx">node</span><span class="o">.</span><span class="nx">appendChild</span><span class="o">(</span><span class="nx">_DOC</span><span class="o">.</span><span class="nx">createTextNode</span><span class="o">(</span><span class="nx">text</span><span class="o">));</span>
                            <span class="o">}</span>
                                
                            <span class="k">break</span><span class="o">;</span>

                        <span class="nx">default</span><span class="o">:</span>
                            <span class="nx">node</span><span class="o">.</span><span class="nx">setAttribute</span><span class="o">(</span><span class="nx">k</span><span class="o">,</span> <span class="nx">v</span><span class="o">);</span>
                            <span class="k">break</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">});</span>

                <span class="k">return</span> <span class="nx">node</span> <span class="o">||</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Returns the elements content as a float.</span>
<span class="c">             * @method getContentAsFloat</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">             * @return {String} The innerHTML of the node as a float.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">getContentAsFloat</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nb">parseFloat</span><span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">getContentAsString</span><span class="o">(</span><span class="nx">elem</span><span class="o">));</span>
            <span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Returns the elements content as a integer.</span>
<span class="c">             * @method getContentAsInteger</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">             * @return {String} The innerHTML of the node as a integer.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">getContentAsInteger</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nb">parseInt</span><span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">getContentAsString</span><span class="o">(</span><span class="nx">elem</span><span class="o">),</span> <span class="m">10</span><span class="o">);</span>
            <span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Returns the elements content.</span>
<span class="c">             * @method getContentAsString</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">             * @return {String} The innerHTML of the node.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">getContentAsString</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">/*</span>
<span class="c">                 * Returns the elements content of nodes as a string.</span>
<span class="c">                 */</span>
                <span class="k">var</span> <span class="nx">_getContentAsString</span> <span class="o">=</span> <span class="nb">window</span><span class="o">.</span><span class="nx">XMLSerializer</span> <span class="o">?</span> <span class="k">function</span><span class="o">(</span><span class="nx">nodes</span><span class="o">)</span> <span class="o">{</span> <span class="c">// mozilla</span>
<span class="c"></span>                    <span class="k">var</span> <span class="nx">xmlSerializer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLSerializer</span><span class="o">(),</span>
                        <span class="nx">sb</span> <span class="o">=</span> <span class="o">[];</span>

                    <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">nodes</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c">//noinspection NestedConditionalExpressionJS</span>
<span class="c"></span>                        <span class="nx">sb</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="nx">$doc</span><span class="o">.</span><span class="nx">CDATA_SECTION_NODE</span> <span class="o">===</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span><span class="o">)</span> <span class="o">?</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">:</span> <span class="nx">xmlSerializer</span><span class="o">.</span><span class="nx">serializeToString</span><span class="o">(</span><span class="nx">node</span><span class="o">);</span>
                    <span class="o">});</span>

                    <span class="k">return</span> <span class="nx">sb</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/(\&lt;textarea[^\&lt;]*?)\/\&gt;/</span><span class="o">,</span> <span class="s1">&#39;$1&gt;&amp;nbsp;&lt;/textarea&gt;&#39;</span><span class="o">);</span>
                <span class="o">}</span> <span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">nodes</span><span class="o">)</span> <span class="o">{</span> <span class="c">// IE</span>
<span class="c"></span>                    <span class="k">var</span> <span class="nx">sb</span> <span class="o">=</span> <span class="o">[];</span>

                    <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">nodes</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c">//noinspection NestedConditionalExpressionJS,InnerHTMLJS</span>
<span class="c"></span>                        <span class="nx">sb</span><span class="o">[</span><span class="nx">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">isTextNode</span><span class="o">(</span><span class="nx">node</span><span class="o">))</span> <span class="o">?</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeValue</span> <span class="o">:</span> <span class="nx">node</span><span class="o">.</span><span class="nx">xml</span> <span class="o">||</span> <span class="nx">node</span><span class="o">.</span><span class="nx">innerHTML</span><span class="o">;</span>
                    <span class="o">});</span>

                    <span class="k">return</span> <span class="nx">sb</span><span class="o">.</span><span class="nx">join</span><span class="o">(</span><span class="s1">&#39;&#39;</span><span class="o">).</span><span class="nx">replace</span><span class="o">(</span><span class="sr">/\/?\&gt;\&lt;\/input\&gt;/gi</span><span class="o">,</span> <span class="s1">&#39;\/&gt;&#39;</span><span class="o">);</span> <span class="c">// IE tends to insert a bogus &quot;&lt;/input&gt;&quot; element instead of understanding empty closure &quot;&lt;input ... /&gt;&quot;</span>
<span class="c"></span>                <span class="o">};</span>

                <span class="nx">_YD</span><span class="o">.</span><span class="nx">getContentAsString</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">var</span> <span class="nx">parentNode</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">get</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>

                    <span class="k">if</span> <span class="o">(!</span> <span class="nx">parentNode</span> <span class="o">||</span> <span class="o">!</span> <span class="nx">parentNode</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">;}</span>

                    <span class="k">if</span> <span class="o">(</span><span class="nx">_YD</span><span class="o">.</span><span class="nx">isTextNode</span><span class="o">(</span><span class="nx">parentNode</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">nodeType</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="m">1</span> <span class="o">===</span> <span class="nx">parentNode</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nx">parentNode</span><span class="o">.</span><span class="nx">firstChild</span><span class="o">.</span><span class="nx">nodeValue</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nx">_getContentAsString</span><span class="o">(</span><span class="nx">parentNode</span><span class="o">.</span><span class="nx">childNodes</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">};</span>

                <span class="k">return</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getContentAsString</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
            <span class="o">},</span>

			<span class="c">/**</span>
<span class="c">			 * Hides any number of elements using class &#39;hide&#39;; doesn&#39;t attempt to correct &quot;display:none&quot;, designers should use a class to apply display instead.</span>
<span class="c">			 * @method hide</span>
<span class="c">			 * @param arg1 {String|Element} Required. Pointer or string reference to DOM element to style.</span>
<span class="c">			 * @param argX {String|Element} Optional. Additional pointers or string references to DOM element to style.</span>
<span class="c">			 * @static</span>
<span class="c">			 */</span>
			<span class="nx">hide</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">arg1</span><span class="o">,</span> <span class="nx">argX</span><span class="o">)</span> <span class="o">{</span>
				<span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
					<span class="nx">_YD</span><span class="o">.</span><span class="nx">addClass</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDE</span><span class="o">);</span>
				<span class="o">});</span>
			<span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Tests if the node has the same tag name as those included in arguments 2+.</span>
<span class="c">             * @method isTagName</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">             * @param arg1 {String} Required. A node name to compare with.</span>
<span class="c">             * @param argX {String} Optional. Additional node names to compare with.</span>
<span class="c">             * @return {Boolean} True when the DOM node attribute nodeName is included in the arguments.</span>
<span class="c">             * @static</span>
<span class="c">             *</span>
<span class="c">             * Example:</span>
<span class="c">             * isTagName(domNode, &#39;div&#39;, &#39;input&#39;, &#39;div&#39;);</span>
<span class="c">             */</span>
            <span class="nx">isTagName</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">arg1</span><span class="o">,</span> <span class="nx">argX</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">tagName</span> <span class="o">=</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">getTagName</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>                
                <span class="k">if</span> <span class="o">(!</span> <span class="nx">tagName</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">false</span><span class="o">;}</span>

                <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagname</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">tagName</span> <span class="o">===</span> <span class="nx">tagname</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
                <span class="o">});</span>
            <span class="o">},</span>

            <span class="c">/**</span>
<span class="c">             * Tests if the node has the same type as those included in arguments 2+.</span>
<span class="c">             * @method isElementType</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to evaluate.</span>
<span class="c">             * @param arg1 {Number} Required. A node type to compare with.</span>
<span class="c">             * @param argX {Number} Optional. Additional node types to compare with.</span>
<span class="c">             * @return {Boolean} True when the DOM node attribute nodeType is included in the arguments.</span>
<span class="c">             * @static</span>
<span class="c">             *</span>
<span class="c">             * Example:</span>
<span class="c">             * isElementType(domNode, document.ELEMENT_NODE, document.ATTRIBUTE_NODE, document.TEXT_NODE);</span>
<span class="c">             */</span>
            <span class="nx">isElementType</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">arg1</span><span class="o">,</span> <span class="nx">argX</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(!</span> <span class="o">(</span><span class="nx">node</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span><span class="o">))</span> <span class="o">{</span><span class="k">return</span> <span class="kc">false</span><span class="o">;}</span>

                <span class="k">return</span> <span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">nodetype</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">nodeType</span> <span class="o">===</span> <span class="nx">nodetype</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">true</span><span class="o">;}</span>
                <span class="o">});</span>
            <span class="o">},</span>

			<span class="c">/**</span>
<span class="c">			 * Show any number of elements removing class &#39;hide&#39;.</span>
<span class="c">			 * @method show</span>
<span class="c">			 * @param arg1 {String|Element} Required. Pointer or string reference to DOM element to style.</span>
<span class="c">			 * @param argX {String|Element} Optional. Additional pointers or string references to DOM element to style.</span>
<span class="c">			 * @static</span>
<span class="c">			 */</span>
			<span class="nx">show</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">arg1</span><span class="o">,</span> <span class="nx">argX</span><span class="o">)</span> <span class="o">{</span>
				<span class="nx">_YL</span><span class="o">.</span><span class="nx">arrayWalk</span><span class="o">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="k">function</span><span class="o">(</span><span class="nx">node</span><span class="o">)</span> <span class="o">{</span>
					<span class="nx">_YD</span><span class="o">.</span><span class="nx">removeClass</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDE</span><span class="o">);</span>
				<span class="o">});</span>
			<span class="o">}</span>
		<span class="o">};</span>
		
		<span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YD</span><span class="o">,</span> <span class="nx">_thatIfLangExtended</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
	<span class="o">}</span>

    <span class="c">// extend helper methods requiring yahoo/animation.js</span>
<span class="c"></span>    <span class="k">if</span> <span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Anim</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">var</span> <span class="nx">_thatIfAnim</span> <span class="o">=</span> <span class="o">{</span>

            <span class="c">/**</span>
<span class="c">             * Removes a node from the DOM, using a fading animation and clearning all events.</span>
<span class="c">             * @method animate</span>
<span class="c">             * @param elem {String|Element} Required. Pointer or string reference to DOM element to delete.</span>
<span class="c">             * @param obj {Object} Optional. The animation object data; default will fade opacity from 1 to 0.25.</span>
<span class="c">             * @param dur {Number} Optional. The duration of the animation; default is 0.5s.</span>
<span class="c">             * @param ease {Object} Optional. The easing method; default is easeOut.</span>
<span class="c">             * @param functions {Array} Optional. A collection of animation event callback functions {id: the event, fx: callback function}.</span>
<span class="c">             * @return {Object} YAHOO animation object.</span>
<span class="c">             * @static</span>
<span class="c">             */</span>
            <span class="nx">animate</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">elem</span><span class="o">,</span> <span class="nx">obj</span><span class="o">,</span> <span class="nx">dur</span><span class="o">,</span> <span class="nx">ease</span><span class="o">,</span> <span class="nx">functions</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">),</span>
                    <span class="nx">cfg</span> <span class="o">=</span> <span class="o">{</span>
                    <span class="nx">duration</span><span class="o">:</span> <span class="nx">dur</span> <span class="o">||</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="o">,</span>
                    <span class="nx">ease</span><span class="o">:</span> <span class="nx">ease</span> <span class="o">||</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Easing</span><span class="o">.</span><span class="nx">easeOut</span><span class="o">,</span>
                    <span class="nx">obj</span><span class="o">:</span> <span class="nx">obj</span> <span class="o">||</span> <span class="o">{</span><span class="nx">opacity</span><span class="o">:</span> <span class="o">{</span><span class="nx">from</span><span class="o">:</span> <span class="m">1</span><span class="o">,</span> <span class="nx">to</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">25</span><span class="o">}}</span>
                <span class="o">},</span>
                    <span class="nx">fxs</span> <span class="o">=</span> <span class="nx">functions</span> <span class="o">||</span> <span class="o">[],</span>
                    <span class="nx">anim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Anim</span><span class="o">(</span><span class="nx">node</span><span class="o">,</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">obj</span><span class="o">,</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">duration</span><span class="o">,</span> <span class="nx">cfg</span><span class="o">.</span><span class="nx">ease</span><span class="o">);</span>

                <span class="c">// functions are provided</span>
<span class="c"></span>                <span class="k">if</span> <span class="o">(</span><span class="nx">fxs</span><span class="o">.</span><span class="nx">length</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">for</span> <span class="o">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="m">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">fxs</span><span class="o">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="m">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">fxs</span><span class="o">[</span><span class="nx">i</span><span class="o">];</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nx">anim</span><span class="o">[</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">])</span> <span class="o">{</span><span class="nx">anim</span><span class="o">[</span><span class="nx">o</span><span class="o">.</span><span class="nx">id</span><span class="o">].</span><span class="nx">subscribe</span><span class="o">(</span><span class="nx">o</span><span class="o">.</span><span class="nx">fx</span><span class="o">);}</span>
                    <span class="o">}</span>
                <span class="o">}</span>

                <span class="nx">anim</span><span class="o">.</span><span class="nx">animate</span><span class="o">();</span>
                <span class="k">return</span> <span class="nx">anim</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>

        <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YD</span><span class="o">,</span> <span class="nx">_thatIfAnim</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c">// extend helper methods requiring native-ext/array.js</span>
<span class="c"></span>    <span class="k">var</span> <span class="nx">_augmentDomWithArrayMethods</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>

        <span class="k">var</span> <span class="nx">_thatIfArray</span> <span class="o">=</span> <span class="o">{</span>

			<span class="c">/**</span>
<span class="c">			 * Wraps the native getElementsByTagName method, converting the nodelist to an Array object.</span>
<span class="c">			 * @method getElementsByTagName</span>
<span class="c">			 * @param tagName {String} Required. The DOM node tag to search for.</span>
<span class="c">			 * @param elem {String|Element} Required. Pointer or string reference to DOM element to search.</span>
<span class="c">			 * @return {NodeList} The collection of nodes.</span>
<span class="c">			 * @static</span>
<span class="c">			 */</span>
			<span class="nx">getElementsByTagName</span><span class="o">:</span> <span class="k">function</span><span class="o">(</span><span class="nx">tagName</span><span class="o">,</span> <span class="nx">elem</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">$</span><span class="o">(</span><span class="nx">elem</span><span class="o">);</span>
				<span class="k">if</span> <span class="o">(!</span> <span class="nx">node</span><span class="o">)</span> <span class="o">{</span><span class="k">return</span> <span class="kc">null</span><span class="o">;}</span>
				<span class="k">return</span> <span class="nb">Array</span><span class="o">.</span><span class="nx">get</span><span class="o">(</span><span class="nx">node</span><span class="o">.</span><span class="nx">getElementsByTagName</span><span class="o">(</span><span class="nx">tagName</span><span class="o">));</span>
			<span class="o">}</span>
        <span class="o">};</span>

        <span class="nx">_YL</span><span class="o">.</span><span class="nx">augmentObject</span><span class="o">(</span><span class="nx">_YD</span><span class="o">,</span> <span class="nx">_thatIfArray</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
    <span class="o">};</span>

    <span class="k">if</span> <span class="o">(</span><span class="nb">Array</span><span class="o">.</span><span class="nx">get</span><span class="o">)</span> <span class="o">{</span>
        <span class="nx">_augmentDomWithArrayMethods</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="nx">_YD</span><span class="o">.</span><span class="nx">augmentWithArrayMethods</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
            <span class="nx">_augmentDomWithArrayMethods</span><span class="o">();</span>
            <span class="nx">delete</span> <span class="nx">_YD</span><span class="o">.</span><span class="nx">augmentWithArrayMethods</span><span class="o">;</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">})();</span>
</pre></div>

<div class="highlight" ><pre><span class="c">/*</span>
<span class="c"> * Copyright (c) 2009, Matt Snider, LLC All rights reserved.</span>
<span class="c"> * Version: 1.0.03</span>
<span class="c"> */</span>

<span class="c">/**</span>
<span class="c"> * Define global constants.</span>
<span class="c"> * @module window</span>
<span class="c"> */</span>
<span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
    
    <span class="c">/**</span>
<span class="c">     * This Class contains global constants that to made be available throughout the codebase.</span>
<span class="c">     * @class C</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="k">if</span> <span class="o">(!</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">lang</span><span class="o">.</span><span class="nx">isObject</span><span class="o">(</span><span class="nb">window</span><span class="o">.</span><span class="nx">C</span><span class="o">))</span> <span class="o">{</span><span class="nb">window</span><span class="o">.</span><span class="nx">C</span> <span class="o">=</span> <span class="o">{};}</span> <span class="c">// don&#39;t override C, unless necessary</span>
<span class="c"></span>
    <span class="c">/**</span>
<span class="c">     * The global object to hold all HTML constants.</span>
<span class="c">     * @namespace C</span>
<span class="c">     * @class HTML</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">={};</span>

    <span class="c">/**</span>
<span class="c">     * The global object to hold all className constants.</span>
<span class="c">     * @namespace C.HTML</span>
<span class="c">     * @class CLS</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">={};</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying disabled styles and/or identifying element state.</span>
<span class="c">     * @property DISABLED</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">DISABLED</span><span class="o">=</span><span class="s1">&#39;disabled&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying error styles.</span>
<span class="c">     * @property ERROR</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">ERROR</span><span class="o">=</span><span class="s1">&#39;error&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for emulating :first-child psuedo class.</span>
<span class="c">     * @property FIRST</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">FIRST</span><span class="o">=</span><span class="s1">&#39;first&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying the &quot;visibility:hidden&quot; style.</span>
<span class="c">     * @property HIDDEN</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDDEN</span><span class="o">=</span><span class="s1">&#39;hidden&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying the &quot;display:none&quot; style.</span>
<span class="c">     * @property HIDE</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HIDE</span><span class="o">=</span><span class="s1">&#39;displayNone&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for emulating :hover psuedo class.</span>
<span class="c">     * @property HOVER</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">HOVER</span><span class="o">=</span><span class="s1">&#39;hover&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for emulating :last-child psuedo class.</span>
<span class="c">     * @property LAST</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">LAST</span><span class="o">=</span><span class="s1">&#39;last&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying message styles.</span>
<span class="c">     * @property MESSAGE</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">MESSAGE</span><span class="o">=</span><span class="s1">&#39;message&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for identifying &#39;next&#39; elements (usually used in pagination).</span>
<span class="c">     * @property NEXT</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">NEXT</span><span class="o">=</span><span class="s1">&#39;next&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying open styles and/or identifying element state.</span>
<span class="c">     * @property OPEN</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">OPEN</span><span class="o">=</span><span class="s1">&#39;open&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for identifying &#39;previous&#39; elements (usually used in pagination).</span>
<span class="c">     * @property PREV</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">PREV</span><span class="o">=</span><span class="s1">&#39;prev&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The DOM class attribute for applying selected styles and/or identifying element state.</span>
<span class="c">     * @property SELECTED</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">CLS</span><span class="o">.</span><span class="nx">SELECTED</span><span class="o">=</span><span class="s1">&#39;selected&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The global object to hold all ID constants.</span>
<span class="c">     * @namespace C.HTML</span>
<span class="c">     * @class ID</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">ID</span><span class="o">={};</span>

    <span class="c">/**</span>
<span class="c">     * The DOM id attribute for identifying the project&#39;s body element.</span>
<span class="c">     * @property BODY</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">ID</span><span class="o">.</span><span class="nx">BODY</span> <span class="o">=</span> <span class="s1">&#39;project&#39;</span><span class="o">;</span>

    <span class="c">/**</span>
<span class="c">     * The name object to hold all naming constants.</span>
<span class="c">     * @namespace C.HTML</span>
<span class="c">     * @class NAME</span>
<span class="c">     * @static</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">NAME</span><span class="o">={};</span>

    <span class="c">/**</span>
<span class="c">     * The DOM name attribute for tasks.</span>
<span class="c">     * @property TASK</span>
<span class="c">     * @type {String}</span>
<span class="c">     * @static</span>
<span class="c">     * @final</span>
<span class="c">     * @readonly Defined at build time.</span>
<span class="c">     */</span>
    <span class="nx">C</span><span class="o">.</span><span class="nx">HTML</span><span class="o">.</span><span class="nx">NAME</span><span class="o">.</span><span class="nx">TASK</span><span class="o">=</span><span class="s1">&#39;task&#39;</span><span class="o">;</span>
<span class="o">})();</span>
</pre></div>

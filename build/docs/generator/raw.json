{"majorversion": 2, "filemap": {"form.js": {"classlist": ["YAHOO.util.Form"], "name": "form.js", "module": "form"}, "formElement.js": {"classlist": ["YAHOO.util.Form.Element"], "name": "formElement.js", "module": "form"}, "console.js": {"classlist": ["Core"], "name": "console.js", "module": "mvc"}, "datasource.js": {"classlist": ["YAHOO.util.DataSourceBase", "YAHOO.util.LocalDataSource", "YAHOO.util.FunctionDataSource", "YAHOO.util.ScriptNodeDataSource", "YAHOO.util.XHRDataSource", "YAHOO.util.DataSource", "YAHOO.util.Number", "YAHOO.util.Date", "YAHOO.util.DateLocale"], "name": "datasource.js", "module": "datasource"}, "eventDispatcher.js": {"classlist": ["Core.Util.EventDispatcher"], "name": "eventDispatcher.js", "module": "mvc"}, "number.js": {"classlist": ["C.HTML.Number"], "name": "number.js", "module": "window"}, "json.js": {"classlist": [], "name": "json.js", "module": "json"}, "array.js": {"classlist": ["Array"], "name": "array.js", "module": "window"}, "constant.js": {"classlist": ["C", "C.HTML", "C.HTML.CLS", "C.HTML.ID", "C.HTML.NAME"], "name": "constant.js", "module": "window"}, "event-ext.js": {"classlist": ["YAHOO.util.Event"], "name": "event-ext.js", "module": "event"}, "dom.js": {"classlist": ["YAHOO.util.Dom", "YAHOO.util.Region", "YAHOO.util.Point"], "name": "dom.js", "module": "dom"}, "date.js": {"classlist": ["C.HTML.Date"], "name": "date.js", "module": "window"}, "animation.js": {"classlist": ["YAHOO.util.Anim", "YAHOO.util.AnimMgr", "YAHOO.util.Bezier", "YAHOO.util.ColorAnim", "YAHOO.util.Easing", "YAHOO.util.Motion", "YAHOO.util.Scroll"], "name": "animation.js", "module": "animation"}, "autocomplete.js": {"classlist": ["YAHOO.widget.AutoComplete"], "name": "autocomplete.js", "module": "autocomplete"}, "regexp.js": {"classlist": ["C.HTML.RegExp"], "name": "regexp.js", "module": "window"}, "connection.js": {"classlist": ["YAHOO.util.Connect"], "name": "connection.js", "module": "connection"}, "yahoo.js": {"classlist": ["YAHOO_config", "YAHOO", "YAHOO.env", "YAHOO.env.ua", "YAHOO.lang"], "name": "yahoo.js", "module": "yahoo"}, "formElementSerializer.js": {"classlist": ["YAHOO.util.Form.Element.Serializers"], "name": "formElementSerializer.js", "module": "form"}, "boolean.js": {"classlist": ["Boolean"], "name": "boolean.js", "module": "window"}, "core.js": {"classlist": ["Core"], "name": "core.js", "module": "mvc"}, "event.js": {"classlist": ["YAHOO.util.CustomEvent", "YAHOO.util.Subscriber", "YAHOO.util.Event", "YAHOO.util.EventProvider", "YAHOO.util.KeyListener"], "name": "event.js", "module": "event"}, "lang-ext.js": {"classlist": ["YAHOO.lang"], "name": "lang-ext.js", "module": "yahoo"}, "dom-ext.js": {"classlist": ["YAHOO.util.Dom"], "name": "dom-ext.js", "module": "dom"}}, "modules": {"form": {"description": "The Form module provides helper methods for manipulating Form elements.", "submodules": [], "classlist": ["YAHOO.util.Form", "YAHOO.util.Form.Element", "YAHOO.util.Form.Element.Serializers"], "title": "form Utility", "filelist": ["form.js", "formElement.js", "formElementSerializer.js"], "subdata": {}, "name": "form"}, "dom": {"description": "The dom module provides helper methods for manipulating Dom elements.", "submodules": [], "classlist": ["YAHOO.util.Dom", "YAHOO.util.Dom", "YAHOO.util.Region", "YAHOO.util.Point"], "filelist": ["dom-ext.js", "dom.js"], "subdata": {}, "name": "dom"}, "window": {"description": "Define global constants.", "submodules": [], "classlist": ["Array", "Boolean", "C", "C.HTML", "C.HTML.CLS", "C.HTML.ID", "C.HTML.NAME", "C.HTML.Date", "C.HTML.Number", "C.HTML.RegExp"], "filelist": ["array.js", "boolean.js", "constant.js", "date.js", "number.js", "regexp.js"], "subdata": {}, "name": "window"}, "json": {"description": "json.js\n2007-08-19\nPublic Domain\nThis file adds these methods to JavaScript:\narray.toJSONString(whitelist)\nboolean.toJSONString()\ndate.toJSONString()\nnumber.toJSONString()\nobject.toJSONString(whitelist)\nstring.toJSONString()\nThese methods produce a JSON text from a JavaScript value.\nIt must not contain any cyclical references. Illegal values\nwill be excluded.\nThe default conversion for dates is to an ISO string. You can\nadd a toJSONString method to any date object to get a different\nrepresentation.\nThe object and array methods can take an optional whitelist\nargument. A whitelist is an array of strings. If it is provided,\nkeys in objects not found in the whitelist are excluded.\nstring.parseJSON(filter)\nThis method parses a JSON text to produce an object or\narray. It can throw a SyntaxError exception.\nThe optional filter parameter is a function which can filter and\ntransform the results. It receives each of the keys and values, and\nits return value is used instead of the original value. If it\nreturns what it received, then structure is not modified. If it\nreturns undefined then the member is deleted.\nExample:\n\/\/ Parse the text. If a key contains the string 'date' then\n\/\/ convert the value to a date.\nmyData = text.parseJSON(function (key, value) {\nreturn key.indexOf('date') >= 0 ? new Date(value) : value;\n});\nIt is expected that these methods will formally become part of the\nJavaScript Programming Language in the Fourth Edition of the\nECMAScript standard in 2008.\nThis file will break programs with improper for..in loops. See\nhttp:\/\/yuiblog.com\/blog\/2006\/09\/26\/for-in-intrigue\/\nThis is a reference implementation. You are free to copy, modify, or\nredistribute.\nUse your own copy. It is extremely unwise to load untrusted third party\ncode into your pages.", "submodules": [], "classlist": [], "filelist": ["json.js"], "subdata": {}, "name": "json"}, "yahoo": {"description": "The YAHOO object is the single global object used by YUI Library.  It\ncontains utility function for setting up namespaces, inheritance, and\nlogging.  YAHOO.util, YAHOO.widget, and YAHOO.example are namespaces\ncreated automatically for and used by the library.", "submodules": [], "classlist": ["YAHOO.lang", "YAHOO_config", "YAHOO", "YAHOO.env", "YAHOO.env.ua", "YAHOO.lang"], "title": "YAHOO Global", "filelist": ["lang-ext.js", "yahoo.js"], "subdata": {}, "name": "yahoo"}, "autocomplete": {"description": "The AutoComplete control provides the front-end logic for text-entry suggestion and\ncompletion functionality.", "submodules": [], "classlist": ["YAHOO.widget.AutoComplete"], "title": "AutoComplete Widget", "filelist": ["autocomplete.js"], "subdata": {}, "optional": "animation", "requires": "yahoo, dom, event, datasource", "name": "autocomplete"}, "connection": {"description": "The Connection Manager provides a simplified interface to the XMLHttpRequest\nobject.  It handles cross-browser instantiantion of XMLHttpRequest, negotiates the\ninteractive states and server response, returning the results to a pre-defined\ncallback you create.", "submodules": [], "classlist": ["YAHOO.util.Connect"], "filelist": ["connection.js"], "subdata": {}, "requires": "yahoo", "name": "connection"}, "animation": {"description": "The animation module provides allows effects to be added to HTMLElements.", "submodules": [], "classlist": ["YAHOO.util.Anim", "YAHOO.util.AnimMgr", "YAHOO.util.Bezier", "YAHOO.util.ColorAnim", "YAHOO.util.Easing", "YAHOO.util.Motion", "YAHOO.util.Scroll"], "filelist": ["animation.js"], "subdata": {}, "requires": "yahoo, event, dom", "name": "animation"}, "datasource": {"description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.", "submodules": [], "classlist": ["YAHOO.util.DataSourceBase", "YAHOO.util.LocalDataSource", "YAHOO.util.FunctionDataSource", "YAHOO.util.ScriptNodeDataSource", "YAHOO.util.XHRDataSource", "YAHOO.util.DataSource", "YAHOO.util.Number", "YAHOO.util.Date", "YAHOO.util.DateLocale"], "title": "DataSource Utility", "requires": "yahoo, event", "filelist": ["datasource.js"], "subdata": {}, "optional": "json, get, connection", "name": "datasource"}, "mvc": {"description": "The Core object manages the MVC architecture of the pages and namespacing.", "submodules": [], "classlist": ["Core", "Core", "Core.Util.EventDispatcher"], "filelist": ["console.js", "core.js", "eventDispatcher.js"], "subdata": {}, "name": "mvc"}, "event": {"description": "The Event Utility provides utilities for managing DOM Events and tools\nfor building event systems", "submodules": [], "classlist": ["YAHOO.util.Event", "YAHOO.util.CustomEvent", "YAHOO.util.Subscriber", "YAHOO.util.Event", "YAHOO.util.EventProvider", "YAHOO.util.KeyListener"], "title": "Event Utility", "filelist": ["event-ext.js", "event.js"], "subdata": {}, "requires": "yahoo", "name": "event"}}, "classmap": {"C.HTML.Number": {"name": "C.HTML.Number", "constructors": [{"description": "The JavaScript Number Object\nsince FireFox 1.0 and IE 4.0"}], "namespace": "C.HTML", "module": "window", "methods": {"toPrecision": {"return": {"type": "Number", "description": "the converted Number"}, "params": [{"type": "Number", "name": "num", "description": "  Required. Specifies the minimum Number of digits the value must have to be converted to exponential notation"}], "public": "", "description": "Converts the value of the Object into an exponential notation if it has more digits than specified;\nsince FireFox 1.0 and IE 5.5"}, "toLocaleString": {"return": {"type": "String", "description": "the Number as a localized String"}, "public": "", "description": "Displays the Number using regional preferences.\nsince FireFox 2.0 and IE 3.0"}, "toExponential": {"return": {"type": "Number", "description": "the converted Number"}, "params": [{"type": "Number", "name": "num", "description": "  Required. Specifies the Number of decimal places in the exponential notation"}], "public": "", "description": "Convert the value of the Object into an exponential notation;\nsince FireFox 1.0 and IE 5.5"}, "valueOf": {"return": {"type": "String", "description": "the Number as a base10 String"}, "public": "", "description": "The valueOf() method returns the Number as a String.\nThe String output is always equal to the Number as it's represented in base 10.\nThe valueOf() method is usually called automatically by JavaScript behind the scenes and not explicitly in code.\nsince FireFox 1.0 and IE 4.0"}, "toString": {"return": {"type": "String", "description": "the Number as a String"}, "params": [{"type": "Number", "name": "radix", "description": "  Optional. Specifies the base radix you would like the Number displayed as.\nExamples:\n2 - The Number will show as a binary value\n8 - The Number will show as an octal value\n16 - The Number will show as an hexadecimal value"}], "public": "", "description": "Converts a Number Object to String;\nsince FireFox 1.0 and IE 4.0"}, "toFixed": {"return": {"type": "Number", "description": "the converted Number"}, "params": [{"type": "Number", "name": "num", "description": "  Required. Specifies the Number of decimals to use"}], "public": "", "description": "Round a Number to the specified Number of decimals;\nsince FireFox 1.0 and IE 5.5"}, "toSource": {"return": {"type": "String", "description": "the source-code that generated the Number"}, "public": "", "description": "Returns the source-code used to generate Number.\nsince FireFox 1.5"}}, "file": "number.js", "shortname": "Number", "properties": {"MAX_VALUE": {"type": "Number", "description": "Largest Number that is less than infinity\nsince FireFox 1.0 and IE 4.0", "public": ""}, "MIN_VALUE": {"type": "Number", "description": "Smallest Number that is greater than negative infinity\nsince FireFox 1.0 and IE 4.0", "public": ""}, "NaN": {"type": "Object", "description": "Not a Number\nsince FireFox 1.0 and IE 4.0", "public": ""}, "NEGATIVE_INFINITY": {"type": "Object", "description": "Out of range negative Number\nsince FireFox 1.0 and IE 4.0", "public": ""}, "POSITIVE_INFINITY": {"type": "Object", "description": "Out of range positive Number\nsince FireFox 1.0 and IE 4.0", "public": ""}, "prototype": {"type": "Object", "description": "Allows you to add properties and methods to the Object\nsince FireFox 1.0 and IE 4.0", "public": ""}}, "description": "The JavaScript Number Object\nsince FireFox 1.0 and IE 4.0"}, "YAHOO.util.Number": {"name": "YAHOO.util.Number", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "Number", "methods": {"format": {"return": {"type": "String", "description": "Formatted number for display."}, "params": [{"type": "Number", "name": "nData", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}<\/dd>\n<dd>String prepended before each number, like a currency designator \"$\"<\/dd>\n<dt>decimalPlaces {Number}<\/dd>\n<dd>Number of decimal places to round.<\/dd>\n<dt>decimalSeparator {String}<\/dd>\n<dd>Decimal separator<\/dd>\n<dt>thousandsSeparator {String}<\/dd>\n<dd>Thousands separator<\/dd>\n<dt>suffix {String", "name": "oConfig", "description": " <\/dd>\n<dd>String appended after each number, like \" items\" (note the space)<\/dd>\n<\/dl>"}], "description": "Takes a native JavaScript Number and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "datasource.js", "guessedtype": "property", "shortname": "Number", "requires": "yahoo", "description": "The static Number class provides helper functions to deal with data of type\nNumber."}, "YAHOO.util.AnimMgr": {"name": "YAHOO.util.AnimMgr", "namespace": "YAHOO.util", "module": "animation", "guessedname": "AnimMgr", "methods": {"run": {"description": "Called per Interval to handle each animation frame.", "guessedname": "run", "guessedtype": "function"}, "unRegister": {"guessedname": "unRegister", "params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}, {"type": "Int", "name": "index", "description": " The index of the Anim instance"}], "description": "removes an animation instance from the animation queue.\nAll animation instances must be registered in order to animate.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "object", "name": "tween", "description": " A specific Anim instance to stop (optional)\nIf no instance given, Manager stops thread and all animations."}], "description": "Stops the animation thread or a specific animation instance.", "guessedname": "stop", "guessedtype": "function"}, "start": {"description": "Starts the animation thread.\nOnly one thread can run at a time.", "guessedname": "start", "guessedtype": "function"}, "registerElement": {"params": [{"type": "object", "name": "tween", "description": " The Anim instance to be be registered"}], "description": "Adds an animation instance to the animation queue.\nAll animation instances must be registered in order to animate.", "guessedname": "registerElement", "guessedtype": "function"}, "correctFrame": {"guessedname": "correctFrame", "params": [{"type": "Object", "name": "tween", "description": " The Anim instance being corrected."}], "description": "On the fly frame correction to keep animation on time.", "private": "", "guessedtype": "function"}}, "file": "animation.js", "guessedtype": "function", "shortname": "AnimMgr", "properties": {"queue": {"guessedname": "queue", "type": "Array", "description": "The current queue of registered animation objects.", "private": "", "guessedtype": "property"}, "tweenCount": {"guessedname": "tweenCount", "type": "Int", "description": "The number of active animations.", "private": "", "guessedtype": "property"}, "delay": {"type": "Int", "description": "Interval delay in milliseconds, defaults to fastest possible.", "guessedname": "delay", "guessedtype": "property"}, "fps": {"type": "Int", "description": "Base frame rate (frames per second). \nArbitrarily high for better x-browser calibration (slower browsers drop more frames).", "guessedname": "fps", "guessedtype": "property"}, "thread": {"guessedname": "thread", "type": "Int", "description": "Reference to the animation Interval.", "private": "", "guessedtype": "property"}}, "description": "Handles animation queueing and threading.\nUsed by Anim and subclasses."}, "YAHOO.util.Form.Element.Serializers": {"name": "YAHOO.util.Form.Element.Serializers", "namespace": "YAHOO.util.Form.Element", "module": "form", "methods": {"textarea": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a select-one element.", "static": "", "guessedname": "textarea", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The select node."}]}, "inputSelector": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a checkbox\/radio input element.", "static": "", "guessedname": "inputSelector", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The input node."}]}, "input": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a checkbox\/radio input element.", "static": "", "guessedname": "input", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The input node."}]}, "selectOne": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a select-one element.", "static": "", "guessedname": "selectOne", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The select node."}]}, "select": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a select tag element.", "static": "", "guessedname": "select", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The select node."}]}, "selectMany": {"return": {"type": "Array", "description": "The name\/value pairs."}, "description": "Finds the value of a select-many element.", "static": "", "guessedname": "selectMany", "guessedtype": "function", "params": [{"type": "String|Element", "name": "element", "description": "  Required. The select node."}]}}, "static": "", "file": "formElementSerializer.js", "shortname": "Serializers", "description": "These Form utility functions are thanks in a large part to the Prototype group. I have modified them to improve\nperformance, remove redundancy, and get rid of the magic array functionality."}, "YAHOO.util.EventProvider": {"name": "YAHOO.util.EventProvider", "namespace": "YAHOO.util", "module": "event", "guessedname": "EventProvider", "methods": {"unsubscribeAll": {"params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "string", "name": "p_type", "description": "        the type, or name of the event"}, {"type": "function", "name": "p_fn", "description": "        the function to exectute when the event fires"}, {"type": "Object", "name": "p_obj", "description": "         An object to be passed along when the event \nfires"}, {"type": "boolean", "name": "p_override", "description": "   If true, the obj passed in becomes the \nexecution scope of the listener"}], "description": "Subscribe to a CustomEvent by event type", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "true if the subscriber was found and detached."}, "params": [{"type": "string", "name": "p_type", "description": "    The type, or name of the event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "p_fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "p_obj", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes one or more listeners the from the specified event", "guessedname": "unsubscribe", "guessedtype": "function"}, "hasEvent": {"params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns true if the custom event of the provided type has been created\nwith createEvent.", "guessedname": "hasEvent", "guessedtype": "function"}, "fireEvent": {"return": {"type": "boolean", "description": "the return value from CustomEvent.fire"}, "params": [{"type": "string", "name": "p_type", "description": "      the type, or name of the event"}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The first argument fire() was executed with<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fireEvent", "guessedtype": "function"}, "createEvent": {"return": {"type": "CustomEvent", "description": "the custom event"}, "params": [{"type": "string", "name": "p_type", "description": "  the type, or name of the event"}, {"type": "object", "name": "p_config", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\nscope: defines the default execution scope.  If not defined\nthe default scope will be this instance.\n<\/li>\n<li>\nsilent: if true, the custom event will not generate log messages.\nThis is false by default.\n<\/li>\n<li>\nonSubscribeCallback: specifies a callback to execute when the\nevent has a new subscriber.  This will fire immediately for\neach queued subscriber if any exist prior to the creation of\nthe event.\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "createEvent", "guessedtype": "function"}}, "file": "event.js", "guessedtype": "function", "shortname": "EventProvider", "properties": {"__yui_subscribers": {"guessedname": "__yui_subscribers", "type": "Object[]", "description": "Private storage of custom event subscribers", "private": "", "guessedtype": "property"}, "__yui_events": {"guessedname": "__yui_events", "type": "Object[]", "description": "Private storage of custom events", "private": "", "guessedtype": "property"}}, "description": "EventProvider is designed to be used with YAHOO.augment to wrap \nCustomEvents in an interface that allows events to be subscribed to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "YAHOO.util.XHRDataSource": {"name": "YAHOO.util.XHRDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility"}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "XHRDataSource", "methods": {"_xhrFailure": {"guessedname": "_xhrFailure", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager failure handler", "private": "", "guessedtype": "function"}, "_xhrSuccess": {"guessedname": "_xhrSuccess", "params": [{"type": "Object", "name": "oResponse", "description": "  HTTPXMLRequest object"}], "description": "Define Connection Manager success handler", "private": "", "guessedtype": "function"}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to Connection Manager. The returned\nresponse is then forwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "datasource.js", "guessedtype": "function", "shortname": "XHRDataSource", "properties": {"connTimeout": {"default": "0", "type": "Number", "description": "The connection timeout defines how many  milliseconds the XHR connection will\nwait for a server response. Any non-zero value will enable the Connection Manager's\nAuto-Abort feature.", "guessedname": "connTimeout", "guessedtype": "property"}, "connMethodPost": {"default": "false", "type": "Boolean", "description": "True if data is to be sent via POST. By default, data will be sent via GET.", "guessedname": "connMethodPost", "guessedtype": "property"}, "_xhrCallback": {"guessedname": "_xhrCallback", "param": "oResponse {Object} HTTPXMLRequest object", "description": "Define Connection Manager callback object", "private": "", "guessedtype": "property"}, "connXhrMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request\/response management in the following manner:\n<dl>\n<dt>queueRequests<\/dt>\n<dd>If a request is already in progress, wait until response is returned\nbefore sending the next request.<\/dd>\n<dt>cancelStaleRequests<\/dt>\n<dd>If a request is already in progress, cancel it before sending the next\nrequest.<\/dd>\n<dt>ignoreStaleResponses<\/dt>\n<dd>Send all requests, but handle only the response for the most recently\nsent request.<\/dd>\n<dt>allowAll<\/dt>\n<dd>Send all requests and handle all responses.<\/dd>\n<\/dl>", "guessedname": "connXhrMode", "guessedtype": "property"}, "connMgr": {"default": "YAHOO.util.Connect", "type": "Object", "description": "Alias to YUI Connection Manager, to allow implementers to use a custom class.", "guessedname": "connMgr", "guessedtype": "property"}}, "description": "XHRDataSource class for accessing remote data via the YUI Connection Manager\nUtility"}, "YAHOO.util.KeyListener": {"name": "YAHOO.util.KeyListener", "knownissue": "the \"keypress\" event is completely broken in Safari 2.x and below.\nthe workaround is use \"keydown\" for key listening.  However, if\nit is desired to prevent the default behavior of the keystroke,\nthat can only be done on the keypress event.  This makes key\nhandling quite ugly.", "constructors": [{"params": [{"type": "HTMLElement", "name": "attachTo", "description": " The element or element ID to which the key \nevent should be attached"}, {"type": "String", "name": "attachTo", "description": " The element or element ID to which the key\nevent should be attached"}, {"type": "Object", "name": "keyData", "description": "  The object literal representing the key(s) \nto detect. Possible attributes are \nshift(boolean), alt(boolean), ctrl(boolean) \nand keys(either an int or an array of ints \nrepresenting keycodes)."}, {"type": "Function", "name": "handler", "description": "  The CustomEvent handler to fire when the \nkey event is detected"}, {"type": "Object", "name": "handler", "description": "  An object literal representing the handler."}, {"type": "String", "name": "event", "description": "    Optional. The event (keydown or keyup) to \nlisten for. Defaults automatically to keydown."}], "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown\/keyup events fired against DOM elements."}], "namespace": "YAHOO.util", "module": "event", "properties": {"YAHOO.util.KeyListener.KEYDOWN": {"description": "Constant representing the DOM \"keydown\" event.", "static": "", "guessedname": "KEYDOWN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.util.KeyListener.KEYUP": {"description": "Constant representing the DOM \"keyup\" event.", "static": "", "guessedname": "KEYUP", "guessedtype": "property", "type": "String", "final": ""}, "enabled": {"type": "Boolean", "description": "Boolean indicating the enabled\/disabled state of the Tooltip", "guessedname": "enabled", "guessedtype": "property"}, "KEY": {"final": "", "static": "", "description": "keycode constants for a subset of the special keys", "guessedname": "KEY", "guessedtype": "property"}}, "guessedname": "KeyListener", "methods": {"handleKeyPress": {"params": [{"type": "DOMEvent", "name": "e", "description": "   The keypress DOM event"}, {"type": "Object", "name": "obj", "description": " The DOM event scope object"}], "description": "Handles the key event when a key is pressed.", "private": ""}, "enable": {"description": "Enables the KeyListener by attaching the DOM event listeners to the \ntarget DOM element", "guessedname": "enable", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the KeyListener"}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "disable": {"description": "Disables the KeyListener by removing the DOM event listeners from the \ntarget DOM element", "guessedname": "disable", "guessedtype": "function"}}, "file": "event.js", "guessedtype": "function", "shortname": "KeyListener", "events": {"enabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is enabled via the enable() \nfunction", "guessedname": "enabledEvent", "guessedtype": "property"}, "disabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is disabled via the \ndisable() function", "guessedname": "disabledEvent", "guessedtype": "property"}, "keyEvent": {"guessedname": "keyEvent", "params": [{"type": "Object", "name": "keyData", "description": " The object literal representing the key(s) to \ndetect. Possible attributes are shift(boolean), \nalt(boolean), ctrl(boolean) and keys(either an \nint or an array of ints representing keycodes)."}], "description": "The CustomEvent fired internally when a key is pressed", "private": "", "guessedtype": "property"}}, "description": "KeyListener is a utility that provides an easy interface for listening for\nkeydown\/keyup events fired against DOM elements."}, "YAHOO.util.CustomEvent": {"name": "YAHOO.util.CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "Object", "name": "oScope", "description": " The context the event will fire from.  \"this\" will\nrefer to this object in the callback.  Default value: \nthe window object.  The listener can override this."}, {"type": "boolean", "name": "silent", "description": " pass true to prevent the event from writing to\nthe debugsystem"}, {"type": "int", "name": "signature", "description": " the signature that the custom event subscriber\nwill receive. YAHOO.util.CustomEvent.LIST or \nYAHOO.util.CustomEvent.FLAT.  The default is\nYAHOO.util.CustomEvent.LIST."}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "YAHOO.util", "module": "event", "events": {"subscribeEvent": {"type": "YAHOO.util.CustomEvent", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"_delete": {"private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the scope specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "subscribe": {"params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}, {"type": "Object", "name": "obj", "description": "       An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution scope of the listener.\nif an object, that object becomes the\nthe execution scope."}], "description": "Subscribes the caller to this event", "guessedname": "subscribe", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean", "description": "True if the subscriber was found and detached."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "obj", "description": "  The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Unsubscribes subscribers.", "guessedname": "unsubscribe", "guessedtype": "function"}}, "file": "event.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "YAHOO.util.CustomEvent.FLAT": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The FLAT type returns two\nparameters: the first argument passed to fire and the optional \ncustom object", "guessedname": "FLAT", "guessedtype": "property"}, "subscribers": {"type": "Subscriber[]", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "signature": {"type": "int", "description": "Custom events support two styles of arguments provided to the event\nsubscribers.  \n<ul>\n<li>YAHOO.util.CustomEvent.LIST: \n<ul>\n<li>param1: event name<\/li>\n<li>param2: array of arguments sent to fire<\/li>\n<li>param3: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<li>YAHOO.util.CustomEvent.FLAT\n<ul>\n<li>param1: the first argument passed to fire.  If you need to\npass multiple parameters, use and array or object literal<\/li>\n<li>param2: <optional> a custom object supplied by the subscriber<\/li>\n<\/ul>\n<\/li>\n<\/ul>", "guessedname": "signature", "guessedtype": "property"}, "YAHOO.util.CustomEvent.LIST": {"type": "int", "static": "", "description": "Subscriber listener sigature constant.  The LIST type returns three\nparameters: the event type, the array of args passed to fire, and\nthe optional custom object", "guessedname": "LIST", "guessedtype": "property"}, "scope": {"type": "object", "description": "The scope the the event will fire from by default.  Defaults to the window \nobj", "guessedname": "scope", "guessedtype": "property"}, "lastError": {"type": "Error", "description": "In order to make it possible to execute the rest of the subscriber\nstack when one thows an exception, the subscribers exceptions are\ncaught.  The most recent exception is stored in this property", "guessedname": "lastError", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "YAHOO": {"name": "YAHOO", "namespace": "", "module": "yahoo", "guessedname": "YAHOO", "methods": {"extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties\/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass if present."}], "description": "An alias for <a href=\"YAHOO.lang.html#extend\">YAHOO.lang.extend<\/a>", "guessedname": "extend", "guessedtype": "property"}, "register": {"static": "", "params": [{"type": "String", "name": "name", "description": "    the name of the module (event, slider, etc)"}, {"type": "Function", "name": "mainClass", "description": " a reference to class in the module.  This\nclass will be tagged with the version info\nso that it will be possible to identify the\nversion that is in use when multiple versions\nhave loaded"}, {"type": "Object", "name": "data", "description": "      metadata object for the module.  Currently it\nis expected to contain a \"version\" property\nand a \"build\" property at minimum."}], "description": "Registers a module with the YAHOO object", "guessedname": "register", "guessedtype": "function"}, "namespace": {"return": {"type": "Object", "description": "A reference to the last namespace object created"}, "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYAHOO.namespace(\"property.package\");\nYAHOO.namespace(\"YAHOO.property.package\");\n<\/pre>\nEither of the above would create YAHOO.property, then\nYAHOO.property.package\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYAHOO.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "static": "", "guessedname": "namespace", "guessedtype": "function", "params": [{"type": "String*", "name": "arguments", "description": " 1-n namespaces to create"}]}, "log": {"return": {"type": "Boolean", "description": "True if the log operation was successful."}, "description": "Uses YAHOO.widget.Logger to output a log message, if the widget is\navailable.", "static": "", "guessedname": "log", "guessedtype": "function", "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}]}, "augment": {"static": "", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver"}], "description": "An alias for <a href=\"YAHOO.lang.html#augment\">YAHOO.lang.augment<\/a>", "guessedname": "augment", "guessedtype": "property"}}, "static": "", "file": "yahoo.js", "guessedtype": "property", "shortname": "YAHOO", "description": "The YAHOO global namespace object.  If YAHOO is already defined, the\nexisting YAHOO object will not be overwritten so that defined\nnamespaces are preserved."}, "YAHOO.util.Event": {"guessedname": "Event", "name": "YAHOO.util.Event", "namespace": "YAHOO.util", "module": "event", "events": {"DOMReadyEvent": {"description": "Custom event the fires when the dom is initially usable", "guessedname": "DOMReadyEvent", "guessedtype": "property"}}, "methods": {"regCE": {"description": "Used by old versions of CustomEvent, restored for backwards\ncompatibility", "deprecated": "still here for backwards compatibility", "private": "", "static": "", "guessedname": "regCE", "guessedtype": "function"}, "_removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes an event listener", "private": "", "static": "", "guessedname": "_removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "sType", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_getScrollLeft": {"guessedname": "_getScrollLeft", "static": "", "description": "Returns scrollLeft", "private": "", "guessedtype": "function"}, "getTime": {"return": {"type": "Date", "description": "the time of the event"}, "description": "Returns the time of the event.  If the time is not included, the\nevent is modified using the current time.", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addBlurListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends a blur event handler.  (The focusout event is used for Internet Explorer, \nthe focusout, capture-event for Opera, WebKit, and Gecko.)", "static": "", "guessedname": "addBlurListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener. If an\nobject, this object becomes the execution\nscope."}]}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "addEnterListener": {"static": "", "params": [{"type": "Element", "name": "attachTo", "description": "  Required. Pointer or string reference to DOM input element to listen on."}, {"type": "Function", "name": "callback", "description": "  Required. The callback function."}, {"type": "Object", "name": "scope", "description": "  Optional. The execution scope of callback function."}], "description": "Adds a listener to input that checks keypress events for enter, then\ncalls the appropriate function or method. (pass the window into obj for functions).", "guessedname": "addEnterListener", "guessedtype": "function"}, "getTarget": {"return": {"type": "HTMLElement", "description": "the event's target"}, "description": "Returns the event's target element.  Safari sometimes provides\na text node, and this is automatically resolved to the text\nnode's parent so that it behaves like other browsers.", "static": "", "guessedname": "getTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}, {"type": "boolean", "name": "resolveTextNode", "description": " when set to true the target's\nparent will be returned if the target is a \ntext node.  @deprecated, the text node is\nnow resolved automatically"}]}, "_simpleRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "_simpleRemove", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "stopPropagation": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Stops event propagation", "guessedname": "stopPropagation", "guessedtype": "function"}, "getCharCode": {"return": {"type": "int", "description": "the event's charCode"}, "description": "Returns the charcode for an event", "static": "", "guessedname": "getCharCode", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "removeBlurListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes a blur event listener", "static": "", "guessedname": "removeBlurListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "_simpleAdd": {"description": "Adds a DOM event directly without the caching, cleanup, scope adj, etc", "private": "", "static": "", "guessedname": "_simpleAdd", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "sType", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "useLegacyEvent": {"guessedname": "useLegacyEvent", "static": "", "description": "Logic that determines when we should automatically use legacy\nevents instead of DOM2 events.  Currently this is limited to old\nSafari browsers with a broken preventDefault", "private": "", "guessedtype": "function"}, "addKeyListener": {"static": "", "params": [{"type": "Element", "name": "attachTo", "description": "  Required. Pointer or string reference to DOM input element to listen on."}, {"type": "Array", "name": "keycodes", "description": "  Required. A collection of desired keycodes."}, {"type": "Function", "name": "callback", "description": "  Required. The callback function."}, {"type": "Object", "name": "scope", "description": "  Optional. The execution scope of callback function."}, {"type": "Boolean", "name": "correctScope", "description": "  Optional. True, if you want to correct the scope of callback."}], "description": "Adds a listener to input that checks keydown events for keycode, then calls the appropriately scoped function, passing the event.", "guessedname": "addKeyListener", "guessedtype": "function"}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "getEl": {"description": "We cache elements bound by id because when the unload event \nfires, we can no longer use document.getElementById", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "getEl", "guessedtype": "function"}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "resolveTextNode": {"return": {"type": "HTMLElement", "description": "the normized node"}, "description": "In some cases, some browsers will return a text node inside\nthe actual element that was targeted.  This normalizes the\nreturn value for getTarget and getRelatedTarget.", "static": "", "guessedname": "resolveTextNode", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "node", "description": " node to resolve"}]}, "stopEvent": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Convenience method for stopPropagation + preventDefault", "guessedname": "stopEvent", "guessedtype": "function"}, "addFocusListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends a focus event handler.  (The focusin event is used for Internet Explorer, \nthe focus, capture-event for Opera, WebKit, and Gecko.)", "static": "", "guessedname": "addFocusListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener. If an\nobject, this object becomes the execution\nscope."}]}, "fireLegacyEvent": {"guessedname": "fireLegacyEvent", "static": "", "description": "When using legacy events, the handler is routed to this object\nso we can fire our custom listener stack.", "private": "", "guessedtype": "function"}, "getLegacyIndex": {"guessedname": "getLegacyIndex", "static": "", "description": "Returns the legacy event index that matches the supplied \nsignature", "private": "", "guessedtype": "function"}, "getXY": {"return": {"type": "[x, y]", "description": "the pageX and pageY properties of the event"}, "description": "Returns the pageX and pageY properties as an indexed array.", "static": "", "guessedname": "getXY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener. If an\nobject, this object becomes the execution\nscope."}]}, "simulateClick": {"static": "", "params": [{"type": "Element", "name": "elem", "description": "  Required. The element to click on."}, {"type": "Element", "name": "rt", "description": "  Optional. The ancestor to stop on; default is document."}], "description": "Simulates a click event on an element. Will iterate up the DOM tree until the root is reached or node becomes undefined.", "guessedname": "simulateClick", "guessedtype": "function"}, "getMousePosition": {"return": {"type": "Object", "description": "Where x = x coordinate and y = y coordinate of event."}, "description": "Retrieves the {x, y} coordinates of an event.", "static": "", "guessedname": "getMousePosition", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": "  Required. The triggered JavaScript event; any mouse event."}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "onBlur": {"see": "addBlurListener", "static": "", "description": "YAHOO.util.Event.onBlur is an alias for addBlurListener", "guessedname": "onBlur", "guessedtype": "property"}, "_getScrollTop": {"guessedname": "_getScrollTop", "static": "", "description": "Returns scrollTop", "private": "", "guessedtype": "function"}, "onContentReady": {"static": "", "params": [{"type": "string", "name": "p_id", "description": " the id of the element to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj.  If an object, p_fn will\nexectute in the scope of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>", "guessedname": "onContentReady", "guessedtype": "function"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "onAvailable": {"static": "", "params": [{"type": "string||string[]", "name": "p_id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "p_fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, p_fn will execute\nin the scope of p_obj, if set to an object it\nwill execute in the scope of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>", "guessedname": "onAvailable", "guessedtype": "function"}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "boundEl", "description": " the element the listener is attached to"}]}, "addEscapeListener": {"static": "", "params": [{"type": "Element", "name": "attachTo", "description": "  Required. Pointer or string reference to DOM input element to listen on."}, {"type": "Function", "name": "callback", "description": "  Required. The callback function."}, {"type": "Object", "name": "scope", "description": "  Optional. The execution scope of callback function."}], "description": "Adds a listener to input that checks keypress events for escape, then\ncalls the appropriate function or method. (pass the window into obj for functions).", "guessedname": "addEscapeListener", "guessedtype": "function"}, "removeListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes an event listener", "static": "", "guessedname": "removeListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "sType", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "clearCache": {"description": "Clears the element cache", "deprecated": "Elements are not cached any longer", "private": "", "static": "", "guessedname": "clearCache", "guessedtype": "function"}, "onDOMReady": {"static": "", "params": [{"type": "function", "name": "p_fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to p_fn."}, {"type": "boolean|object", "name": "p_scope", "description": " If set to true, p_fn will execute\nin the scope of p_obj, if set to an object it\nwill execute in the scope of that object"}], "description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a CustomEvent, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "guessedname": "onDOMReady", "guessedtype": "function"}, "on": {"see": "addListener", "static": "", "description": "YAHOO.util.Event.on is an alias for addListener", "guessedname": "on", "guessedtype": "property"}, "_getScroll": {"guessedname": "_getScroll", "static": "", "description": "Returns the scrollTop and scrollLeft.  Used to calculate the \npageX and pageY in Internet Explorer", "private": "", "guessedtype": "function"}, "getListeners": {"return": {"type": "Object", "description": "the listener. Contains the following fields:\n&nbsp;&nbsp;type:   (string)   the type of event\n&nbsp;&nbsp;fn:     (function) the callback supplied to addListener\n&nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener\n&nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default scope\n&nbsp;&nbsp;scope: (boolean)  the derived scope based on the adjust parameter\n&nbsp;&nbsp;scope: (capture)  the capture parameter supplied to addListener\n&nbsp;&nbsp;index:  (int)      its position in the Event util listener cache"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "sType", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "off": {"see": "YAHOO.util.Event.removeListener", "description": "An alias for YAHOO.util.Event.removeListener.", "guessedname": "off", "guessedtype": "property"}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "sType", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_addListener": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "private": "", "static": "", "guessedname": "_addListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "String", "name": "sType", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "override", "description": "  If true, the obj passed in becomes\nthe execution scope of the listener. If an\nobject, this object becomes the execution\nscope."}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "preventDefault": {"static": "", "params": [{"type": "Event", "name": "ev", "description": " the event"}], "description": "Prevents the default behavior of the event", "guessedname": "preventDefault", "guessedtype": "function"}, "_getCacheIndex": {"guessedname": "_getCacheIndex", "static": "", "description": "Locating the saved event handler data by function ref", "private": "", "guessedtype": "function"}, "_ready": {"guessedname": "_ready", "static": "", "description": "Fires the DOMReady event listeners the first time the document is\nusable.", "private": "", "guessedtype": "function"}, "getPageY": {"return": {"type": "int", "description": "the event's pageY"}, "description": "Returns the event's pageY", "static": "", "guessedname": "getPageY", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "getPageX": {"return": {"type": "int", "description": "the event's pageX"}, "description": "Returns the event's pageX", "static": "", "guessedname": "getPageX", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "removeFocusListener": {"return": {"type": "boolean", "description": "true if the unbind was successful, false \notherwise."}, "description": "Removes a focus event listener", "static": "", "guessedname": "removeFocusListener", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are \nremoved."}]}, "getRelatedTarget": {"return": {"type": "HTMLElement", "description": "the event's relatedTarget"}, "description": "Returns the event's related target", "static": "", "guessedname": "getRelatedTarget", "guessedtype": "function", "params": [{"type": "Event", "name": "ev", "description": " the event"}]}, "simulateEvent": {"static": "", "params": [{"type": "Element", "name": "node", "description": "  Required. The element to click on."}, {"type": "String", "name": "eventType", "description": "  Required. The event type to fire."}, {"type": "Element", "name": "rt", "description": "  Optional. The ancestor to stop on; default is document."}], "description": "Simulates an event on an element. Will iterate up the DOM tree until the root is reached or node becomes undefined.", "guessedname": "simulateEvent", "guessedtype": "function"}}, "static": "", "file": "event.js", "guessedtype": "function", "shortname": "Event", "properties": {"isSafari": {"description": "Safari detection", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "isSafari", "guessedtype": "property"}, "CAPTURE": {"description": "The original capture parameter passed into _addListener", "static": "", "guessedname": "CAPTURE", "guessedtype": "property", "type": "int", "final": ""}, "WFN": {"description": "Function wrapped for scope correction and cleanup, int constant", "static": "", "guessedname": "WFN", "guessedtype": "property", "type": "int", "final": ""}, "throwErrors": {"default": "false", "type": "boolean", "description": "Errors thrown by subscribers of custom events are caught\nand the error message is written to the debug console.  If\nthis property is set to true, it will also re-throw the\nerror.", "guessedname": "throwErrors", "guessedtype": "property"}, "legacyEvents": {"guessedname": "legacyEvents", "static": "", "description": "Cache of DOM0 event handlers to work around issues with DOM2 events\nin Safari", "private": "", "guessedtype": "property"}, "legacyHandlers": {"guessedname": "legacyHandlers", "static": "", "description": "Listener stack for DOM0 events", "private": "", "guessedtype": "property"}, "FN": {"description": "Function to execute, int constant", "static": "", "guessedname": "FN", "guessedtype": "property", "type": "int", "final": ""}, "DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 2000@amp;20 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "isIE": {"description": "IE detection", "deprecated": "use YAHOO.env.ua.ie", "private": "", "static": "", "guessedname": "isIE", "guessedtype": "property"}, "unloadListeners": {"description": "User-defined unload function that will be fired before all events\nare detached", "private": "", "static": "", "guessedname": "unloadListeners", "guessedtype": "property", "type": "array"}, "OVERRIDE": {"description": "The original scope parameter passed into addListener", "static": "", "guessedname": "OVERRIDE", "guessedtype": "property", "type": "int", "final": ""}, "EL": {"description": "Element to bind, int constant", "static": "", "guessedname": "EL", "guessedtype": "property", "type": "int", "final": ""}, "OBJ": {"description": "Object passed in by the user that will be returned as a \nparameter to the callback, int constant.  Specific to\nunload listeners", "static": "", "guessedname": "UNLOAD_OBJ", "guessedtype": "property", "type": "int", "final": ""}, "elCache\nDOM element cache": {"deprecated": "Elements are not cached due to issues that arise when\nelements are removed and re-added", "static": "", "guessedname": "elCache", "private": "", "guessedtype": "property"}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "webkit": {"description": "webkit version", "deprecated": "use YAHOO.env.ua.webkit", "private": "", "static": "", "guessedname": "webkit", "guessedtype": "property", "type": "string"}, "legacyMap": {"guessedname": "legacyMap", "static": "", "description": "Lookup table for legacy events", "private": "", "guessedtype": "property"}, "loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "loadComplete", "guessedtype": "property", "type": "boolean"}, "webkitKeymap": {"description": "Normalized keycodes for webkit\/safari", "private": "", "static": "", "guessedname": "webkitKeymap", "guessedtype": "property", "type": "{int: int}", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "counter": {"guessedname": "counter", "static": "", "description": "Counter for auto id generation", "private": "", "guessedtype": "property"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "ADJ_SCOPE": {"description": "Adjusted scope, either the element we are registering the event\non or the custom object passed in by the listener, int constant", "static": "", "guessedname": "ADJ_SCOPE", "guessedtype": "property", "type": "int", "final": ""}, "onAvailStack": {"guessedname": "onAvailStack", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}, "listeners": {"description": "Cache of wrapped listeners", "private": "", "static": "", "guessedname": "listeners", "guessedtype": "property", "type": "array"}, "retryCount": {"guessedname": "retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "TYPE": {"description": "Type of event, int constant", "static": "", "guessedname": "TYPE", "guessedtype": "property", "type": "int", "final": ""}}, "description": "Extending YAHOO.util.Event."}, "YAHOO.util.Dom": {"guessedname": "Dom", "name": "YAHOO.util.Dom", "namespace": "YAHOO.util", "module": "dom", "methods": {"getElementsBy": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}], "description": "Returns a array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and\/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing\/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.", "guessedname": "getElementsBy", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "An array of elements that have the given class name"}, "params": [{"type": "String", "name": "className", "description": " The class name to match against"}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}, {"type": "Function", "name": "apply", "description": " (optional) A function to apply to each element when found"}], "description": "Returns a array of HTMLElements with the given class.\nFor optimized performance, include a tag and\/or root node when possible.\nNote: This method operates against a live collection, so modifying the \ncollection in the callback (removing\/appending nodes, etc.) will have\nside effects.  Instead you should iterate the returned nodes array,\nas you would with the native \"getElementsByTagName\" method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "show": {"static": "", "params": [{"type": "String|Element", "name": "arg1", "description": "  Required. Pointer or string reference to DOM element to style."}, {"type": "String|Element", "name": "argX", "description": "  Optional. Additional pointers or string references to DOM element to style."}], "description": "Show any number of elements removing class 'hide'.", "guessedname": "show", "guessedtype": "function"}, "scrollTo": {"static": "", "params": [{"type": "Number", "name": "x", "description": "  Required. The x position to scroll to."}, {"type": "Number", "name": "y", "description": "  Required. The y position to scroll to."}, {"type": "Number", "name": "n", "description": "  Optional. The number of steps to take; default is 5."}, {"type": "Number", "name": "ms", "description": "  Optional. The length of time to animate."}, {"type": "Function", "name": "ease", "description": "  Optional. The easing function."}], "description": "Scrolls to a given position, animating using a fractal algorithm.", "guessedname": "scrollTo", "guessedtype": "function"}, "createNode": {"return": {"type": "Element", "description": "The newly created element."}, "description": "If possible creates the document element according to the xhtml namespace, otherwise, normally;\nfailure returns a Function that throws an exception.", "static": "", "guessedname": "createNode", "guessedtype": "function", "params": [{"type": "String", "name": "tagName", "description": "  Required. Tag name to create."}]}, "flashBackgroundColor": {"static": "", "params": [{"type": "Element", "name": "node", "description": "  Required. Pointer or string reference to DOM element to animate."}, {"type": "String", "name": "color", "description": "  Required. The color to animate to."}], "description": "Animates the background color of the element with a color flash.", "guessedname": "flashBackgroundColor", "guessedtype": "function"}, "generateId": {"return": {"type": "String | Array", "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."}, {"type": "String", "name": "prefix", "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."}], "description": "Returns an ID and applies it to the element \"el\", if provided.", "guessedname": "generateId", "guessedtype": "function"}, "getDocumentWidth": {"return": {"type": "Int", "description": "The width of the actual document (which includes the body and its margin)."}, "description": "Returns the width of the document.", "guessedname": "getDocumentWidth", "guessedtype": "function"}, "replace": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to replace content of."}, {"type": "String", "name": "text", "description": "  Required. The innerHTML value equivalent to replace content with."}], "description": "Replaces all children of elem as a textnode of text.", "guessedname": "replace", "guessedtype": "function"}, "isAncestorOf": {"return": {"type": "Boolean", "description": "Is ancestor of decendant."}, "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy; this is different from YUI method,\nbecause it takes no shortcuts and works right all the time.", "static": "", "guessedname": "isAncestorOf", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "ancestor", "description": "  Required. The possible ancestor."}, {"type": "String | HTMLElement", "name": "decendant", "description": "  Required. The possible decendant."}]}, "getY": {"return": {"type": "Number | Array", "description": "The Y position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "className", "description": ""}], "description": "Returns the nearest ancestor with the given className.", "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "cleanWhitespace": {"return": {"type": "Element", "description": "Cleaned DOM node for convenience or NULL."}, "description": "Removes whitespace-only text node children.", "static": "", "guessedname": "cleanWhitespace", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "getDocumentScrollTop": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the top"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the top scroll value of the document", "guessedname": "getDocumentScrollTop", "guessedtype": "function"}, "findFirstText": {"return": {"type": "Element", "description": "The first available text node or null."}, "description": "Find and replace the first text (ignores whitespaces), or append a textnode when there is no textnode.", "static": "", "guessedname": "findFirstText", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}]}, "getDocumentScrollLeft": {"return": {"type": "Int", "description": "The amount that the document is scrolled to the left"}, "params": [{"type": "HTMLDocument", "name": "document", "description": " (optional) The document to get the scroll value of"}], "description": "Returns the left scroll value of the document", "guessedname": "getDocumentScrollLeft", "guessedtype": "function"}, "getBackgroundColor": {"return": {"type": "String", "description": "The background color."}, "description": "Determines the background color of an element in Hexidecimal format, will head up the document stack, if transparent.", "static": "", "guessedname": "getBackgroundColor", "guessedtype": "function", "params": [{"type": "Element", "name": "node", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "animate": {"return": {"type": "Object", "description": "YAHOO animation object."}, "description": "Removes a node from the DOM, using a fading animation and clearning all events.", "static": "", "guessedname": "animate", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to delete."}, {"type": "Object", "name": "obj", "description": "  Optional. The animation object data; default will fade opacity from 1 to 0.25."}, {"type": "Number", "name": "dur", "description": "  Optional. The duration of the animation; default is 0.5s."}, {"type": "Object", "name": "ease", "description": "  Optional. The easing method; default is easeOut."}, {"type": "Array} Optional. A collection of animation event callback functions {id: the event, fx: callback function", "name": "functions", "description": " ."}]}, "getDocumentHeight": {"return": {"type": "Int", "description": "The height of the actual document (which includes the body and its margin)."}, "description": "Returns the height of the document.", "guessedname": "getDocumentHeight", "guessedtype": "function"}, "createTag": {"return": {"type": "Element", "description": "The newly created element; returns null otherwise."}, "description": "Creates and returns an html element and adds attributes from the hash.", "static": "", "guessedname": "createTag", "guessedtype": "function", "params": [{"type": "String", "name": "tagName", "description": "  Required. Tag name to create."}, {"type": "Object", "name": "hash", "description": "  Optional. The hashtable of attributes, styles, and classes; defaults is empty object."}]}, "getChildNode": {"return": {"type": "Element", "description": "The pointer to the found DOM node or NULL."}, "description": "Fetchs the childNode of the node, whilst ignoring whitespaces.", "static": "", "guessedname": "getChildNode", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "Number", "name": "i", "description": "  Required. The index of the node to get;"}]}, "getFirstText": {"return": {"type": "String", "description": "The value of the first text node."}, "description": "Retrieves the first text nodes value.", "static": "", "guessedname": "getFirstText", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}]}, "getAncestorBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}], "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.\nFor performance reasons, IDs are not accepted and argument validation omitted.", "guessedname": "getAncestorBy", "guessedtype": "function"}, "hide": {"static": "", "params": [{"type": "String|Element", "name": "arg1", "description": "  Required. Pointer or string reference to DOM element to style."}, {"type": "String|Element", "name": "argX", "description": "  Optional. Additional pointers or string references to DOM element to style."}], "description": "Hides any number of elements using class 'hide'; doesn't attempt to correct \"display:none\", designers should use a class to apply display instead.", "guessedname": "hide", "guessedtype": "function"}, "isElementType": {"return": {"type": "Boolean", "description": "True when the DOM node attribute nodeType is included in the arguments."}, "description": "Tests if the node has the same type as those included in arguments 2+.", "static": "", "guessedname": "isElementType", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}, {"type": "Number", "name": "arg1", "description": "  Required. A node type to compare with."}, {"type": "Number", "name": "argX", "description": "  Optional. Additional node types to compare with."}]}, "getPreviousSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the previous sibling that is an HTMLElement. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getPreviousSiblingBy", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement | Array", "description": "A DOM reference to an HTML element or an array of HTMLElements."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns an HTMLElement reference.", "guessedname": "get", "guessedtype": "function"}, "replaceClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getNextSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the next sibling that is an HTMLElement", "guessedname": "getNextSibling", "guessedtype": "function"}, "getBodyElement": {"return": {"type": "Element", "description": "Body DOM node for convenience or NULL."}, "description": "Retrieves the HTMLBodyElement, x-browser safe.", "static": "", "guessedname": "getBodyElement", "guessedtype": "function", "params": [{"type": "Document", "name": "newDoc", "description": "  Optional. The document to use."}]}, "setY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " To use as the Y coordinate for the element(s)."}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getFirstChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the first HTMLElement child that passes the test method.", "guessedname": "getFirstChildBy", "guessedtype": "function"}, "getLastChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the last HTMLElement child.", "guessedname": "getLastChild", "guessedtype": "function"}, "getClientHeight": {"deprecated": "Now using getViewportHeight.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The height of the viewable area of the page."}, "description": "Returns the height of the client (viewport).", "guessedname": "getClientHeight", "guessedtype": "function"}, "inDocument": {"return": {"type": "Boolean", "description": "Whether or not the element is present in the current document"}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The element to search for"}], "description": "Determines whether an HTMLElement is present in the current document.", "guessedname": "inDocument", "guessedtype": "function"}, "getClientRegion": {"return": {"type": "Region", "description": "A Region object representing the viewport which accounts for document scroll"}, "description": "Creates a Region based on the viewport relative to the document.", "guessedname": "getClientRegion", "guessedtype": "function"}, "getAncestorByTagName": {"return": {"type": "Object", "description": "HTMLElement"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}, {"type": "String", "name": "tagName", "description": ""}], "description": "Returns the nearest ancestor with the given tagName.", "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "toggleClass": {"params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element apply class to."}, {"type": "String", "name": "className", "description": "  Required. The class name to apply."}, {"type": "Boolean", "name": "b", "description": "  Optional. Force class instead of toggle."}], "description": "Toggles the className for the provided element as a result of the boolean.", "guessedname": "toggleClass", "guessedtype": "function"}, "insertBefore": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node before"}], "description": "Inserts the new node as the previous sibling of the reference node", "guessedname": "insertBefore", "guessedtype": "function"}, "toggleDisplay": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to style."}, {"type": "Boolean", "name": "b", "description": "  Optional. Force display instead of toggle."}], "description": "Hides displayed elements and shows non-displayed element.", "guessedname": "toggleDisplay", "guessedtype": "function"}, "getViewportHeight": {"return": {"type": "Int", "description": "The height of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height of the viewport.", "guessedname": "getViewportHeight", "guessedtype": "function"}, "addClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to add the class to"}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}, "isTagName": {"return": {"type": "Boolean", "description": "True when the DOM node attribute nodeName is included in the arguments."}, "description": "Tests if the node has the same tag name as those included in arguments 2+.", "static": "", "guessedname": "isTagName", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}, {"type": "String", "name": "arg1", "description": "  Required. A node name to compare with."}, {"type": "String", "name": "argX", "description": "  Optional. Additional node names to compare with."}]}, "getChildren": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns an array of HTMLElement childNodes.", "guessedname": "getChildren", "guessedtype": "function"}, "deleteNode": {"return": {"type": "Boolean", "description": "Node deleted."}, "description": "Removes a node from the DOM, using a fading animation and clearning all events.", "static": "", "guessedname": "deleteNode", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to delete."}, {"type": "Function", "name": "func", "description": "  Optional. The callback function after animation finishes; default is undefined."}, {"type": "Boolean", "name": "isRemoveListener", "description": "  Optional. True, when you want to purge event listeners from node and children; default is undefined."}, {"type": "Boolean", "name": "isAnimate", "description": "  Optional. Animated this action."}]}, "getLastChildBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns the last HTMLElement child that passes the test method.", "guessedname": "getLastChildBy", "guessedtype": "function"}, "getViewportWidth": {"return": {"type": "Int", "description": "The width of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current width of the viewport.", "guessedname": "getViewportWidth", "guessedtype": "function"}, "exec": {"return": {"type": "Element", "description": "The found node or NULL."}, "description": "Navigates on the element through native JavaScript properties or YUI equivalent, as provided by instructions.", "static": "", "guessedname": "exec", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search from."}, {"type": "", "name": "instructions", "description": " (String} Required. The '.' delimited navigation instructions."}]}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "The collection of nodes."}, "description": "Wraps the native getElementsByTagName method, converting the nodelist to an Array object.", "static": "", "guessedname": "getElementsByTagName", "guessedtype": "function", "params": [{"type": "String", "name": "tagName", "description": "  Required. The DOM node tag to search for."}, {"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}]}, "removeClass": {"return": {"type": "Boolean | Array", "description": "A pass\/fail boolean or array of booleans"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "visibility": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to toggle style of."}, {"type": "Boolean", "name": "b", "description": "  Optional. Force visible instead of toggle."}], "description": "Toggles the visibility of element.", "guessedname": "toggleVisibility", "guessedtype": "function"}, "isTextNode": {"return": {"type": "Boolean", "description": "True, if the elem is a comment, text, or cdata node."}, "description": "Tests if the node is one of 3 text types.", "static": "", "guessedname": "isTextNode", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "insertAfter": {"return": {"type": "HTMLElement", "description": "The node that was inserted (or null if insert fails)"}, "params": [{"type": "String | HTMLElement", "name": "newNode", "description": " The node to be inserted"}, {"type": "String | HTMLElement", "name": "referenceNode", "description": " The node to insert the new node after"}], "description": "Inserts the new node as the next sibling of the reference node", "guessedname": "insertAfter", "guessedtype": "function"}, "getContentAsFloat": {"return": {"type": "String", "description": "The innerHTML of the node as a float."}, "description": "Returns the elements content as a float.", "static": "", "guessedname": "getContentAsFloat", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "setFirstText": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. A pointer or string reference to DOM element to set first text of."}, {"type": "String", "name": "text", "description": "  Required. The text value to set."}], "description": "Find and replace the first text, or append a textnode when there is no textnode.", "guessedname": "setFirstText", "guessedtype": "function"}, "setXY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}, {"type": "Array", "name": "pos", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "getPreviousSibling": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the previous sibling that is an HTMLElement", "guessedname": "getPreviousSibling", "guessedtype": "function"}, "scrollTop": {"static": "", "description": "Scroll to the top of the page using the native window.scroll method and 0,0 coordinates.", "guessedname": "scrollTop", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property to be set."}, {"type": "String", "name": "val", "description": " The value to apply to the given property."}], "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.", "guessedname": "setStyle", "guessedtype": "function"}, "removeChildNodes": {"return": {"type": "Number", "description": "The number of removed nodes."}, "description": "Remove childNodes from node, should be used instead of element.innerHTML = '' as this is xhtml compliant.", "static": "", "guessedname": "removeChildNodes", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to clear."}]}, "getTagName": {"return": {"type": "String", "description": "The tagName or an emtpy string."}, "description": "Safe method for fetching the tagName of a node; also converts to lower-case.", "static": "", "guessedname": "getTagName", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "setX": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " The value to use as the X coordinate for the element(s)."}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "getDocumentScroll": {"return": {"type": "Object", "description": "An object where left\/top (Number) are the values the document is scrolled to."}, "description": "Returns the left and top scroll value of the document.", "static": "", "guessedname": "getDocumentScroll", "guessedtype": "function", "params": [{"type": "HTMLDocument", "name": "doc", "description": "  Optional. The document to evaluate."}]}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "getX": {"return": {"type": "Number | Array", "description": "The X position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getDocumentSize": {"return": {"type": "Object", "description": "An object where height\/width (Number) are the actual height\/width of document (which includes the body and its margin)."}, "description": "Returns the height and width of the document.", "static": "", "guessedname": "getDocumentSize", "guessedtype": "function", "params": [{"type": "HTMLDocument", "name": "doc", "description": "  Optional. The document to evaluate."}]}, "getClientWidth": {"deprecated": "Now using getViewportWidth.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The width of the viewable area of the page."}, "description": "Returns the width of the client (viewport).", "guessedname": "getClientWidth", "guessedtype": "function"}, "getContentAsInteger": {"return": {"type": "String", "description": "The innerHTML of the node as a integer."}, "description": "Returns the elements content as a integer.", "static": "", "guessedname": "getContentAsInteger", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "getViewport": {"static": "", "return": {"type": "Object", "description": "An object where height\/width (Number) are the current viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height and width of the viewport.", "guessedname": "getViewport", "guessedtype": "function"}, "batch": {"return": {"type": "Any | Array", "description": "The return value(s) from the supplied method"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An element or array of elements to apply the method to"}, {"type": "Function", "name": "method", "description": " The method to apply to the element(s)"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "override", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Runs the supplied method against each item in the Collection\/Array.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).", "guessedname": "batch", "guessedtype": "function"}, "getChildrenBy": {"return": {"type": "Array", "description": "A static array of HTMLElements"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to start from"}, {"type": "Function", "name": "method", "description": " A boolean function used to test children\nthat receives the node being tested as its only argument"}], "description": "Returns an array of HTMLElement childNodes that pass the test method.", "guessedname": "getChildrenBy", "guessedtype": "function"}, "isAncestor": {"return": {"type": "Boolean", "description": "Whether or not the haystack is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "haystack", "description": " The possible ancestor"}, {"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "isAncestor", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region | Array", "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).", "guessedname": "getRegion", "guessedtype": "function"}, "getStyle": {"return": {"type": "String | Array", "description": "The current value of the style property for the element(s)."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property whose value is returned."}], "description": "Normalizes currentStyle and ComputedStyle.", "guessedname": "getStyle", "guessedtype": "function"}, "getNextSiblingBy": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "HTMLElement", "name": "node", "description": " The HTMLElement to use as the starting point"}, {"type": "Function", "name": "method", "description": " A boolean function used to test siblings\nthat receives the sibling node being tested as its only argument"}], "description": "Returns the next HTMLElement sibling that passes the boolean method. \nFor performance reasons, IDs are not accepted and argument validation omitted.\nReturns the nearest HTMLElement sibling if no method provided.", "guessedname": "getNextSiblingBy", "guessedtype": "function"}, "getContentAsString": {"return": {"type": "String", "description": "The innerHTML of the node."}, "description": "Returns the elements content.", "static": "", "guessedname": "getContentAsString", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "cloneDimensions": {"static": "", "params": [{"type": "Element|String", "name": "srcElem", "description": "  Required. The element to get position of."}, {"type": "Element|String", "name": "applyElem", "description": "  Required. The element to set position of."}], "description": "Positions the second element at the same coords as the first.", "guessedname": "cloneDimensions", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to test"}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}, "getCommonAncestor": {"return": {"type": "Element", "description": "The desired node or null."}, "description": "Find the common ancestor shared by two elements, or NULL otherwise.", "static": "", "guessedname": "getCommonAncestor", "guessedtype": "function", "params": [{"type": "Element", "name": "elem1", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "Element", "name": "elem1", "description": "  Required. Pointer or string reference to DOM element to search."}]}, "getImage": {"return": {"type": "Image", "description": "A Javascript Image Object with the src set."}, "description": "Returns an image object with src, useful for image caching.", "static": "", "guessedname": "getImage", "guessedtype": "function", "params": [{"type": "String", "name": "src", "description": "  Required. The location of the image."}]}, "getFirstChildByTagAndClass": {"return": {"type": "Element", "description": "The first matching element or null."}, "description": "Returns the first childnode of the node with tag name and class name.", "static": "", "guessedname": "getFirstChildByTagAndClass", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "String", "name": "tagName", "description": "  Optional. The DOM node tag name to limit by."}, {"type": "String", "name": "className", "description": "  Optional. The DOM node attribute class name to limit by."}]}, "getFirstChild": {"return": {"type": "Object", "description": "HTMLElement or null if not found"}, "params": [{"type": "String | HTMLElement", "name": "node", "description": " The HTMLElement or an ID to use as the starting point"}], "description": "Returns the first HTMLElement child.", "guessedname": "getFirstChild", "guessedtype": "function"}}, "static": "", "file": "dom.js", "guessedtype": "property", "shortname": "Dom", "description": "Extending YAHOO.util.Dom."}, "YAHOO.util.Easing": {"name": "YAHOO.util.Easing", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end.", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end.", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end.", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end.", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "animation.js", "guessedtype": "property", "shortname": "Easing", "description": "Singleton that determines how an animation proceeds from start to end."}, "C.HTML.RegExp": {"name": "C.HTML.RegExp", "constructors": [{"description": "The JavaScript RegExp Object\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}], "namespace": "C.HTML", "module": "window", "methods": {"compile": {"return": {"type": "Boolean", "description": "true, when the regex matches"}, "params": [{"type": "String", "name": "regexp", "description": "  Required. The new regular expression to search for."}], "public": "", "description": "The compile() method is used to change the regular expression.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "exec": {"return": {"type": "String", "description": "found text, or null"}, "params": [{"type": "String", "name": "regexp", "description": "  Required. The String to search."}], "public": "", "param": "regexp {String} Required. The String to search.", "description": "The exec() method is used to search for a match of a regular expression in a String.\nThis method returns the matched text if a match is found, and null if not.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}}, "file": "regexp.js", "shortname": "RegExp", "properties": {"rightContext": {"type": "String", "description": "The rightContext property is the substring from after the characters most recently matched.\nThis property contains everything from the String from after the match.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "global": {"type": "String", "description": "The global property is used to return whether or not the \"g\" modifier is used in the regular expression.\nThe \"g\" modifier is set if the regular expression should be tested against all possible matches in the String.\nThis property is \"TRUE\" if the \"g\" modifier is set, \"FALSE\" otherwise.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "lastIndex": {"type": "Number", "description": "The lastIndex property specifies the index (placement) in the String where to start the next match.\nThe index is a number specifying the placement of the first character after the last match.\nThis property only works if the \"g\" modifier is set.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "ignoreCase": {"type": "String", "description": "The ignoreCase property is used to return whether or not the \"i\" modifier is used in the regular expression.\nThe \"i\" modifier is set if the regular expression should ignore the case of characters.\nThis property is \"TRUE\" if the \"i\" modifier is set, \"FALSE\" otherwise.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "source": {"type": "String", "description": "The source property is used to return the text used for pattern matching.\nThe returned text is everything except the forward slashes and any flags.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "lastMatch": {"type": "String", "description": "The lastMatch property is the last matched characters.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "leftContext": {"type": "String", "description": "The leftContext property is the substring in front of the characters most recently matched.\nThis property contains everything from the String from before the match.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "multiline": {"type": "Boolean", "description": "The global property is used to return whether or not the \"m\" modifier is used in the regular expression.\nThe \"m\" modifier is set if the regular expression should be tested against possible matches over multiple lines.\nThis property is \"TRUE\" if the \"m\" modifier is set, \"FALSE\" otherwise.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "lastParen": {"type": "String", "description": "The lastParen property is the last parenthesized substring match.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "input": {"type": "String", "description": "The input property is the String the pattern match is performed.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}, "prototype": {"type": "Object", "description": "Allows you to add properties and methods to the object\nsince FireFox 1.0, Netscape 4.0, and IE 4.0", "public": ""}}, "description": "The JavaScript RegExp Object\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "Core": {"name": "Core", "namespace": "", "module": "mvc", "methods": {"getUrl": {"static": "", "return": {"type": "String", "description": "The page URL."}, "description": "Retrieves the URL from the location object; ensures is a string.", "guessedname": "getUrl", "guessedtype": "function"}, "timeEnd": {"public": "", "params": [{"type": "String", "name": "name", "description": "  Required. The name of this event."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number."}], "description": "Stops a timer created by a call to console.time(name) and writes the time elapsed.", "guessedname": "timeEnd", "guessedtype": "function"}, "_prependTime": {"guessedname": "_prependTime", "params": [{"type": "String", "name": "message", "description": "  Required. The value to prepend."}], "description": "Prepends the time onto the message.", "private": "", "guessedtype": "function"}, "replace": {"static": "", "params": [{"type": "String", "name": "url", "description": "  Optional. The URL."}], "description": "Replaces the page by calling window.location.replace(DOMString URL); does not call create a browser history node.", "guessedname": "replace", "guessedtype": "function"}, "getProtocol": {"static": "", "return": {"type": "String", "description": "The page protocol."}, "description": "Retrieves the protocol from the location object; ensures is a string.", "guessedname": "getProtocol", "guessedtype": "function"}, "getLogLevel": {"static": "", "return": {"type": "Number", "description": "The current log level."}, "description": "Returns the log level of the application.", "guessedname": "getLogLevel", "guessedtype": "function"}, "group": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Writes a message to the console and opens a nested block to indent all future messages sent to the console; filename and linenumber required.", "guessedname": "group", "guessedtype": "function"}, "log": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}], "description": "Inserts a log statement into the logging window.", "guessedname": "log", "guessedtype": "property"}, "dirxml": {"public": "", "params": [{"type": "Element", "name": "node", "description": "  Required. The evaluation element."}], "description": "Prints the XML source tree of an HTML or XML element.", "guessedname": "dirxml", "guessedtype": "function"}, "setLogLevel": {"static": "", "params": [{"type": "Number", "name": "lvl", "description": "  Required. The new log level."}], "description": "Sets the log level of the application.", "guessedname": "setLogLevel", "guessedtype": "function"}, "getHash": {"static": "", "return": {"type": "String", "description": "The page hash."}, "description": "Retrieves the hash from the location object; ensures is a string.", "guessedname": "getHash", "guessedtype": "function"}, "profileEnd": {"description": "Prevents the profileEnd call from throwing an exception in non-FireBug enabled browsers.", "public": "", "guessedname": "profileEnd", "guessedtype": "function"}, "time": {"public": "", "params": [{"type": "String", "name": "name", "description": "  Required. The name of this event."}], "description": "Creates a new timer under the given name. Call console.timeEnd(name) with the same name to stop the timer and print the time elapsed.", "guessedname": "time", "guessedtype": "function"}, "getPort": {"static": "", "return": {"type": "String", "description": "The page port."}, "description": "Retrieves the port from the location object; ensures is a string.", "guessedname": "getPort", "guessedtype": "function"}, "_setWindow": {"private": "", "description": "Create a new one and pointers to interal document.", "guessedname": "_setWindow", "guessedtype": "function"}, "getHost": {"static": "", "return": {"type": "String", "description": "The page host."}, "description": "Retrieves the host from the location object; ensures is a string.", "guessedname": "getHost", "guessedtype": "function"}, "profile": {"description": "Prevents the profile call from throwing an exception in non-FireBug enabled browsers.", "public": "", "guessedname": "profile", "guessedtype": "function"}, "info": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Inserts an info statement into the logging window with a line number.", "guessedname": "info", "guessedtype": "function"}, "trace": {"description": "Prevents the trace call from throwing an exception in non-FireBug enabled browsers.", "public": "", "guessedname": "trace", "guessedtype": "function"}, "getPageName": {"static": "", "return": {"type": "String", "description": "The page name."}, "description": "Retrieves the page name from the URL.", "guessedname": "getPageName", "guessedtype": "function"}, "_hasConsole": {"guessedname": "_hasConsole", "return": {"type": "Boolean", "description": "The console exists."}, "description": "Evaluates if the FireBug console object is available.", "private": "", "guessedtype": "function"}, "warn": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Inserts a warn statement into the logging window with a line number.", "guessedname": "warn", "guessedtype": "function"}, "debug": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Inserts a debug statement into the logging window with a line number.", "guessedname": "debug", "guessedtype": "function"}, "_log": {"guessedname": "_log", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}], "description": "Inserts a log statement into the logging window.", "private": "", "guessedtype": "function"}, "getToken": {"static": "", "return": {"type": "String", "description": "The XSRF token."}, "description": "Retrieves the value of XSRF token from the DOM, or throws an exception when not found.", "guessedname": "getToken", "guessedtype": "function"}, "count": {"public": "", "params": [{"type": "String", "name": "name", "description": "  Required. The name of this event."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number."}], "description": "Writes the number of times that the line of code where count was called was executed.", "guessedname": "count", "guessedtype": "function"}, "assert": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Tests an expression, inserting an error message, when false.", "guessedname": "assert", "guessedtype": "function"}, "getSearch": {"static": "", "return": {"type": "String", "description": "The page query string."}, "description": "Retrieves the search from the location object; ensures is a string.", "guessedname": "getSearch", "guessedtype": "function"}, "reload": {"static": "", "description": "Refreshes the page by calling window.location.reload.", "guessedname": "reload", "guessedtype": "function"}, "error": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Inserts an error statement into the logging window with a line number.", "guessedname": "error", "guessedtype": "function"}, "groupEnd": {"public": "", "params": [{"type": "String", "name": "message", "description": "  Required. The message."}, {"type": "Object", "name": "objectX", "description": "  Optional. Objects to substitue in message."}, {"type": "String", "name": "fileName", "description": "  Required. The JavaScript filename; the second to last parameter."}, {"type": "Number", "name": "lineNumber", "description": "  Required. The line number; the last parameter."}], "description": "Closes the most recently opened block created by a call to console.group.", "guessedname": "groupEnd", "guessedtype": "function"}, "getConsole": {"static": "", "return": {"type": "Object", "description": "The console object."}, "description": "Fetches the console object for logging; emulates console in non-FF browsers.", "guessedname": "getConsole", "guessedtype": "function"}, "dir": {"public": "", "params": [{"type": "Object", "name": "o", "description": "  Required. The evaluation object."}], "description": "Prints a listing of all properties of the object.", "guessedname": "dir", "guessedtype": "function"}}, "static": "", "file": "core.js", "shortname": "Core", "properties": {"Util": {"type": "Object", "static": "", "description": "The utility namespaces.", "guessedname": "Util", "guessedtype": "property"}, "Controller": {"type": "Object", "static": "", "description": "The controller namespace.", "guessedname": "Controller", "guessedtype": "property"}, "Version": {"description": "The current project version #.", "static": "", "guessedname": "VERSION", "guessedtype": "property", "type": "String", "final": ""}, "Model": {"type": "Object", "description": "The model object namespace.", "guessedname": "Model", "guessedtype": "property"}, "Constants": {"type": "Object", "static": "", "description": "Object namespace placeholder for attaching global constants; inner Function to create Client Singleton.", "guessedname": "Constants", "guessedtype": "property"}, "View": {"type": "Object", "static": "", "description": "The view object namespace.", "guessedname": "View", "guessedtype": "property"}}, "description": "The console pacakge extends the \"mvc\/core.js\" package with additional console logging capabilities. This package\nfirst attempts to use the FireBug console logger, and then, when that is not available will open a new browser window\nand log there."}, "YAHOO.util.Scroll": {"name": "YAHOO.util.Scroll", "constructors": [{"params": [{"type": "String or HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Scroll", "extends": "YAHOO.util.ColorAnim", "superclass": "YAHOO.util.ColorAnim", "file": "animation.js", "guessedtype": "function", "shortname": "Scroll", "requires": "YAHOO.util.Anim", "description": "Anim subclass for scrolling elements to a position defined by the \"scroll\"\nmember of \"attributes\".  All \"scroll\" members are arrays with x, y scroll positions.\n<p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.util.Bezier": {"name": "YAHOO.util.Bezier", "namespace": "YAHOO.util", "module": "animation", "guessedname": "Bezier", "methods": {"getPosition": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}], "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "guessedname": "getPosition", "guessedtype": "function"}}, "file": "animation.js", "guessedtype": "function", "shortname": "Bezier", "description": "Used to calculate Bezier splines for any number of control points."}, "YAHOO.util.Form": {"name": "YAHOO.util.Form", "namespace": "YAHOO.util", "module": "form", "methods": {"toggleEnabled": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to enable fields of."}, {"type": "Boolean", "name": "b", "description": "  Optional. True, when enabling, falsy to disable."}], "description": "Enables the value of the field.", "guessedname": "toggleEnabled", "guessedtype": "function"}, "enable": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}], "description": "Enables the form and all it's serializable elements.", "guessedname": "enable", "guessedtype": "function"}, "getElementsByName": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "String", "name": "typeName", "description": " \tOptional. The type of input to filter by."}, {"type": "String", "name": "name", "description": "  Optional. The name to filter by."}, {"type": "Boolean", "name": "multi", "description": "  Optional. True, when mulitple elements use this name."}], "description": "Retrieves all input elements of the form with typeName and\/or name.", "guessedname": "getInputs", "guessedtype": "function"}, "clear": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "Array", "name": "iTypes", "description": "  Optional. An array of input types to ignore."}], "description": "Removes all values from form fields.", "guessedname": "clear", "guessedtype": "function"}, "focusFirstElement": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "Array", "name": "iTypes", "description": "  Optional. An array of input types to ignore; default is 'hidden'."}], "description": "Retrieves the first non-hidden element of the form and focuses on it.", "guessedname": "focusFirstElement", "guessedtype": "function"}, "findFirstElement": {"return": {"type": "Element", "description": "The first field not of the ignored types or NULL."}, "description": "Retrieves the first non-hidden element of the form.", "static": "", "guessedname": "findFirstElement", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}, {"type": "Array", "name": "iTypes", "description": "  Optional. An array of input types to ignore; default is 'hidden'."}]}, "disable": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to search."}], "description": "Disables the form and all it's serializable elements.", "guessedname": "disable", "guessedtype": "function"}, "serialize": {"return": {"type": "String", "description": "The serialized form."}, "description": "Serializes the form into a query string, collection &key=value pairs.", "static": "", "guessedname": "serialize", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. The pointer or string reference to DOM Form element."}]}, "getFields": {"return": {"type": "Array", "description": "A collection of Form fields."}, "description": "Retrieves all serializable elements of the form; sorts them top to bottom, left to right by defualt.\nnote: DOM iterating is faster than using getElementsByTagName(\"*\")", "static": "", "guessedname": "getFields", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. The pointer or string reference to DOM Form element."}, {"type": "String", "name": "fldName", "description": "  Optional. A name to filter by."}, {"type": "Array", "name": "iTypes", "description": "  Optional. List of element types to ignore; default is hidden."}]}}, "static": "", "file": "form.js", "shortname": "Form", "description": "Provides helper methods for Form elements."}, "C.HTML": {"name": "C.HTML", "namespace": "C", "module": "window", "guessedname": "HTML", "static": "", "file": "constant.js", "guessedtype": "property", "shortname": "HTML", "description": "The global object to hold all HTML constants."}, "YAHOO.util.Subscriber": {"name": "YAHOO.util.Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The function to execute"}, {"type": "Object", "name": "obj", "description": "      An object to be passed along when the event fires"}, {"type": "boolean", "name": "override", "description": " If true, the obj passed in becomes the execution\nscope of the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "YAHOO.util", "module": "event", "guessedname": "Subscriber", "methods": {"getScope": {"params": [{"type": "Object", "name": "defaultScope", "description": " the scope to use if this listener does not\noverride it."}], "description": "Returns the execution scope for this listener.  If override was set to true\nthe custom obj will be the scope.  If override is an object, that is the\nscope, otherwise the default scope will be used.", "guessedname": "getScope", "guessedtype": "function"}, "contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "obj", "description": " an object to be passed along when the event fires"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}}, "file": "event.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"override": {"type": "boolean|object", "description": "The default execution scope for the event listener is defined when the\nevent is created (usually the object which contains the event).\nBy setting override to true, the execution scope becomes the custom\nobject passed in by the subscriber.  If override is an object, that \nobject becomes the scope.", "guessedname": "override", "guessedtype": "property"}, "obj": {"type": "object", "description": "An optional custom object that will passed to the callback when\nthe event fires", "guessedname": "obj", "guessedtype": "property"}, "fn": {"type": "function", "description": "The callback that will be execute when the event fires", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "YAHOO.util.Connect": {"name": "YAHOO.util.Connect", "namespace": "YAHOO.util", "module": "connection", "guessedname": "Connect", "methods": {"asyncRequest": {"return": {"type": "object", "description": "Returns the connection object"}, "description": "Method for initiating an asynchronous request via the XHR object.", "static": "", "guessedname": "asyncRequest", "guessedtype": "function", "params": [{"type": "string", "name": "method", "description": " HTTP transaction method"}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource"}, {"type": "callback", "name": "callback", "description": " User-defined callback function or object"}, {"type": "string", "name": "postData", "description": " POST body"}], "public": ""}, "isCallInProgress": {"return": {"type": "boolean", "description": ""}, "description": "Determines if the transaction is still being processed.", "static": "", "guessedname": "isCallInProgress", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest"}], "public": ""}, "createResponseObject": {"return": {"type": "object", "description": ""}, "description": "This method evaluates the server response, creates and returns the results via\nits properties.  Success and failure cases will differ in the response\nobject's property values.", "private": "", "static": "", "guessedname": "createResponseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}]}, "initCustomEvents": {"return": {"type": "void", "description": ""}, "description": "This method creates and subscribes custom events,\nspecific to each transaction", "private": "", "static": "", "guessedname": "initCustomEvents", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "initHeader": {"return": {"type": "void", "description": ""}, "description": "Method that initializes the custom HTTP headers for the each transaction.", "static": "", "guessedname": "initHeader", "guessedtype": "function", "params": [{"type": "string", "name": "label", "description": " The HTTP header label"}, {"type": "string", "name": "value", "description": " The HTTP header value"}, {"type": "string", "name": "isDefault", "description": " Determines if the specific header is a default header\nautomatically sent with each transaction."}], "public": ""}, "setDefaultXhrHeader": {"return": {"type": "", "description": "void"}, "description": "Member to override the default transaction header..", "static": "", "guessedname": "setDefaultXhrHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "setForm": {"return": {"type": "string", "description": "string of the HTML form field name and value pairs.."}, "description": "This method assembles the form label and value pairs and\nconstructs an encoded string.\nasyncRequest() will automatically initialize the transaction with a\na HTTP header Content-Type of application\/x-www-form-urlencoded.", "static": "", "guessedname": "setForm", "guessedtype": "function", "params": [{"type": "string || object", "name": "form", "description": " id or name attribute, or form object."}, {"type": "boolean", "name": "optional", "description": " enable file upload."}, {"type": "boolean", "name": "optional", "description": " enable file upload over SSL in IE only."}], "public": ""}, "uploadFile": {"return": {"type": "void", "description": ""}, "description": "Uploads HTML form, inclusive of files\/attachments, using the\niframe created in createFrame to facilitate the transaction.", "private": "", "static": "", "guessedname": "uploadFile", "guessedtype": "function", "params": [{"type": "int", "name": "id", "description": " The transaction id."}, {"type": "object", "name": "callback", "description": " User-defined callback object."}, {"type": "string", "name": "uri", "description": " Fully qualified path of resource."}, {"type": "string", "name": "postData", "description": " POST data to be submitted in addition to HTML form."}]}, "resetFormState": {"return": {"type": "void", "description": ""}, "description": "Resets HTML form properties when an HTML form or HTML form\nwith file upload transaction is sent.", "private": "", "static": "", "guessedname": "resetFormState", "guessedtype": "function"}, "getConnectionObject": {"return": {"type": "object", "description": ""}, "description": "This method is called by asyncRequest to create a\nvalid connection object for the transaction.  It also passes a\ntransaction id and increments the transaction id counter.", "private": "", "static": "", "guessedname": "getConnectionObject", "guessedtype": "function"}, "createExceptionObject": {"return": {"type": "object", "description": ""}, "description": "If a transaction cannot be completed due to dropped or closed connections,\nthere may be not be enough information to build a full response object.\nThe failure callback will be fired and this specific condition can be identified\nby a status property value of 0.\nIf an abort was successful, the status property will report a value of -1.", "private": "", "static": "", "guessedname": "createExceptionObject", "guessedtype": "function", "params": [{"type": "int", "name": "tId", "description": " The Transaction Id"}, {"type": "callbackArg", "name": "callbackArg", "description": " The user-defined argument or arguments to be passed to the callback"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the exception case is caused by a transaction abort"}]}, "resetDefaultHeaders": {"return": {"type": "void", "description": ""}, "description": "Resets the default HTTP headers object", "static": "", "guessedname": "resetDefaultHeaders", "guessedtype": "function", "public": ""}, "appendPostData": {"return": {"type": "array", "description": "formElements Collection of hidden fields."}, "description": "Parses the POST data and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": "", "static": "", "guessedname": "appendPostData", "guessedtype": "function", "params": [{"type": "string", "name": "postData", "description": " The HTTP POST data"}]}, "releaseObject": {"return": {"type": "void", "description": ""}, "description": "Dereference the XHR instance and the connection object after the transaction is completed.", "private": "", "static": "", "guessedname": "releaseObject", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}]}, "createXhrObject": {"return": {"type": "", "description": "object"}, "description": "Instantiates a XMLHttpRequest object and returns an object with two properties:\nthe XMLHttpRequest instance and the transaction id.", "private": "", "static": "", "guessedname": "createXhrObject", "guessedtype": "function", "params": [{"type": "int", "name": "transactionId", "description": " Property containing the transaction id for this transaction."}]}, "handleTransactionResponse": {"return": {"type": "void", "description": ""}, "description": "This method attempts to interpret the server response and\ndetermine whether the transaction was successful, or if an error or\nexception was encountered.", "private": "", "static": "", "guessedname": "handleTransactionResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "object", "name": "callback", "description": " The user-defined callback object"}, {"type": "boolean", "name": "isAbort", "description": " Determines if the transaction was terminated via abort()."}]}, "createFrame": {"return": {"type": "void", "description": ""}, "description": "Creates an iframe to be used for form file uploads.  It is remove from the\ndocument upon completion of the upload transaction.", "private": "", "static": "", "guessedname": "createFrame", "guessedtype": "function", "params": [{"type": "string", "name": "optional", "description": " qualified path of iframe resource for SSL in IE."}]}, "handleReadyState": {"return": {"type": "void", "description": ""}, "description": "This method serves as a timer that polls the XHR object's readyState\nproperty during a transaction, instead of binding a callback to the\nonreadystatechange event.  Upon readyState 4, handleTransactionResponse\nwill process the response, and the timer will be cleared.", "private": "", "static": "", "guessedname": "handleReadyState", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object"}, {"type": "callback", "name": "callback", "description": " The user-defined callback object"}]}, "setDefaultPostHeader": {"return": {"type": "", "description": "void"}, "description": "Member to override the default POST header.", "static": "", "guessedname": "setDefaultPostHeader", "guessedtype": "function", "params": [{"type": "boolean", "name": "b", "description": " Set and use default header - true or false ."}], "public": ""}, "abort": {"return": {"type": "boolean", "description": ""}, "description": "Method to terminate a transaction, if it has not reached readyState 4.", "static": "", "guessedname": "abort", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object returned by asyncRequest."}, {"type": "object", "name": "callback", "description": "  User-defined callback object."}, {"type": "string", "name": "isTimeout", "description": " boolean to indicate if abort resulted from a callback timeout."}], "public": ""}, "setProgId": {"return": {"type": "", "description": "void"}, "description": "Member to add an ActiveX id to the existing xml_progid array.\nIn the event(unlikely) a new ActiveX id is introduced, it can be added\nwithout internal code modifications.", "static": "", "guessedname": "setProgId", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": " The ActiveX id to be added to initialize the XHR object."}], "public": ""}, "setPollingInterval": {"return": {"type": "", "description": "void"}, "description": "Member to modify the default polling interval.", "static": "", "guessedname": "setPollingInterval", "guessedtype": "function", "params": [{"type": "int", "name": "i", "description": " The polling interval in milliseconds."}], "public": ""}, "setHeader": {"return": {"type": "void", "description": ""}, "description": "Accessor that sets the HTTP headers for each transaction.", "private": "", "static": "", "guessedname": "setHeader", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " The connection object for the transaction."}]}}, "file": "connection.js", "guessedtype": "property", "shortname": "Connect", "properties": {"successEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 2xx range.", "private": "", "static": "", "guessedname": "successEvent", "guessedtype": "property", "type": "CustomEvent"}, "_default_xhr_header": {"description": "The default header value for the label\n\"X-Requested-With\".  This is sent with each\ntransaction, by default, to identify the\nrequest as being made by YUI Connection Manager.", "private": "", "static": "", "guessedname": "_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "completeEvent": {"description": "Custom event that fires when a transaction response has completed.", "private": "", "static": "", "guessedname": "completeEvent", "guessedtype": "property", "type": "CustomEvent"}, "_polling_interval": {"description": "The polling frequency, in milliseconds, for HandleReadyState.\nwhen attempting to determine a transaction's XHR readyState.\nThe default is 50 milliseconds.", "private": "", "static": "", "guessedname": "_polling_interval", "guessedtype": "property", "type": "int"}, "_formNode": {"description": "Property modified by setForm() to set a reference to the HTML\nform node if the desired action is file upload.", "private": "", "static": "", "guessedname": "_formNode", "guessedtype": "property", "type": "object"}, "_msxml_progid": {"description": "Array of MSFT ActiveX ids for XMLHttpRequest.", "private": "", "static": "", "guessedname": "_msxml_progid", "guessedtype": "property", "type": "array"}, "_http_header": {"description": "Object literal of HTTP header(s)", "private": "", "static": "", "guessedname": "_http_headers", "guessedtype": "property", "type": "object"}, "_sFormData": {"description": "Property modified by setForm() to set the HTML form data\nfor each transaction.", "private": "", "static": "", "guessedname": "_sFormData", "guessedtype": "property", "type": "string"}, "_default_post_header": {"description": "The default header used for POST transactions.", "private": "", "static": "", "guessedname": "_default_post_header", "guessedtype": "property", "type": "boolean"}, "_isFormSubmit": {"description": "Property modified by setForm() to determine if the data\nshould be submitted as an HTML form.", "private": "", "static": "", "guessedname": "_isFormSubmit", "guessedtype": "property", "type": "boolean"}, "_has_default_header": {"description": "Determines if custom, default headers\nare set for each transaction.", "private": "", "static": "", "guessedname": "_has_default_headers", "guessedtype": "property", "type": "boolean"}, "_hasSubmitListener": {"guessedname": "_hasSubmitListener", "static": "", "description": "Determines whether YAHOO.util.Event is available and returns true or false.\nIf true, an event listener is bound at the document level to trap click events that\nresolve to a target type of \"Submit\".  This listener will enable setForm() to determine\nthe clicked \"Submit\" value in a multi-Submit button, HTML form.", "private": "", "guessedtype": "function"}, "_default_form_header": {"description": "The default header used for transactions involving the\nuse of HTML forms.", "private": "", "static": "", "guessedname": "_default_form_header", "guessedtype": "property", "type": "boolean"}, "_use_default_xhr_header": {"description": "Determines if a default header of\n'X-Requested-With: XMLHttpRequest'\nwill be added to each transaction.", "private": "", "static": "", "guessedname": "_use_default_xhr_header", "guessedtype": "property", "type": "boolean"}, "_poll": {"description": "Collection of polling references to the polling mechanism in handleReadyState.", "private": "", "static": "", "guessedname": "_poll", "guessedtype": "property", "type": "object"}, "_timeOut": {"description": "Queue of timeout values for each transaction callback with a defined timeout value.", "private": "", "static": "", "guessedname": "_timeOut", "guessedtype": "property", "type": "object"}, "abortEvent": {"description": "Custom event that fires when a transaction is successfully aborted.", "private": "", "static": "", "guessedname": "abortEvent", "guessedtype": "property", "type": "CustomEvent"}, "_transaction_id": {"description": "A transaction counter that increments the transaction id for each transaction.", "private": "", "static": "", "guessedname": "_transaction_id", "guessedtype": "property", "type": "int"}, "failureEvent": {"description": "Custom event that fires when handleTransactionResponse() determines a\nresponse in the HTTP 4xx\/5xx range.", "private": "", "static": "", "guessedname": "failureEvent", "guessedtype": "property", "type": "CustomEvent"}, "_use_default_post_header": {"description": "Determines if a default header of\nContent-Type of 'application\/x-www-form-urlencoded'\nwill be added to any client HTTP headers sent for POST\ntransactions.", "private": "", "static": "", "guessedname": "_use_default_post_header", "guessedtype": "property", "type": "boolean"}, "_customEvents": {"description": "A reference table that maps callback custom events members to its specific\nevent name.", "private": "", "static": "", "guessedname": "_customEvents", "guessedtype": "property", "type": "object"}, "startEvent": {"description": "Custom event that fires at the start of a transaction", "private": "", "static": "", "guessedname": "startEvent", "guessedtype": "property", "type": "CustomEvent"}, "_isFileUpload": {"description": "Property modified by setForm() to determine if a file(s)\nupload is expected.", "private": "", "static": "", "guessedname": "_isFileUpload", "guessedtype": "property", "type": "boolean"}, "_has_http_headers": {"description": "Determines if HTTP headers are set.", "private": "", "static": "", "guessedname": "_has_http_headers", "guessedtype": "property", "type": "boolean"}, "_submitElementValue": {"description": "Tracks the name-value pair of the \"clicked\" submit button if multiple submit\nbuttons are present in an HTML form; and, if YAHOO.util.Event is available.", "private": "", "static": "", "guessedname": "_submitElementValue", "guessedtype": "property", "type": "string"}}, "description": "The Connection Manager singleton provides methods for creating and managing\nasynchronous transactions."}, "YAHOO.util.Date": {"name": "YAHOO.util.Date", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "Dt", "methods": {"format": {"return": {"type": "String", "description": "Formatted date for display."}, "description": "Takes a native JavaScript Date and formats to string for display to user.", "guessedtype": "function", "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>format {String", "name": "oConfig", "description": " <\/dt>\n<dd>Any format defined by strftime is supported<\/dd>\n<\/dl>\nstrftime has several format specifiers defined by the Open group at \nhttp:\/\/www.opengroup.org\/onlinepubs\/007908799\/xsh\/strftime.html\nPHP added a few of its own, defined at http:\/\/www.php.net\/strftime\nThis javascript implementation supports all the PHP specifiers and a few more."}, {"type": "String", "name": "sLocale", "description": "  (Optional) The locale to use when displaying days of week,\nmonths of the year, and other locale specific strings.  The following locales are\nbuilt in:\n<dl>\n<dt>en<\/dt>\n<dd>English<\/dd>\n<dt>en-US<\/dt>\n<dd>US English<\/dd>\n<dt>en-GB<\/dt>\n<dd>British English<\/dd>\n<dt>en-AU<\/dt>\n<dd>Australian English (identical to British English)<\/dd>\n<\/dl>\nMore locales may be added by subclassing of YAHOO.util.DateLocale.\nSee YAHOO.util.DateLocale for more information."}], "guessedname": "format", "arg": "\\%a - abbreviated weekday name according to the current locale", "sa": "YAHOO.util.DateLocale"}}, "static": "", "file": "datasource.js", "guessedtype": "property", "shortname": "Date", "requires": "yahoo", "description": "The static Date class provides helper functions to deal with data of type Date."}, "YAHOO.env": {"name": "YAHOO.env", "namespace": "", "module": "yahoo", "guessedname": "env", "methods": {"getVersion": {"return": {"type": "Object", "description": "The version info"}, "description": "Returns the version data for the specified module:\n<dl>\n<dt>name:<\/dt>      <dd>The name of the module<\/dd>\n<dt>version:<\/dt>   <dd>The version in use<\/dd>\n<dt>build:<\/dt>     <dd>The build number in use<\/dd>\n<dt>versions:<\/dt>  <dd>All versions that were registered<\/dd>\n<dt>builds:<\/dt>    <dd>All builds that were registered.<\/dd>\n<dt>mainClass:<\/dt> <dd>An object that was was stamped with the\ncurrent version and build. If \nmainClass.VERSION != version or mainClass.BUILD != build,\nmultiple versions of pieces of the library have been\nloaded, potentially causing issues.<\/dd>\n<\/dl>", "static": "", "guessedname": "getVersion", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " the name of the module (event, slider, etc)"}]}}, "static": "", "file": "yahoo.js", "guessedtype": "property", "shortname": "YAHOO.env", "properties": {"listeners": {"type": "Function[]", "description": "List of functions that should be executed every time a YUI module\nreports itself.", "guessedname": "listeners", "guessedtype": "property"}, "modules": {"type": "Object[]", "description": "Keeps the version info for all YUI modules that have reported themselves", "guessedname": "modules", "guessedtype": "property"}}, "description": "YAHOO.env is used to keep track of what is known about the YUI library and\nthe browsing environment"}, "YAHOO.util.Region": {"name": "YAHOO.util.Region", "constructors": [{"params": [{"type": "Int", "name": "t", "description": " the top extent"}, {"type": "Int", "name": "r", "description": " the right extent"}, {"type": "Int", "name": "b", "description": " the bottom extent"}, {"type": "Int", "name": "l", "description": " the left extent"}], "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Region", "methods": {"getArea": {"return": {"type": "Int", "description": "the region's area"}, "description": "Returns the area of the region", "guessedname": "getArea", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region", "description": "The region that the element occupies"}, "description": "Returns a region that is occupied by the DOM element", "static": "", "guessedname": "getRegion", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}]}, "contains": {"return": {"type": "Boolean", "description": "True if the region is contained with this region, \nelse false"}, "params": [{"type": "Region", "name": "region", "description": " The region to evaluate"}], "description": "Returns true if this region contains the region passed in", "guessedname": "contains", "guessedtype": "function"}, "union": {"return": {"type": "Region", "description": "The union region"}, "params": [{"type": "Region", "name": "region", "description": " The region that to create the union with"}], "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.", "guessedname": "union", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "string the region properties"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Region", "description": "The overlap region, or null if there is no overlap"}, "params": [{"type": "Region", "name": "region", "description": " The region that intersects"}], "description": "Returns the region where the passed in region overlaps with this one", "guessedname": "intersect", "guessedtype": "function"}}, "file": "dom.js", "guessedtype": "function", "shortname": "Region", "properties": {"right": {"type": "int", "description": "The region's right extent", "guessedname": "right", "guessedtype": "property"}, "bottom": {"type": "Int", "description": "The region's bottom extent", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Int", "description": "The region's top extent", "guessedname": "top", "guessedtype": "property"}, "1": {"type": "Int", "description": "The region's top extent as index, for symmetry with set\/getXY"}, "0": {"type": "Int", "description": "The region's left extent as index, for symmetry with set\/getXY"}, "left": {"type": "Int", "description": "The region's left extent", "guessedname": "left", "guessedtype": "property"}}, "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}, "YAHOO.util.Motion": {"name": "YAHOO.util.Motion", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "Motion", "extends": "YAHOO.util.ColorAnim", "superclass": "YAHOO.util.ColorAnim", "file": "animation.js", "guessedtype": "function", "shortname": "Motion", "requires": "YAHOO.util.Anim", "description": "Anim subclass for moving elements along a path defined by the \"points\" \nmember of \"attributes\".  All \"points\" are arrays with x, y coordinates.\n<p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);<\/code><\/p>"}, "YAHOO.util.LocalDataSource": {"name": "YAHOO.util.LocalDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "LocalDataSource", "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "datasource.js", "guessedtype": "function", "shortname": "LocalDataSource", "description": "LocalDataSource class for in-memory data structs including JavaScript arrays,\nJavaScript object literals (JSON), XML documents, and HTML tables."}, "YAHOO.env.ua": {"name": "YAHOO.env.ua", "namespace": "", "module": "yahoo", "guessedname": "ua", "static": "", "file": "yahoo.js", "guessedtype": "function", "shortname": "YAHOO.env.ua", "properties": {"opera": {"type": "float", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "mobile": {"type": "string", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}, "webkit": {"type": "float", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9.1\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).  \n3.x yahoo.com, flickr:422     <-- Safari 3.x hacks the user agent\nstring when hitting yahoo.com and \nflickr.com.\nSafari 3.0.4 (523.12):523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1\/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n<\/pre>\nhttp:\/\/developer.apple.com\/internet\/safari\/uamatrix.html", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"type": "float", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}}, "description": "Do not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8)."}, "C": {"name": "C", "namespace": "", "module": "window", "guessedname": "C", "static": "", "file": "constant.js", "guessedtype": "property", "shortname": "C", "description": "This Class contains global constants that to made be available throughout the codebase."}, "YAHOO.widget.AutoComplete": {"name": "YAHOO.widget.AutoComplete", "constructors": [{"params": [{"type": "HTMLElement", "name": "elInput", "description": "  DOM element reference of an input field."}, {"type": "String", "name": "elInput", "description": "  String ID of an input field."}, {"type": "HTMLElement", "name": "elContainer", "description": "  DOM element reference of an existing DIV."}, {"type": "String", "name": "elContainer", "description": "  String ID of an existing DIV."}, {"type": "YAHOO.widget.DataSource", "name": "oDataSource", "description": "  DataSource instance."}, {"type": "Object", "name": "oConfigs", "description": "  (optional) Object literal of configuration params."}], "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}], "namespace": "YAHOO.widget", "module": "autocomplete", "events": {"dataErrorEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}], "description": "Fired when the AutoComplete instance does not receive query results from the\nDataSource due to an error.", "guessedname": "dataErrorEvent", "guessedtype": "property"}, "dataReturnEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Results array."}], "description": "Fired when the AutoComplete instance receives query results from the data\nsource.", "guessedname": "dataReturnEvent", "guessedtype": "property"}, "containerExpandEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "  Results array."}], "description": "Fired when the results container is expanded.", "guessedname": "containerExpandEvent", "guessedtype": "property"}, "itemArrowToEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed to."}], "description": "Fired when result item has been arrowed to.", "guessedname": "itemArrowToEvent", "guessedtype": "property"}, "itemArrowFromEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item arrowed from."}], "description": "Fired when result item has been arrowed away from.", "guessedname": "itemArrowFromEvent", "guessedtype": "property"}, "containerPopulateEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is populated.", "guessedname": "containerPopulateEvent", "guessedtype": "property"}, "textboxFocusEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field receives focus.", "guessedname": "textboxFocusEvent", "guessedtype": "property"}, "typeAheadEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "String", "name": "sPrefill", "description": "  The prefill string."}], "description": "Fired when the input field has been prefilled by the type-ahead\nfeature.", "guessedname": "typeAheadEvent", "guessedtype": "property"}, "itemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The selected &lt;li&gt; element item."}, {"type": "Object", "name": "oData", "description": "  The data returned for the item, either as an object,\nor mapped from the schema into an array."}], "description": "Fired when an item is selected via mouse click, ENTER key, or TAB key.", "guessedname": "itemSelectEvent", "guessedtype": "property"}, "dataRequestEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object", "name": "oRequest", "description": "  The request."}], "description": "Fired when the AutoComplete instance makes a request to the DataSource.", "guessedname": "dataRequestEvent", "guessedtype": "property"}, "itemMouseOverEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt element item moused to."}], "description": "Fired when result item has been moused over.", "guessedname": "itemMouseOverEvent", "guessedtype": "property"}, "_sLastTextboxValue": {"guessedname": "_sLastTextboxValue", "type": "String", "description": "Internal tracker to last known textbox value, used to determine whether or not\nto trigger a query via interval for certain IME users.", "private": "", "guessedtype": "property"}, "unmatchedItemSelectEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "String", "name": "sSelection", "description": "  The selected string."}], "description": "Fired when a user selection does not match any of the displayed result items.", "guessedname": "unmatchedItemSelectEvent", "guessedtype": "property"}, "selectionEnforceEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired if forceSelection is enabled and the user's input has been cleared\nbecause it did not match one of the returned query results.", "guessedname": "selectionEnforceEvent", "guessedtype": "property"}, "textboxKeyEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "Number", "name": "nKeycode", "description": "  The keycode number."}], "description": "Fired when the input field receives key input.", "guessedname": "textboxKeyEvent", "guessedtype": "property"}, "textboxBlurEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field loses focus.", "guessedname": "textboxBlurEvent", "guessedtype": "property"}, "containerCollapseEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the results container is collapsed.", "guessedname": "containerCollapseEvent", "guessedtype": "property"}, "textboxChangeEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Fired when the input field value has changed when it loses focus.", "guessedname": "textboxChangeEvent", "guessedtype": "property"}, "itemMouseOutEvent": {"params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}, {"type": "HTMLElement", "name": "elItem", "description": "  The &lt;li&gt; element item moused from."}], "description": "Fired when result item has been moused out.", "guessedname": "itemMouseOutEvent", "guessedtype": "property"}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"guessedname": "_onTextboxKeyPress", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keypress event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keypress events.", "private": "", "guessedtype": "function"}, "_selectText": {"guessedname": "_selectText", "params": [{"type": "HTMLElement", "name": "elTextbox", "description": "  Text input box element in which to select text."}, {"type": "Number", "name": "nStart", "description": "  Starting index of text string to select."}, {"type": "Number", "name": "nEnd", "description": "  Ending index of text selection."}], "description": "Selects text in the input field.", "private": "", "guessedtype": "function"}, "_toggleContainerHelpers": {"guessedname": "_toggleContainerHelpers", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container is expanded, false if collapsed"}], "description": "Syncs results container with its helpers.", "private": "", "guessedtype": "function"}, "_clearInterval": {"guessedname": "_clearInterval", "params": [{"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Cancels text input detection by intervals.", "private": "", "guessedtype": "function"}, "_onTextboxBlur": {"guessedname": "_onTextboxBlur", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box losing focus.", "private": "", "guessedtype": "function"}, "_typeAhead": {"guessedname": "_typeAhead", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The &lt;li&gt; element item whose data populates the input field."}, {"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Updates in the text input box with the first query result as the user types,\nselecting the substring that the user has not typed.", "private": "", "guessedtype": "function"}, "_onItemMouseover": {"params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseover events in the container.", "private": ""}, "_toggleHighlight": {"guessedname": "_toggleHighlight", "params": [{"type": "HTMLElement", "name": "elNewListItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the highlight on or off for an item in the container, and also cleans\nup highlighting of any previous item.", "private": "", "guessedtype": "function"}, "_togglePrehighlight": {"guessedname": "_togglePrehighlight", "params": [{"type": "HTMLElement", "name": "elNewListItem", "description": "  The &lt;li&gt; element item to receive highlight behavior."}, {"type": "String", "name": "sType", "description": "  Type \"mouseover\" will toggle highlight on, and \"mouseout\" will toggle highlight off."}], "description": "Toggles the pre-highlight on or off for an item in the container.", "private": "", "guessedtype": "function"}, "_onTextboxFocus": {"guessedname": "_onTextboxFocus", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The focus event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles text input box receiving focus.", "private": "", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "Boolean", "description": "True if key should be ignored, false otherwise."}, "description": "Whether or not key is functional or should be ignored. Note that the right\narrow key is NOT an ignored key since it triggers queries for certain intl\ncharsets.", "private": "", "params": [{"type": "Number", "name": "nKeycode", "description": "  Code of key pressed."}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "getListItemIndex": {"return": {"type": "Number", "description": "Index."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the index of the associated with a given &lt;li&gt; result.", "guessedname": "getListItemIndex", "guessedtype": "function"}, "_onContainerMouseover": {"guessedname": "_onContainerMouseover", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseover event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseover events.", "private": "", "guessedtype": "function"}, "_initContainerHelperEls": {"private": "", "description": "Initializes the results container helpers if they are enabled and do\nnot exist", "guessedname": "_initContainerHelperEls", "guessedtype": "function"}, "_onInterval": {"private": "", "description": "Enables query triggers based on text input detection by intervals (rather\nthan by key events).", "guessedname": "_onInterval", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "sBody", "description": "  HTML markup for results container body."}], "description": "Sets HTML markup for the results container body. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-bd\".", "guessedname": "setBody", "guessedtype": "function"}, "filterResults": {"return": {"type": "Object", "description": "Filtered response object."}, "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oFullResponse", "description": "  Full response object."}, {"type": "Object", "name": "oParsedResponse", "description": "  Parsed response object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object."}], "description": "Executed by DataSource (within DataSource scope via doBeforeCallback()) to\nfilter results through a simple client-side matching algorithm.", "guessedname": "filterResults", "guessedtype": "function"}, "getListEl": {"return": {"type": "HTMLElement[]", "description": "Reference to &lt;ul&gt; element within the results container."}, "description": "Public accessor to the &lt;ul&gt; element that displays query results within the results container.", "guessedname": "getListEl", "guessedtype": "function"}, "_updateValue": {"guessedname": "_updateValue", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The &lt;li&gt; element item with which to update the value."}], "description": "Updates the text input box value with selected query result. If a delimiter\nhas been defined, then the value gets appended with the delimiter.", "private": "", "guessedtype": "function"}, "_populateList": {"guessedname": "_populateList", "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Populates the array of &lt;li&gt; elements in the container with query\nresults.", "private": "", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": "Return true to continue expanding container, false to cancel the expand."}, "params": [{"type": "HTMLElement", "name": "elTextbox", "description": "  The text input box."}, {"type": "HTMLElement", "name": "elContainer", "description": "  The container element."}, {"type": "String", "name": "sQuery", "description": "  The query string."}, {"type": "Object[]", "name": "aResults", "description": "   An array of query results."}], "description": "Overridable method called before container expands allows implementers to access data\nand DOM elements.", "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_moveSelection": {"guessedname": "_moveSelection", "params": [{"type": "Number", "name": "nKeyCode", "description": "  Code of key pressed."}], "description": "Triggered by up and down arrow keys, changes the current highlighted\n&lt;li&gt; element item. Scrolls container if necessary.", "private": "", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the AutoComplete instance."}, "description": "Public accessor to the unique name of the AutoComplete instance.", "guessedname": "toString", "guessedtype": "function"}, "isContainerOpen": {"return": {"type": "Boolean", "description": "Returns true if container is in an expanded state, false otherwise."}, "description": "Returns true if container is in an expanded state, false otherwise.", "guessedname": "isContainerOpen", "guessedtype": "function"}, "destroy": {"description": "Nulls out the entire AutoComplete instance and related objects, removes attached\nevent listeners, and clears out DOM elements inside the container. After\ncalling this method, the instance reference should be expliclitly nulled by\nimplementer, as in myDataTable = null. Use with caution!", "guessedname": "destroy", "guessedtype": "function"}, "AutoComplete._cloneObject": {"description": "Clones object literal or array of object literals.", "private": "", "static": "", "guessedname": "_cloneObject", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Object."}]}, "_onItemMouseout": {"params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element mouseout events in the container.", "private": ""}, "getListItemData": {"return": {"type": "Object", "description": "Result data."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the result data associated with a given &lt;li&gt; result.", "guessedname": "getListItemData", "guessedtype": "function"}, "generateRequest": {"params": [{"type": "String", "name": "sQuery", "description": "  Query string"}], "description": "A function that converts an AutoComplete query into a request value which is then\npassed to the DataSource's sendRequest method in order to retrieve data for \nthe query. By default, returns a String with the syntax: \"query={query}\"\nImplementers can customize this method for custom request syntaxes.", "guessedname": "generateRequest", "guessedtype": "function"}, "_initListEl": {"private": "", "description": "Clears out contents of container body and creates up to\nYAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an\n&lt;ul&gt; element.", "guessedname": "_initListEl", "guessedtype": "function"}, "_onContainerClick": {"guessedname": "_onContainerClick", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container click events.", "private": "", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "sFooter", "description": "  HTML markup for results container footer."}], "description": "Sets HTML markup for the results container footer. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-ft\".", "guessedname": "setFooter", "guessedtype": "function"}, "_selectItem": {"guessedname": "_selectItem", "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  The selected &lt;li&gt; element item."}], "description": "Selects a result item from the container", "private": "", "guessedtype": "function"}, "_onWindowUnload": {"guessedname": "_onWindowUnload", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The unload event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles window unload event.", "private": "", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Handles response for display. This is the callback function method passed to\nYAHOO.util.DataSourceBase#sendRequest so results from the DataSource are\nreturned to the AutoComplete instance.", "guessedname": "handleResponse", "guessedtype": "function"}, "_enableIntervalDetection": {"guessedname": "_enableIntervalDetection", "re": "", "description": "Enables interval detection for IME support.", "private": "", "guessedtype": "function"}, "sendQuery": {"params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "guessedname": "sendQuery", "guessedtype": "function"}, "getContainerEl": {"return": {"type": "HTMLELement", "description": "DOM reference to container element."}, "description": "Returns DOM reference to container element.", "guessedname": "getContainerEl", "guessedtype": "function"}, "_onContainerMouseout": {"guessedname": "_onContainerMouseout", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The mouseout event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container mouseout events.", "private": "", "guessedtype": "function"}, "_jumpSelection": {"private": "", "description": "If an item is highlighted in the container, the right arrow key jumps to the\nend of the textbox and selects the highlighted item, otherwise the container\nis closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "_onContainerScroll": {"guessedname": "_onContainerScroll", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The scroll event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container scroll events.", "private": "", "guessedtype": "function"}, "_sendQuery": {"guessedname": "_sendQuery", "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Makes query request to the DataSource.", "private": "", "guessedtype": "function"}, "_clearSelection": {"private": "", "description": "When forceSelection is true and the user attempts\nleave the text input box without selecting an item from the query results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "__initProps": {"private": "", "description": "Updates and validates latest public config properties.", "guessedname": "_initProps", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": "Return true to continue loading data, false to cancel."}, "params": [{"type": "String", "name": "sQuery", "description": "  Original request."}, {"type": "Object", "name": "oResponse", "description": "  Response object."}, {"type": "MIXED", "name": "oPayload", "description": "  (optional) Additional argument(s)"}], "description": "Overridable method called before container is loaded with result data.", "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "preparseRawResponse": {"return": {"type": "Object", "description": "oParsedResponse or null."}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Executed by DataSource (within DataSource scope via doBeforeParseData()) to\nhandle responseStripAfter cleanup.", "guessedname": "preparseRawResponse", "guessedtype": "function"}, "_toggleContainer": {"guessedname": "_toggleContainer", "params": [{"type": "Boolean", "name": "bShow", "description": "  True if container should be expanded, false if container should be collapsed"}], "description": "Animates expansion or collapse of the container.", "private": "", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": "HTML markup of formatted result data."}, "params": [{"type": "Object", "name": "oResultData", "description": "  Result data object."}, {"type": "String", "name": "sQuery", "description": "  The corresponding query string."}, {"type": "HTMLElement", "name": "sResultMatch", "description": "  The current query string."}], "description": "Overridable method that returns HTML markup for one result to be populated\nas innerHTML of an &lt;LI&gt; element.", "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"guessedname": "_textMatchesOption", "return": {"type": "HTMLElement", "description": "Matching list item element if user-input text matches\na result, null otherwise."}, "description": "Whether or not user-typed value in the text input box matches any of the\nquery results.", "private": "", "guessedtype": "function"}, "collapseContainer": {"description": "Collapses container.", "guessedname": "collapseContainer", "guessedtype": "function"}, "_onTextboxKeyDown": {"guessedname": "_onTextboxKeyDown", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keydown event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keydown events of functional keys, mainly for UI behavior.", "private": "", "guessedtype": "function"}, "getListItems": {"deprecated": "Use getListEl().childNodes.", "guessedname": "getListItems", "guessedtype": "function"}, "_onItemMouseclick": {"params": [{"type": "HTMLEvent", "name": "v", "description": "  The click event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles &lt;li&gt; element click events in the container.", "private": ""}, "getSubsetMatches": {"return": {"type": "Object", "description": "oParsedResponse or null."}, "params": [{"type": "String", "name": "sQuery", "description": "  Query string."}], "description": "Handles subset matching for when queryMatchSubset is enabled.", "guessedname": "getSubsetMatches", "guessedtype": "function"}, "doBeforeSendQuery": {"deprecated": "Use generateRequest.", "guessedname": "doBeforeSendQuery", "guessedtype": "function"}, "_onTextboxKeyUp": {"guessedname": "_onTextboxKeyUp", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The keyup event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles textbox keyup events to trigger queries.", "private": "", "guessedtype": "function"}, "isFocused": {"return": {"type": "Boolean", "description": "Returns true if widget instance is currently focused."}, "description": "Returns true if widget instance is currently focused.", "guessedname": "isFocused", "guessedtype": "function"}, "getListItemMatch": {"return": {"type": "String", "description": "Matching string."}, "params": [{"type": "HTMLElement", "name": "elListItem", "description": "  Reference to &lt;LI&gt; element."}], "description": "Public accessor to the matching string associated with a given &lt;li&gt; result.", "guessedname": "getListItemMatch", "guessedtype": "function"}, "_initContainerEl": {"private": "", "description": "Initializes the results container once at object creation", "guessedname": "_initContainerEl", "guessedtype": "function"}, "getInputEl": {"return": {"type": "HTMLELement", "description": "DOM reference to input element."}, "description": "Returns DOM reference to input element.", "guessedname": "getInputEl", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "sHeader", "description": "  HTML markup for results container header."}], "description": "Sets HTML markup for the results container header. This markup will be\ninserted within a &lt;div&gt; tag with a class of \"yui-ac-hd\".", "guessedname": "setHeader", "guessedtype": "function"}, "_onContainerResize": {"guessedname": "_onContainerResize", "params": [{"type": "HTMLEvent", "name": "v", "description": "  The resize event."}, {"type": "YAHOO.widget.AutoComplete", "name": "oSelf", "description": "  The AutoComplete instance."}], "description": "Handles container resize events.", "private": "", "guessedtype": "function"}}, "file": "autocomplete.js", "guessedtype": "function", "shortname": "AutoComplete", "properties": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For XHR DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe \"query\" param\/value pair. To prevent this behavior, implementers should\nset this value to false. To more fully customize the query syntax, implementers\nshould override the generateRequest() method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "Whether or not to force the user's selection to match one of the query\nresults. Enabling this feature essentially transforms the input field into a\n&lt;select&gt; field. This feature is not recommended with delimiter character(s)\ndefined.", "guessedname": "forceSelection", "guessedtype": "property"}, "_elIFrame": {"guessedname": "_elIFrame", "type": "HTMLElement", "description": "Reference to iframe element within container element.", "private": "", "guessedtype": "property"}, "animHoriz": {"default": "false", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nhorizontal direction.", "guessedname": "animHoriz", "guessedtype": "property"}, "useShadow": {"default": "false", "type": "Boolean", "description": "Whether or not the results container should have a shadow.", "guessedname": "useShadow", "guessedtype": "property"}, "queryMatchSubset": {"default": "false", "type": "Boolean", "description": "Enables query subset matching. When the DataSource's cache is enabled and queryMatchSubset is\ntrue, substrings of queries will return matching cached results. For\ninstance, if the first query is for \"abc\" susequent queries that start with\n\"abc\", like \"abcd\", will be queried against the cache, and not the live data\nsource. Recommended only for DataSources that return comprehensive results\nfor queries with very few characters.", "guessedname": "queryMatchSubset", "guessedtype": "property"}, "supressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "useIFrame": {"default": "false", "type": "Boolean", "description": "Whether or not to use an iFrame to layer over Windows form elements in\nIE. Set to true only when the results container will be on top of a\n&lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,\n5.5 < IE < 7).", "guessedname": "useIFrame", "guessedtype": "property"}, "typeAheadDelay": {"default": "0.5", "type": "Number", "description": "If typeAhead is true, number of seconds to delay before updating input with\ntypeAhead value. In order to prevent certain race conditions, this value must\nalways be greater than the queryDelay.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "_elContainer": {"guessedname": "_elContainer", "type": "HTMLElement", "description": "Container DOM element.", "private": "", "guessedtype": "property"}, "_nDelayID": {"guessedname": "_nDelayID", "type": "Number", "description": "Delay timeout ID.", "private": "", "guessedtype": "property"}, "_oAnim": {"guessedname": "_oAnim", "type": "Boolean", "description": "Animation instance for container expand\/collapse.", "private": "", "guessedtype": "property"}, "_elFooter": {"guessedname": "_elFooter", "type": "HTMLElement", "description": "Reference to footer element within content element.", "private": "", "guessedtype": "property"}, "_queryInterval": {"guessedname": "_queryInterval", "type": "Object", "description": "For users typing via certain IMEs, queries must be triggered by intervals,\nsince key events yet supported across all browsers for all IMEs.", "private": "", "guessedtype": "property"}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of AutoComplete instance.", "private": "", "guessedtype": "property"}, "_elShadow": {"guessedname": "_elShadow", "type": "HTMLElement", "description": "Reference to shadow element within container element.", "private": "", "guessedtype": "property"}, "applyLocalFilter": {"default": "true for local arrays and json, otherwise false", "type": "Boolean", "description": "By default, results from local DataSources will pass through the filterResults\nmethod to apply a client-side matching algorithm.", "guessedname": "applyLocalFilter", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When applyLocalFilter is true, the local filtering algorthim can have case sensitivity\nenabled.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "_nKeyCode": {"guessedname": "_nKeyCode", "type": "Number", "description": "Key code of the last key pressed in textbox.", "private": "", "guessedtype": "property"}, "_sInitInputValue": {"guessedname": "_sInitInputValue", "type": "String", "description": "Stores initial input value used to determine if textboxChangeEvent should be fired.", "private": "", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If autohighlight is enabled, whether or not the input field should be automatically updated\nwith the first query result as the user types, auto-selecting the substring portion\nof the first result that the user has not yet typed.", "guessedname": "typeAhead", "guessedtype": "property"}, "_nDisplayedItems": {"guessedname": "_nDisplayedItems", "type": "Number", "description": "Number of &lt;li&gt; elements currently displayed in results container.", "private": "", "guessedtype": "property"}, "_sCurQuery": {"guessedname": "_sCurQuery", "type": "String", "description": "Current query string", "private": "", "guessedtype": "property"}, "delimChar": {"type": "String | String[]", "description": "Query delimiter. A single character separator for multiple delimited\nselections. Multiple delimiter characteres may be defined as an array of\nstrings. A null value or empty string indicates that query results cannot\nbe delimited. This feature is not recommended if you need forceSelection to\nbe true.", "guessedname": "delimChar", "guessedtype": "property"}, "_elContent": {"guessedname": "_elContent", "type": "HTMLElement", "description": "Reference to content element within container element.", "private": "", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Enabling this feature prevents the toggling of the container to a collapsed state.\nSetting to true does not automatically trigger the opening of the container.\nImplementers are advised to pre-load the container with an explicit \"sendQuery()\" call.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "highlightClassName": {"default": "\"yui-ac-highlight\"", "type": "String", "description": "Class name of a highlighted item within results container.", "guessedname": "highlightClassName", "guessedtype": "property"}, "queryInterval": {"default": "500", "type": "Number", "description": "When IME usage is detected, AutoComplete will switch to querying the input\nvalue at the given interval rather than per key event.", "guessedname": "queryInterval", "guessedtype": "property"}, "resultTypeList": {"default": "true", "type": "Boolean", "description": "For backward compatibility to pre-2.6.0 formatResults() signatures, setting\nresultsTypeList to true will take each object literal result returned by\nDataSource and flatten into an array.", "guessedname": "resultTypeList", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Number of characters that must be entered before querying for results. A negative value\neffectively turns off the widget. A value of 0 allows queries of null or empty string\nvalues.", "guessedname": "minQueryLength", "guessedtype": "property"}, "_bOverContainer": {"guessedname": "_bOverContainer", "type": "Boolean", "description": "Whether or not the mouse is currently over the results\ncontainer. This is necessary in order to prevent clicks on container items\nfrom being text input field blur events.", "private": "", "guessedtype": "property"}, "_bFocused": {"guessedname": "_bFocused", "type": "Boolean", "description": "Whether or not the input field is currently in focus. If query results come back\nbut the user has already moved on, do not proceed with auto complete behavior.", "private": "", "guessedtype": "property"}, "_nTypeAheadDelayID": {"guessedname": "_nTypeAheadDelayID", "type": "Number", "description": "TypeAhead delay timeout ID.", "private": "", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When applyLocalFilter is true, results can  be locally filtered to return\nmatching strings that \"contain\" the query string rather than simply \"start with\"\nthe query string.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "_bItemSelected": {"guessedname": "_bItemSelected", "type": "Boolean", "description": "Whether or not an item has been selected since the container was populated\nwith results. Reset to false by _populateList, and set to true when item is\nselected.", "private": "", "guessedtype": "property"}, "dataSource": {"type": "YAHOO.widget.DataSource", "description": "The DataSource object that encapsulates the data used for auto completion.\nThis object should be an inherited object from YAHOO.widget.DataSource.", "guessedname": "dataSource", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Whether or not the first item in results container should be automatically highlighted\non expand.", "guessedname": "autoHighlight", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "true", "type": "Boolean", "description": "Whether or not to allow browsers to cache user-typed input in the input\nfield. Disabling this feature will prevent the widget from setting the\nautocomplete=\"off\" on the input field. When autocomplete=\"off\"\nand users click the back button after form submission, user-typed input can\nbe prefilled by the browser from its cache. This caching of user input may\nnot be desired for sensitive data, such as credit card numbers, in which\ncase, implementers should consider setting allowBrowserAutocomplete to false.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "animVert": {"default": "true", "type": "Boolean", "description": "Whether or not to animate the expansion\/collapse of the results container in the\nvertical direction.", "guessedname": "animVert", "guessedtype": "property"}, "_sPastSelections": {"description": "Selections from previous queries (for saving delimited queries).", "default": "\"\"", "private": "", "guessedname": "_sPastSelections", "guessedtype": "property", "type": "String"}, "_nIndex": {"description": "Internal class variable to index multiple AutoComplete instances.", "default": "0", "private": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "_elCurListItem": {"guessedname": "_elCurListItem", "type": "HTMLElement", "description": "Pointer to the currently highlighted &lt;li&gt; element in the container.", "private": "", "guessedtype": "property"}, "_bContainerOpen": {"guessedname": "_bContainerOpen", "type": "Boolean", "description": "Whether or not the results container is currently open.", "private": "", "guessedtype": "property"}, "animSpeed": {"default": "0.3", "type": "Number", "description": "Speed of container expand\/collapse animation, in seconds..", "guessedname": "animSpeed", "guessedtype": "property"}, "_elHeader": {"guessedname": "_elHeader", "type": "HTMLElement", "description": "Reference to header element within content element.", "private": "", "guessedtype": "property"}, "_elList": {"guessedname": "_elList", "type": "HTMLElement", "description": "Internal reference to &lt;ul&gt; elements that contains query results within the\nresults container.", "private": "", "guessedtype": "property"}, "_iFrameSrc": {"guessedname": "_iFrameSrc", "type": "String", "description": "Src to iFrame used when useIFrame = true. Supports implementations over SSL\nas well.", "private": "", "guessedtype": "property"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "Maximum number of results to display in results container.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "prehighlightClassName": {"type": "String", "description": "Class name of a pre-highlighted item within results container.", "guessedname": "prehighlightClassName", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "Number of seconds to delay before submitting a query request.  If a query\nrequest is received before a previous one has completed its delay, the\nprevious request is cancelled and the new request is set to the delay. If \ntypeAhead is also enabled, this value must always be less than the typeAheadDelay\nin order to avoid certain race conditions.", "guessedname": "queryDelay", "guessedtype": "property"}, "_elTextbox": {"guessedname": "_elTextbox", "type": "HTMLElement", "description": "Text input field DOM element.", "private": "", "guessedtype": "property"}, "_elBody": {"guessedname": "_elBody", "type": "HTMLElement", "description": "Reference to body element within content element.", "private": "", "guessedtype": "property"}}, "description": "The AutoComplete class provides the customizable functionality of a plug-and-play DHTML\nauto completion widget.  Some key features:\n<ul>\n<li>Navigate with up\/down arrow keys and\/or mouse to pick a selection<\/li>\n<li>The drop down container can \"roll down\" or \"fly out\" via configurable\nanimation<\/li>\n<li>UI look-and-feel customizable through CSS, including container\nattributes, borders, position, fonts, etc<\/li>\n<\/ul>"}, "YAHOO.util.Form.Element": {"name": "YAHOO.util.Form.Element", "namespace": "YAHOO.util.Form", "module": "form", "methods": {"toggleEnabled": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM Form field element to enable."}, {"type": "Boolean", "name": "b", "description": "  Optional. True, when enabling, falsy to disable."}], "description": "Enables the value of the field.", "guessedname": "toggleEnabled", "guessedtype": "function"}, "enable": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to enable."}], "description": "Enables the value of the field.", "guessedname": "enable", "guessedtype": "function"}, "clear": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to clear."}], "description": "Resets the value of the field.", "guessedname": "clear", "guessedtype": "function"}, "getType": {"return": {"type": "String", "description": "The type or empty string."}, "description": "Attempt to find the type attribute of the element.", "static": "", "guessedname": "getType", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "focus": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to enable."}, {"type": "Boolean", "name": "select", "description": "  Optional. True when text should be selected; may not be possible, but will attempt."}, {"type": "Number", "name": "i", "description": "  Optional. The recursion counter, should be managed by this function."}], "description": "Focuses on the field.", "guessedname": "focus", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "The field value or empty string."}, "description": "Attempt to find the value of field.", "static": "", "guessedname": "getValue", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "isCheckable": {"return": {"type": "Boolean", "description": "The input is type checkbox or radio."}, "description": "Tests if the element is a checkbox or radio.", "static": "", "guessedname": "isCheckable", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "isSet": {"return": {"type": "Boolean", "description": "The field is empty or non-existing."}, "description": "Tests if the field has a value.", "static": "", "guessedname": "isSet", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "disable": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to disable."}], "description": "Disables the value of the field.", "guessedname": "disable", "guessedtype": "function"}, "onFocusAndBlur": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to attach events to."}, {"type": "String", "name": "text", "description": "  Required. The default text."}, {"type": "String", "name": "c", "description": "  Optional. The color to set default text to."}], "description": "Updates the onblur and onclick events of the element to show default text.", "guessedname": "attachFocusAndBlur", "guessedtype": "function"}, "isType": {"return": {"type": "Boolean", "description": "The field is one of the provided types."}, "description": "Tests if the field is one of the provided types.", "static": "", "guessedname": "isType", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}, {"type": "String", "name": "arg1", "description": "  Required. A type to evaluate."}, {"type": "String", "name": "argX", "description": "  Required. Aditional types to evaluate."}]}, "serialize": {"return": {"type": "string", "description": "the key\/value pairs as a query string."}, "description": "Serializes the form into a key value pair query string.", "static": "", "guessedname": "serialize", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}, "check": {"static": "", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to checkable DOM element."}, {"type": "Boolean", "name": "fl", "description": "  Required. True when checkbox should be checked."}, {"type": "Boolean", "name": "doNotChangeValue", "description": "  Optional. True, when we should not change values."}], "description": "Short-cut method to do a browser safe check on any HTMLInputElement of type checkbox (possibly radio too).", "guessedname": "check", "guessedtype": "function"}, "isChanged": {"return": {"type": "Boolean", "description": "The field has changed."}, "description": "Tests if the field has changed from the default.", "static": "", "guessedname": "isChanged", "guessedtype": "function", "params": [{"type": "String|Element", "name": "elem", "description": "  Required. Pointer or string reference to DOM element to evaluate."}]}}, "static": "", "file": "formElement.js", "shortname": "Element", "description": "These Form utility functions are thanks in a large part to the Prototype group. I have modified them to improve\nperformance, remove redundancy, and get rid of the magic array crap. Use these functions to work with forms fields."}, "C.HTML.NAME": {"name": "C.HTML.NAME", "namespace": "C.HTML", "module": "window", "guessedname": "NAME", "static": "", "file": "constant.js", "guessedtype": "property", "shortname": "NAME", "properties": {"TASK": {"description": "The DOM name attribute for tasks.", "readonly": "Defined at build time.", "static": "", "guessedname": "TASK", "guessedtype": "property", "type": "{String}", "final": ""}}, "description": "The name object to hold all naming constants."}, "YAHOO.util.DataSourceBase": {"name": "YAHOO.util.DataSourceBase", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "Base class for the YUI DataSource utility."}], "namespace": "YAHOO.util", "module": "datasource", "properties": {"TYPE_HTMLTABLE": {"description": "Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements.", "default": "6", "guessedname": "TYPE_HTMLTABLE", "guessedtype": "property", "type": "Number", "final": ""}, "maxCacheEntries": {"default": "0", "type": "Number", "description": "Max size of the local cache.  Set to 0 to turn off caching.  Caching is\nuseful to reduce the number of server connections.  Recommended only for data\nsources that return comprehensive results for queries or when stale data is\nnot an issue.", "guessedname": "maxCacheEntries", "guessedtype": "property"}, "_oQueue": {"guessedname": "_oQueue", "type": "Object", "description": "Local queue of request connections, enabled if queue needs to be managed.", "private": "", "guessedtype": "property"}, "TYPE_SCRIPTNODE": {"description": "Type is hosted on a server via a dynamic script node.", "default": "7", "guessedname": "TYPE_SCRIPTNODE", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_TEXT": {"description": "Type is plain text.", "default": "5", "guessedname": "TYPE_TEXT", "guessedtype": "property", "type": "Number", "final": ""}, "_sName": {"guessedname": "_sName", "type": "String", "description": "Name of DataSource instance.", "private": "", "guessedtype": "property"}, "DataSourceBase._nTransactionId": {"description": "Internal class variable to assign unique transaction IDs.", "private": "", "static": "", "guessedname": "_nTransactionId", "guessedtype": "property", "type": "Number"}, "responseType": {"default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN", "type": "Number", "description": "Format of response:\n<dl>  \n<dt>TYPE_UNKNOWN<\/dt>\n<dt>TYPE_JSARRAY<\/dt>\n<dt>TYPE_JSON<\/dt>\n<dt>TYPE_XML<\/dt>\n<dt>TYPE_TEXT<\/dt>\n<dt>TYPE_HTMLTABLE<\/dt> \n<\/dl>", "guessedname": "responseType", "guessedtype": "property"}, "DataSourceBase._nIndex": {"description": "Internal class variable to index multiple DataSource instances.", "private": "", "static": "", "guessedname": "_nIndex", "guessedtype": "property", "type": "Number"}, "TYPE_XHR": {"description": "Type is hosted on a server via an XHR connection.", "default": "2", "guessedname": "TYPE_XHR", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSON": {"description": "Type is JSON.", "default": "3", "guessedname": "TYPE_JSON", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_UNKNOWN": {"description": "Type is unknown.", "default": "-1", "guessedname": "TYPE_UNKNOWN", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_JSFUNCTION": {"description": "Type is a JavaScript Function.", "default": "1", "guessedname": "TYPE_JSFUNCTION", "guessedtype": "property", "type": "Number", "final": ""}, "dataType": {"default": "YAHOO.util.DataSourceBase.TYPE_UNKNOWN", "type": "Number", "description": "Where the live data is held:\n<dl>  \n<dt>TYPE_UNKNOWN<\/dt>\n<dt>TYPE_LOCAL<\/dt>\n<dt>TYPE_XHR<\/dt>\n<dt>TYPE_SCRIPTNODE<\/dt>\n<dt>TYPE_JSFUNCTION<\/dt>\n<\/dl>", "guessedname": "dataType", "guessedtype": "property"}, "_aCache": {"guessedname": "_aCache", "type": "Object[]", "description": "Local cache of data result object literals indexed chronologically.", "private": "", "guessedtype": "property"}, "liveData": {"type": "Object", "description": "Pointer to live database.", "guessedname": "liveData", "guessedtype": "property"}, "TYPE_LOCAL": {"description": "Type is local.", "default": "8", "guessedname": "TYPE_LOCAL", "guessedtype": "property", "type": "Number", "final": ""}, "ERROR_DATAINVALID": {"description": "Error message for invalid dataresponses.", "default": "\"Invalid data\"", "guessedname": "ERROR_DATAINVALID", "guessedtype": "property", "type": "String", "final": ""}, "responseSchema": {"type": "Object", "description": "Response schema object literal takes a combination of the following properties:\n<dl>\n<dt>resultsList<\/dt> <dd>Pointer to array of tabular data<\/dd>\n<dt>resultNode<\/dt> <dd>Pointer to node name of row data (XML data only)<\/dd>\n<dt>recordDelim<\/dt> <dd>Record delimiter (text data only)<\/dd>\n<dt>fieldDelim<\/dt> <dd>Field delimiter (text data only)<\/dd>\n<dt>fields<\/dt> <dd>Array of field names (aka keys), or array of object literals\nsuch as: {key:\"fieldname\",parser:YAHOO.util.DataSourceBase.parseDate}<\/dd>\n<dt>metaFields<\/dt> <dd>Object literal of keys to include in the oParsedResponse.meta collection<\/dd>\n<dt>metaNode<\/dt> <dd>Name of the node under which to search for meta information in XML response data<\/dd>\n<\/dl>", "guessedname": "responseSchema", "guessedtype": "property"}, "TYPE_JSARRAY": {"description": "Type is a JavaScript Array.", "default": "0", "guessedname": "TYPE_JSARRAY", "guessedtype": "property", "type": "Number", "final": ""}, "TYPE_XML": {"description": "Type is XML.", "default": "4", "guessedname": "TYPE_XML", "guessedtype": "property", "type": "Number", "final": ""}, "ERROR_DATANULL": {"description": "Error message for null data responses.", "default": "\"Null data\"", "guessedname": "ERROR_DATANULL", "guessedtype": "property", "type": "String", "final": ""}, "DataSource.Parser": {"type": "Object", "static": "", "description": "Data parsing functions.", "guessedname": "Parser", "guessedtype": "property"}, "_aIntervals": {"guessedname": "_aIntervals", "type": "Array", "description": "Array of polling interval IDs that have been enabled, needed to clear all intervals.", "private": "", "guessedtype": "property"}}, "guessedname": "DataSourceBase", "methods": {"flushCache": {"description": "Flushes cache.", "guessedname": "flushCache", "guessedtype": "function"}, "DataSourceBase.parseNumber": {"return": {"type": "Number", "description": "A number, or null if NaN."}, "description": "Converts data to type Number.", "static": "", "guessedname": "parseNumber", "guessedtype": "function", "params": [{"type": "String | Number | Boolean | Null", "name": "oData", "description": "  Data to convert. Beware, null\nreturns as 0."}]}, "parseArrayData": {"return": {"type": "Object", "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full Array from the live database."}], "description": "Overridable method parses Array data into a response object.", "guessedname": "parseArrayData", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID, or null if response found in cache."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>success<\/code><\/dt>\n<dd>The function to call when the data is ready.<\/dd>\n<dt><code>failure<\/code><\/dt>\n<dd>The function to call upon a response failure condition.<\/dd>\n<dt><code>scope<\/code><\/dt>\n<dd>The object to serve as the scope for the success and failure handlers.<\/dd>\n<dt><code>argument<\/code><\/dt>\n<dd>Arbitrary data that will be passed back to the success and failure handlers.<\/dd>\n<\/dl>"}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "First looks for cached response, then sends request to live data.", "guessedname": "sendRequest", "guessedtype": "function"}, "issueCallback": {"static": "", "params": [{"type": "Function|Object", "name": "callback", "description": "  the callback to execute"}, {"type": "Array", "name": "params", "description": "  params to be passed to the callback method"}, {"type": "Boolean", "name": "error", "description": "  whether an error occurred"}, {"type": "Object", "name": "scope", "description": "  the scope from which to execute the callback\n(deprecated - use an object literal callback)"}], "description": "Executes a configured callback.  For object literal callbacks, the third\nparam determines whether to execute the success handler or failure handler.", "guessedname": "issueCallback", "guessedtype": "function"}, "parseData": {"return": {"type": "Object} Parsed response object with the following properties:<br>\n- results {Array} Array of parsed data results<br>\n- meta {Object} Object literal of meta values<br>\n- error {Boolean", "description": "(optional) True if there was an error<br>"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full Array from the live database."}], "description": "Overridable method parses data of generic RESPONSE_TYPE into a response object.", "guessedname": "parseData", "guessedtype": "function"}, "parseTextData": {"return": {"type": "Object", "description": "Parsed response object with the following properties:<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full text response from the live database."}], "description": "Overridable method parses plain text data into a response object.", "guessedname": "parseTextData", "guessedtype": "function"}, "parseHTMLTableData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full HTML element reference from the live database."}], "description": "Overridable method parses an HTML TABLE element reference into a response object.\nData is parsed out of TR elements from all TBODY elements.", "guessedname": "parseHTMLTableData", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the DataSource instance."}, "description": "Public accessor to the unique name of the DataSource instance.", "guessedname": "toString", "guessedtype": "function"}, "parseJSONData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full JSON from the live database."}], "description": "Overridable method parses JSON data into a response object.", "guessedname": "parseJSONData", "guessedtype": "function"}, "doBeforeCallback": {"return": {"type": "Object", "description": "Parsed response object."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full response from the live database."}, {"type": "Object", "name": "oParsedResponse", "description": "  The parsed response to return to calling object."}, {"type": "Object", "name": "oCallback", "description": "  The callback object."}], "description": "Overridable method gives implementers access to the original full response and\nthe parsed response (parsed against the given schema) before the data\nis added to the cache (if applicable) and then sent back to callback function.\nThis is your chance to access the raw response and\/or populate the parsed\nresponse with any custom data.", "guessedname": "doBeforeCallback", "guessedtype": "function"}, "addToCache": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oResponse", "description": "  Response object to cache."}], "description": "Adds a new item to the cache. If cache is full, evicts the stalest item\nbefore adding the new item.", "guessedname": "addToCache", "guessedtype": "function"}, "getCachedResponse": {"return": {"type": "Object", "description": "Cached response object or null."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use callback object."}], "description": "Overridable method passes request to cache and returns cached response if any,\nrefreshing the hit in the cache as the newest item. Returns null if there is\nno cache hit.", "guessedname": "getCachedResponse", "guessedtype": "function"}, "setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "params": [{"type": "Number", "name": "nMsec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Function", "name": "oCallback", "description": "  Handler function to receive the response."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Sets up a polling mechanism to send requests at set intervals and forward\nresponses to given callback.", "guessedname": "setInterval", "guessedtype": "function"}, "parseXMLResult": {"return": {"type": "Object", "description": "Object literal of data for one result."}, "params": [{"type": "XML", "name": "result", "description": "  XML for one result."}], "description": "Overridable method parses XML data for one result into an object literal.", "guessedname": "parseXMLResult", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "Object", "name": "oRequest", "description": "  Request object"}, {"type": "Object", "name": "oRawResponse", "description": "  The raw response from the live database."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}, {"type": "Number", "name": "tId", "description": "  Transaction ID."}], "description": "Receives raw data response and type converts to XML, JSON, etc as necessary.\nForwards oFullResponse to appropriate parsing function to get turned into\noParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to \nthe cache when appropriate before calling issueCallback().\nThe oParsedResponse object literal has the following properties:\n<dl>\n<dd><dt>tId {Number}<\/dt> Unique transaction ID<\/dd>\n<dd><dt>results {Array}<\/dt> Array of parsed data results<\/dd>\n<dd><dt>meta {Object}<\/dt> Object literal of meta values<\/dd> \n<dd><dt>error {Boolean}<\/dt> (optional) True if there was an error<\/dd>\n<dd><dt>cached {Boolean}<\/dt> (optional) True if response was cached<\/dd>\n<\/dl>", "guessedname": "handleResponse", "guessedtype": "function"}, "clearInterval": {"params": [{"type": "Number", "name": "nId", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "parseXMLData": {"return": {"type": "Object", "description": "Parsed response object with the following properties<br>\n- results (Array) Array of parsed data results<br>\n- error (Boolean) True if there was an error"}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full XML response from the live database."}], "description": "Overridable method parses XML data into a response object.", "guessedname": "parseXMLData", "guessedtype": "function"}, "DataSourceBase.parseDate": {"return": {"type": "Date", "description": "A Date instance."}, "description": "Converts data to type Date.", "static": "", "guessedname": "parseDate", "guessedtype": "function", "params": [{"type": "Date | String | Number", "name": "oData", "description": "  Data to convert."}]}, "makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overridable default method generates a unique transaction ID and passes \nthe live data reference directly to the  handleResponse function. This\nmethod should be implemented by subclasses to achieve more complex behavior\nor to access remote data.", "guessedname": "makeConnection", "guessedtype": "function"}, "doBeforeParseData": {"return": {"type": "Object", "description": "Full response for parsing."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oFullResponse", "description": "  The full response from the live database."}, {"type": "Object", "name": "oCallback", "description": "  The callback object."}], "description": "Overridable method gives implementers access to the original full response\nbefore the data gets parsed. Implementers should take care not to return an\nunparsable or otherwise invalid response.", "guessedname": "doBeforeParseData", "guessedtype": "function"}, "DataSourceBase.parseString": {"return": {"type": "Number", "description": "A string, or null."}, "description": "Converts data to type String.", "static": "", "guessedname": "parseString", "guessedtype": "function", "params": [{"type": "String | Number | Boolean | Date | Array | Object", "name": "oData", "description": "  Data to parse.\nThe special values null and undefined will return null."}]}, "isCacheHit": {"return": {"type": "Boolean", "description": "True if given request matches cached request, false otherwise."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCachedRequest", "description": "  Cached request object."}], "description": "Default overridable method matches given request to given cached request.\nReturns true if is a hit, returns false otherwise.  Implementers should\noverride this method to customize the cache-matching algorithm.", "guessedname": "isCacheHit", "guessedtype": "function"}, "clearAllIntervals": {"description": "Disables all known polling intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "file": "datasource.js", "guessedtype": "function", "shortname": "DataSourceBase", "events": {"dataErrorEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}, {"type": "String", "name": "oArgs.message", "description": "  The error message."}], "description": "Fired when an error is encountered with the live data source."}, "responseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The raw response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Number", "name": "oArgs.tId", "description": "  Transaction ID."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when live data source sends response."}, "responseCacheEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when response is cached."}, "cacheFlushEvent": {"description": "Fired when the local cache is flushed."}, "requestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Number", "name": "oArgs.tId", "description": "  Transaction ID."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when a request is sent to the live data source."}, "cacheRequestEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when a request is made to the local cache."}, "responseParseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The parsed response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when response is parsed."}, "cacheResponseEvent": {"params": [{"type": "Object", "name": "oArgs.request", "description": "  The request object."}, {"type": "Object", "name": "oArgs.response", "description": "  The response object."}, {"type": "Object", "name": "oArgs.callback", "description": "  The callback object."}, {"type": "Object", "name": "oArgs.caller", "description": "  (deprecated) Use callback.scope."}], "description": "Fired when data is retrieved from the local cache."}}, "description": "Base class for the YUI DataSource utility."}, "YAHOO.util.FunctionDataSource": {"name": "YAHOO.util.FunctionDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "FunctionDataSource class for JavaScript functions."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "FunctionDataSource", "methods": {"makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to a function. The returned response is then\nforwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "datasource.js", "guessedtype": "function", "shortname": "FunctionDataSource", "description": "FunctionDataSource class for JavaScript functions."}, "YAHOO.util.DateLocale": {"name": "YAHOO.util.DateLocale", "namespace": "YAHOO.util", "module": "datasource", "guessedname": "DateLocale", "file": "datasource.js", "guessedtype": "property", "shortname": "DateLocale", "requires": "yahoo", "description": "The DateLocale class is a container and base class for all\nlocalised date strings used by YAHOO.util.Date. It is used\ninternally, but may be extended to provide new date localisations.\nTo create your own DateLocale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs<\/li>\n<li>Use this as your base class.  Use YAHOO.util.DateLocale if nothing\nmatches.<\/li>\n<li>Create your own class as an extension of the base class using\nYAHOO.lang.merge, and add your own localisations where needed.<\/li>\n<\/ol>\nSee the YAHOO.util.DateLocale['en-US'] and YAHOO.util.DateLocale['en-GB']\nclasses which extend YAHOO.util.DateLocale['en'].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nYAHOO.util.DateLocale as the base, and extend it:\n<pre>\nYAHOO.util.DateLocale['fr'] = YAHOO.lang.merge(YAHOO.util.DateLocale, {\na: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],\nA: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],\nb: ['jan', 'f&eacute;v', 'mar', 'avr', 'mai', 'jun', 'jui', 'ao&ucirc;', 'sep', 'oct', 'nov', 'd&eacute;c'],\nB: ['janvier', 'f&eacute;vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao&ucirc;t', 'septembre', 'octobre', 'novembre', 'd&eacute;cembre'],\nc: '%a %d %b %Y %T %Z',\np: ['', ''],\nP: ['', ''],\nx: '%d.%m.%Y',\nX: '%T'\n});\n<\/pre>\n<\/li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nYAHOO.util.DateLocale['fr-CA'] = YAHOO.lang.merge(YAHOO.util.DateLocale['fr'], {\nx: '%Y-%m-%d'\n});\n<\/pre>\n<\/li>\n<\/ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008\/04\/22\");\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr\");\n<\/pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n<\/pre>\nAnd\n<pre>\nYAHOO.util.Date.format(d, {format: \"%A, %d %B == %x\"}, \"fr-CA\");\n<\/pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n<\/pre>"}, "Array": {"name": "Array", "constructors": [{"description": "The JavaScript Array Object.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}], "namespace": "", "module": "window", "methods": {"sort": {"return": {"type": "Array", "description": "The array calling method."}, "params": [{"type": "Function", "name": "sortby", "description": "  Optional. Specifies the sort order. Must be a function."}], "public": "", "description": "The sort() method is used to sort the elements of an array.\nThe sort() method will sort the elements alphabetically by default. However, this means that numbers will not be sorted correctly (40 comes before 5). To sort numbers, you must create a function that compare numbers.\nAfter using the sort() method, the array is changed.\nsince FireFox 1.0, Netscape 3.0, and IE 4.0\nsortby for number sorting is:\nfunction sortNumber(a,b){return a - b;}"}, "slice": {"return": {"type": "Array", "description": "The elements removed from the array."}, "params": [{"type": "Number", "name": "start", "description": "  Required. Specify where to start the selection. Must be a number."}, {"type": "Number", "name": "end", "description": "  Optional. Specify where to end  the selection. Must be a number."}], "public": "", "description": "The slice() method returns selected elements from an existing array.\nYou can use negative numbers to select from the end of the array.\nIf end is not specified, slice() selects all elements from the specified start position and to the end of the array.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "join": {"return": {"type": "String", "description": "The array values as a string separeted by separator."}, "params": [{"type": "String", "name": "separator", "description": "  Optional. Specifies the separator to be used."}], "public": "", "description": "The join() method is used to put all the elements of an array into a string.\nThe elements will be separated by a specified separator.\nsince FireFox 1.0, Netscape 3.0, and IE 4.0"}, "reverse": {"return": {"type": "Array", "description": "The array calling method."}, "public": "", "description": "The reverse() method is used to reverse the order of the elements in an array.\nThe reverse() method changes the original array.\nsince FireFox 1.0, Netscape 3.0, and IE 4.0"}, "shift": {"see": "pop", "return": {"type": "Object", "description": "The first element in the array."}, "public": "", "description": "The shift() method is used to remove and return the first element of an array.\nThis method changes the length of the array.\nsince FireFox 1.0, Netscape 4.0, and IE 5.5"}, "valueOf": {"return": {"type": "Array", "description": "The array primitive."}, "public": "", "description": "The valueOf() method returns the primitive value of an Array object.\nThe primitive value is inherited by all objects descended from the Array object.\nThe valueOf() method is usually called automatically by JavaScript behind the scenes and not explicitly in code.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "unshift": {"see": "pop", "return": {"type": "Number", "description": "The new length of the array."}, "public": "", "description": "The unshift() method adds one or more elements to the beginning of an array and returns the new length.\nThis method changes the length of the array.\nThe unshift() method does not work properly in Internet Explorer!\nsince FireFox 1.0, Netscape 4.0, and IE 6.0"}, "pop": {"see": "push", "return": {"type": "Object", "description": "The last element in the array."}, "public": "", "description": "The pop() method is used to remove and return the last element of an array.\nThis method changes the length of the array.\nsince FireFox 1.0, Netscape 4.0, and IE 5.5"}, "toString": {"return": {"type": "String", "description": "The array as a String."}, "public": "", "description": "The toString() method converts a array value to a String and returns the result.\nThe elements in the array will be separated with commas.\nsince FireFox 1.0, Netscape 3.0, and IE 4.0"}, "splice": {"return": {"type": "Array", "description": "The array calling method with new elements."}, "params": [{"type": "Number", "name": "index", "description": "  Required. Specify where to add\/remove elements. Must be a number."}, {"type": "Number", "name": "howmany", "description": "  Required Specify how many elements should be removed. Must be a number, but can be \"0\"."}, {"type": "Object", "name": "element1", "description": "  Optional. Specify a new object to add to the array."}, {"type": "Object", "name": "elementX", "description": "  Optional. Any number of additional objects parameters to append."}], "public": "", "description": "The splice() method is used to remove and add new elements to an array.\nsince FireFox 1.0, Netscape 4.0, and IE 5.5"}, "push": {"return": {"type": "Array", "description": "The array calling method with new elements."}, "see": "pop", "params": [{"type": "Object", "name": "newelement1", "description": "  Required. The first object to append."}, {"type": "Object", "name": "newelementX", "description": "  Optional. Any number of additional objects parameters to append."}], "description": "The push() method adds one or more elements to the end of an array and returns the new length.\nThis method changes the length of the array.\nsince FireFox 1.0, Netscape 4.0, and IE 5.5", "public": ""}, "toSource": {"return": {"type": "String", "description": "The source-code that generated the array."}, "public": "", "description": "Returns the source code used to generate array.\nThis method does not work in Internet Explorer!\nsince FireFox 1.0 and Netscape 4.0"}, "concat": {"return": {"type": "Array", "description": "A new array containing the combined arrays."}, "public": "", "description": "The concat() method is used to join two or more arrays.\nThis method does not change the existing arrays, it only returns a copy of the joined arrays.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}}, "file": "array.js", "shortname": "Array", "properties": {"length": {"type": "Object", "description": "Sets or returns the number of elements in an array.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0", "public": ""}, "prototype": {"type": "Object", "description": "Allows you to add properties and methods to the object.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0", "public": ""}}, "description": "The JavaScript Array Object.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "YAHOO.lang": {"guessedname": "lang", "name": "YAHOO.lang", "namespace": "", "module": "yahoo", "methods": {"isSafari": {"static": "", "return": {"type": "Boolean", "description": "The client is safari."}, "description": "Test if the client browser is safari.", "guessedname": "isSafari", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "since": "2.3.0", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}], "guessedname": "trim", "guessedtype": "function"}, "dump": {"return": {"type": "String", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "since": "2.3.0", "params": [{"type": "Object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function"}, "arrayWalk": {"static": "", "params": [{"type": "Array", "name": "arr", "description": "  Required. The array or array-like object to iterate on (must have a length)."}, {"type": "Function", "name": "fx", "description": "  Required. The function to execute."}, {"type": "Object", "name": "scope", "description": "  Optional. The execution scope."}], "description": "Iterates on the provided array and calls provided function with the value of each index.", "guessedname": "arrayWalk", "guessedtype": "function"}, "augmentProto": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype properties", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augmentProto", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything \nin the supplier will be used unless it would overwrite an existing \nproperty in the receiver.  if true is specified as the third \nparameter, all properties will be applied and will overwrite an \nexisting property in the receiver"}]}, "isFunction": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a function", "guessedname": "isFunction", "guessedtype": "function"}, "callLazy": {"static": "", "params": [{"type": "Function", "name": "callback", "description": "  Required. The callback method."}, {"type": "Function", "name": "isReady", "description": "  Required. The is ready test function."}, {"type": "Object} Optional. Configuration options for execution.\nfailure: {Function} The method to call if max iteration is reached.\nmaxExec: {Number} The maximum number of time to execute; default is 25.\ntimeout: {Number} The number of milliseconds to wait before checking 'isReady'; default is 100ms.\nparams: {Object", "name": "conf", "description": "  An object to pass through to callback function."}], "description": "Wrapper for simple lazy-loading functions.", "guessedname": "callLazy", "guessedtype": "function"}, "throwError": {"static": "", "params": [{"type": "String", "name": "text", "description": "  Required. The error text."}], "description": "Throws the provided error text after performing text replacement.", "guessedname": "throwError", "guessedtype": "function"}, "isBoolean": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "hasOwnProperty": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}, {"type": "string", "name": "prop", "description": "  the name of the property to test"}], "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.\nThis abstraction is provided to enable hasOwnProperty for Safari 1.3.x.\nThere is a discrepancy between YAHOO.lang.hasOwnProperty and\nObject.prototype.hasOwnProperty when the property is a primitive added to\nboth the instance AND prototype with the same value:\n<pre>\nvar A = function() {};\nA.prototype.foo = 'foo';\nvar a = new A();\na.foo = 'foo';\nalert(a.hasOwnProperty('foo')); \/\/ true\nalert(YAHOO.lang.hasOwnProperty(a, 'foo')); \/\/ false when using fallback\n<\/pre>", "guessedname": "hasOwnProperty", "guessedtype": "property"}, "merge": {"return": {"type": "", "description": "the new merged object"}, "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.", "since": "2.3.0", "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "guessedname": "merge", "guessedtype": "function"}, "isIE": {"static": "", "return": {"type": "Boolean", "description": "The client is IE."}, "description": "Test if the client browser is IE.", "guessedname": "isIE", "guessedtype": "function"}, "substitute": {"return": {"type": "String", "description": "the substituted string"}, "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs.", "since": "2.3.0", "params": [{"type": "String", "name": "s", "description": "  The string that will be modified."}, {"type": "Object", "name": "o", "description": "  An object containing the replacement values"}, {"type": "Function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "guessedname": "substitute", "guessedtype": "function"}, "isUndefined": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is undefined", "guessedname": "isUndefined", "guessedtype": "function"}, "isArray": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is an array.\nTesting typeof\/instanceof\/constructor of arrays across frame \nboundaries isn't possible in Safari unless you have a reference\nto the other frame to test against its Array prototype.  To\nhandle this case, we test well-known array properties instead.\nproperties.", "guessedname": "isArray", "guessedtype": "function"}, "isFireFox": {"static": "", "return": {"type": "Boolean", "description": "The client is firefox."}, "description": "Test if the client browser is firefox.", "guessedname": "isFireFox", "guessedtype": "function"}, "extend": {"static": "", "params": [{"type": "Function", "name": "subc", "description": "   the object to modify"}, {"type": "Function", "name": "superc", "description": " the object to inherit"}, {"type": "Object", "name": "overrides", "description": "  additional properties\/methods to add to the\nsubclass prototype.  These will override the\nmatching items obtained from the superclass \nif present."}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "isArgument": {"return": {"type": "Boolean", "description": "The object is an argument."}, "description": "Evaluates if the provided object is an arguments object or not.", "static": "", "guessedname": "isArgument", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Required. The object to evaluate."}]}, "isIE7": {"static": "", "return": {"type": "Boolean", "description": "The client is IE 7."}, "description": "Test if the client browser is IE 7.", "guessedname": "isIE7", "guessedtype": "function"}, "isIE6": {"static": "", "return": {"type": "Boolean", "description": "The client is IE 6."}, "description": "Test if the client browser is IE 6.", "guessedname": "isIE6", "guessedtype": "function"}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "since": "2.3.0", "params": [{"type": "any", "name": "o", "description": "  the item to test"}], "guessedname": "isValue", "guessedtype": "function"}, "forEach": {"static": "", "params": [{"type": "Object", "name": "obj", "description": "  Required. The object to loop through."}, {"type": "Function", "name": "fx", "description": "  Required. The callback function."}], "description": "Provides a safe method for executing a for ... in\" loop on the provided object, calling the function with the object and key.", "guessedname": "forEach", "guessedtype": "function"}, "isNumber": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a legal number", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is of type object\nor function", "guessedname": "isObject", "guessedtype": "function"}, "isDate": {"return": {"type": "Boolean", "description": "The object is a Date."}, "description": "Evaluates if the provided object is an Date object or not; the special \"o.length\" check is for Array-Like object that may not have 'constructor'.", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Required. The object to evaluate."}]}, "isString": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is a string", "guessedname": "isString", "guessedtype": "function"}, "augment": {"description": "Same as YAHOO.lang.augmentObject, except it only applies prototype \nproperties.  This is an alias for augmentProto.", "see": "YAHOO.lang.augmentObject", "static": "", "guessedname": "augment", "guessedtype": "property", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods to \naugment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver.  if true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}, "later": {"return": {"type": "", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "since": "2.4.0", "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed"}, {"type": "", "name": "o", "description": " the context object"}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute"}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]"}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled"}], "guessedname": "later", "guessedtype": "function"}, "isDefined": {"return": {"type": "Boolean", "description": "The object is a defined."}, "description": "Evaluates if the provided object is defined or not; defined means not NULL and not UNDEFINED. Slightly more performance than YAHOO.lang.isValue.", "see": "YAHOO.lang.isValue", "params": [{"type": "Object", "name": "o", "description": "  Required. The object to evaluate."}], "guessedname": "isDefined", "guessedtype": "function", "static": ""}, "isNull": {"return": {"type": "boolean", "description": "the result"}, "params": [{"type": "any", "name": "o", "description": " The object being testing"}], "description": "Determines whether or not the provided object is null", "guessedname": "isNull", "guessedtype": "function"}, "isOpera": {"static": "", "return": {"type": "Boolean", "description": "The client is opera."}, "description": "Test if the client browser is opera.", "guessedname": "isOpera", "guessedtype": "function"}, "isRegExp": {"return": {"type": "Boolean", "description": "The object is a RegExp."}, "description": "Evaluates if the provided object is a regular expression object or not.", "static": "", "guessedname": "isRegExp", "guessedtype": "function", "params": [{"type": "Object", "name": "o", "description": "  Required. The object to evaluate."}]}, "augmentObject": {"description": "Applies all properties in the supplier to the receiver if the\nreceiver does not have these properties yet.  Optionally, one or \nmore methods\/properties can be specified (as additional \nparameters).  This option will overwrite the property if receiver \nhas it already.  If true is passed as the third parameter, all \nproperties will be applied and _will_ overwrite properties in \nthe receiver.", "since": "2.3.0", "static": "", "guessedname": "augmentObject", "guessedtype": "function", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "String*|boolean", "name": "arguments", "description": " zero or more properties methods \nto augment the receiver with.  If none specified, everything\nin the supplier will be used unless it would\noverwrite an existing property in the receiver. If true\nis specified as the third parameter, all properties will\nbe applied and will overwrite an existing property in\nthe receiver"}]}}, "static": "", "file": "yahoo.js", "guessedtype": "property", "shortname": "YAHOO.lang", "properties": {"ERROR_MALFORMED_OBJECT": {"description": "The error text to throw when an object is missing a required key.", "static": "", "guessedname": "ERROR_MALFORMED_OBJECT", "guessedtype": "property", "type": "String", "final": ""}, "ERROR_NOT_DEFINED": {"description": "The error text to throw when a required value is not defined.", "static": "", "guessedname": "ERROR_NOT_DEFINED", "guessedtype": "property", "type": "String", "final": ""}, "ERROR_NOT_IMPLEMENTED": {"description": "The error text to throw when a method is not implemetented.", "static": "", "guessedname": "ERROR_NOT_IMPLEMENTED", "guessedtype": "property", "type": "String", "final": ""}, "ERROR_INVALID_PARAMETERS": {"description": "The error text to throw when invalid parameters are passed into a method.", "static": "", "guessedname": "ERROR_INVALID_PARAMETERS", "guessedtype": "property", "type": "String", "final": ""}, "_IEEnumFix": {"description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "param": "{Function} r  the object to receive the augmentation", "static": "", "private": "", "guessedname": "_IEEnumFix", "guessedtype": "function"}}, "description": "Extending YAHOO.lang."}, "YAHOO.util.DataSource": {"name": "YAHOO.util.DataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "DataSource", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSource", "description": "Factory class for creating a BaseDataSource subclass instance. The sublcass is\ndetermined by oLiveData's type, unless the dataType config is explicitly passed in."}, "C.HTML.ID": {"name": "C.HTML.ID", "namespace": "C.HTML", "module": "window", "guessedname": "ID", "static": "", "file": "constant.js", "guessedtype": "property", "shortname": "ID", "properties": {"BODY": {"description": "The DOM id attribute for identifying the project's body element.", "readonly": "Defined at build time.", "static": "", "guessedname": "BODY", "guessedtype": "property", "type": "{String}", "final": ""}}, "description": "The global object to hold all ID constants."}, "Core.Util.EventDispatcher": {"name": "Core.Util.EventDispatcher", "namespace": "Core.Util", "module": "mvc", "guessedname": "EventDispatcher", "methods": {"register": {"static": "", "params": [{"type": "String", "name": "type", "description": "  Required. The event type (ie. 'click')."}, {"type": "Object", "name": "o", "description": "  Required. The event data."}], "description": "Method to register an event on the document.", "guessedname": "register", "guessedtype": "function"}, "registerOnce": {"static": "", "params": [{"type": "String", "name": "type", "description": "  Required. The event type (ie. 'click')."}, {"type": "Object", "name": "o", "description": "  Required. The event data."}], "description": "Call this method to register an event the first time _that ID is provided, and not subsequent times.", "guessedname": "registerOnce", "guessedtype": "function"}, "dispatcher": {"guessedname": "dispatcher", "params": [{"type": "Event", "name": "e", "description": "  Required. The triggered JavaScript event."}], "description": "The generic event dispatcher callback; passes these parameters into callback(event, targetNode, flattenedArguments...).", "private": "", "guessedtype": "function"}}, "static": "", "file": "eventDispatcher.js", "guessedtype": "function", "shortname": "EventDispatcher", "description": "The EventDispatcher class dispatches events for an entire page, using ."}, "YAHOO.util.ColorAnim": {"name": "YAHOO.util.ColorAnim", "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.\nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.\nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").\nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "guessedname": "ColorAnim", "methods": {"parseColor": {"return": {"type": "Array", "description": "The 3-tuple of rgb values."}, "params": [{"type": "String", "name": "s", "description": " The string to parse."}], "description": "Attempts to parse the given string and return a 3-tuple.", "guessedname": "parseColor", "guessedtype": "function"}}, "extends": "YAHOO.util.Anim", "superclass": "YAHOO.util.Anim", "file": "animation.js", "guessedtype": "function", "shortname": "ColorAnim", "requires": "YAHOO.util.Anim", "description": "Anim subclass for color transitions.\n<p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);<\/code> Color values can be specified with either 112233, #112233, \n[255,255,255], or rgb(255,255,255)<\/p>"}, "YAHOO_config": {"name": "YAHOO_config", "namespace": "", "module": "yahoo", "static": "", "file": "yahoo.js", "shortname": "YAHOO_config", "properties": {"listener": {"default": "undefined", "type": "Function", "static": "", "description": "A reference to a function that will be executed every time a YAHOO module\nis loaded.  As parameter, this function will receive the version\ninformation for the module. See <a href=\"YAHOO.env.html#getVersion\">\nYAHOO.env.getVersion<\/a> for the description of the version data structure."}, "load": {"default": "undefined", "see": "yuiloader", "static": "", "description": "Instructs the yuiloader component to dynamically load yui components and\ntheir dependencies.  See the yuiloader documentation for more information\nabout dynamic loading"}, "locale": {"description": "Forces the use of the supplied locale where applicable in the library", "default": "undefined", "static": "", "guessedname": "YAHOO", "guessedtype": "property", "type": "string"}, "injecting": {"default": "undefined", "type": "boolean", "static": "", "description": "Set to true if the library will be dynamically loaded after window.onload.\nDefaults to false"}}, "description": "YAHOO_config is not included as part of the library.  Instead it is an \nobject that can be defined by the implementer immediately before \nincluding the YUI library.  The properties included in this object\nwill be used to configure global properties needed as soon as the \nlibrary begins to load."}, "YAHOO.util.ScriptNodeDataSource": {"name": "YAHOO.util.ScriptNodeDataSource", "constructors": [{"params": [{"type": "HTMLElement", "name": "oLiveData", "description": "   Pointer to live data."}, {"type": "object", "name": "oConfigs", "description": "  (optional) Object literal of configuration values."}], "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility."}], "namespace": "YAHOO.util", "module": "datasource", "guessedname": "ScriptNodeDataSource", "methods": {"makeConnection": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "oRequest", "description": "  Request object."}, {"type": "Object", "name": "oCallback", "description": "  Callback object literal."}, {"type": "Object", "name": "oCaller", "description": "  (deprecated) Use oCallback.scope."}], "description": "Overriding method passes query to Get Utility. The returned\nresponse is then forwarded to the handleResponse function.", "guessedname": "makeConnection", "guessedtype": "function"}, "generateRequestCallback": {"return": {"type": "String", "description": "String fragment that gets appended to script URI that \nspecifies the callback function"}, "description": "Creates a request callback that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.", "guessedname": "generateRequestCallback", "guessedtype": "function"}}, "extends": "YAHOO.util.DataSourceBase", "superclass": "YAHOO.util.DataSourceBase", "file": "datasource.js", "guessedtype": "function", "shortname": "ScriptNodeDataSource", "properties": {"_nPending": {"description": "Counter for pending requests. When this is 0, it is safe to purge callbacks\narray.", "private": "", "static": "", "guessedname": "_nPending", "guessedtype": "property", "type": "Number"}, "scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "getUtility": {"default": "YAHOO.util.Get", "type": "Object", "description": "Alias to YUI Get Utility, to allow implementers to use a custom class.", "guessedname": "getUtility", "guessedtype": "property"}, "_nId": {"description": "Unique ID to track requests.", "private": "", "static": "", "guessedname": "_nId", "guessedtype": "property", "type": "Number"}, "callbacks": {"type": "Function[]", "static": "", "description": "Global array of callback functions, one for each request sent.", "guessedname": "callbacks", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request\/response management in the following manner:\n<dl>\n<!--<dt>queueRequests<\/dt>\n<dd>If a request is already in progress, wait until response is returned before sending the next request.<\/dd>\n<dt>cancelStaleRequests<\/dt>\n<dd>If a request is already in progress, cancel it before sending the next request.<\/dd>-->\n<dt>ignoreStaleResponses<\/dt>\n<dd>Send all requests, but handle only the response for the most recently sent request.<\/dd>\n<dt>allowAll<\/dt>\n<dd>Send all requests and handle all responses.<\/dd>\n<\/dl>", "guessedname": "asyncMode", "guessedtype": "property"}}, "description": "ScriptNodeDataSource class for accessing remote data via the YUI Get Utility."}, "YAHOO.util.Anim": {"name": "YAHOO.util.Anim", "constructors": [{"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}], "namespace": "YAHOO.util", "module": "animation", "events": {"onComplete": {"description": "Custom event that fires when animation ends\nListen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)", "guessedname": "onComplete", "guessedtype": "property"}, "onStart": {"description": "Custom event that fires when animation begins\nListen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)", "guessedname": "onStart", "guessedtype": "property"}, "onTween": {"description": "Custom event that fires between each frame\nListen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)", "guessedname": "onTween", "guessedtype": "property"}}, "guessedname": "Anim", "methods": {"isAnimated": {"return": {"type": "Boolean", "description": "current value of isAnimated."}, "description": "Checks whether the element is currently animated.", "guessedname": "isAnimated", "guessedtype": "function"}, "setEl": {"description": "Changes the animated element", "guessedname": "setEl", "guessedtype": "function"}, "getAttribute": {"return": {"type": "Number", "description": "val The current value of the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}], "description": "Returns current value of the attribute.", "guessedname": "getAttribute", "guessedtype": "function"}, "setAttribute": {"params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "val", "description": " The value to be applied to the attribute."}, {"type": "String", "name": "unit", "description": " The unit ('px', '%', etc.) of the value."}], "description": "Applies a value to an attribute.", "guessedname": "setAttribute", "guessedtype": "function"}, "onTween": {"private": "", "description": "Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s).", "guessedname": "onTween", "guessedtype": "function"}, "doMethod": {"return": {"type": "Number", "description": "The Value to be applied to the attribute."}, "params": [{"type": "String", "name": "attr", "description": " The name of the attribute."}, {"type": "Number", "name": "start", "description": " The value this attribute should start from for this animation."}, {"type": "Number", "name": "end", "description": "  The value this attribute should end at for this animation."}], "description": "Returns the value computed by the animation's \"method\".", "guessedname": "doMethod", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": ""}, "description": "Returns a reference to the animated element.", "guessedname": "getEl", "guessedtype": "function"}, "setRuntimeAttribute": {"guessedname": "setRuntimeAttribute", "params": [{"type": "Object", "name": "attr", "description": " The attribute object"}], "description": "Sets the actual values to be used during the animation.  Should only be needed for subclass use.", "private": "", "guessedtype": "function"}, "stop": {"params": [{"type": "Boolean", "name": "finish", "description": " (optional) If true, animation will jump to final frame."}], "description": "Stops the animation.  Normally called by AnimMgr when animation completes.", "guessedname": "stop", "guessedtype": "function"}, "init": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " Reference to the element that will be animated"}, {"type": "Object", "name": "attributes", "description": " The attribute(s) to be animated.  \nEach attribute is an object with at minimum a \"to\" or \"by\" member defined.  \nAdditional optional members are \"from\" (defaults to current value), \"units\" (defaults to \"px\").  \nAll attribute names use camelCase."}, {"type": "Number", "name": "duration", "description": " (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based"}, {"type": "Function", "name": "method", "description": " (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)"}], "description": "Constructor for Anim instance.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Provides a readable name for the Anim instance.", "guessedname": "toString", "guessedtype": "function"}, "getDefaultUnit": {"return": {"type": "String", "description": "The default unit to be used."}, "params": [{"type": "attr", "name": "attr", "description": " The name of the attribute."}], "description": "Returns the unit to use when none is supplied.", "guessedname": "getDefaultUnit", "guessedtype": "function"}, "animate": {"description": "Starts the animation by registering it with the animation manager.", "guessedname": "animate", "guessedtype": "function"}, "getStartTime": {"return": {"type": "Date", "description": "current value of startTime."}, "description": "Returns the animation start time.", "guessedname": "getStartTime", "guessedtype": "function"}}, "file": "animation.js", "guessedtype": "function", "shortname": "Anim", "requires": "YAHOO.util.AnimMgr", "properties": {"isAnimated": {"guessedname": "isAnimated", "type": "Boolean", "description": "Whether or not the animation is running.", "private": "", "guessedtype": "property"}, "_onTween": {"private": "", "description": "Custom event that fires after onTween", "guessedname": "_onTween", "guessedtype": "property"}, "el": {"guessedname": "el", "type": "HTMLElement", "description": "The element to be animated.", "private": "", "guessedtype": "property"}, "actualFrames": {"guessedname": "actualFrames", "type": "Int", "description": "The number of frames this animation was able to execute.", "private": "", "guessedtype": "property"}, "useSeconds": {"type": "Boolean", "description": "Whether or not the duration should be treated as seconds.\nDefaults to true.", "guessedname": "useSeconds", "guessedtype": "property"}, "totalFrames": {"type": "Int", "description": "The total number of frames to be executed.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "totalFrames", "guessedtype": "property"}, "_onStart": {"private": "", "description": "Custom event that fires after onStart, useful in subclassing", "guessedname": "_onStart", "guessedtype": "property"}, "_onComplete": {"private": "", "description": "Custom event that fires after onComplete", "guessedname": "_onComplete", "guessedtype": "property"}, "startTime": {"guessedname": "startTime", "type": "Date", "description": "A Date object that is created when the animation begins.", "private": "", "guessedtype": "property"}, "duration": {"type": "Number", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "attributes": {"type": "Object", "description": "The collection of attributes to be animated.  \nEach attribute must have at least a \"to\" or \"by\" defined in order to animate.  \nIf \"to\" is supplied, the animation will end with the attribute at that value.  \nIf \"by\" is supplied, the animation will end at that value plus its starting value. \nIf both are supplied, \"to\" is used, and \"by\" is ignored. \nOptional additional member include \"from\" (the value the attribute should start animating from, defaults to current value), and \"unit\" (the units to apply to the values).", "guessedname": "attributes", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"YAHOO.util.Easing.easeNone\".", "guessedname": "method", "guessedtype": "property"}, "currentFrame": {"type": "Int", "description": "The location of the current animation on the timeline.\nIn time-based animations, this is used by AnimMgr to ensure the animation finishes on time.", "guessedname": "currentFrame", "guessedtype": "property"}}, "description": "Base animation class that provides the interface for building animated effects.\n<p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);<\/p>"}, "C.HTML.Date": {"name": "C.HTML.Date", "constructors": [{"description": "The JavaScript Date Object\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}], "namespace": "C.HTML", "module": "window", "methods": {"getSeconds": {"return": {"type": "Number", "description": "the second of the minute"}, "public": "", "description": "The getSeconds() method returns the seconds of a time; 0-59.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "toLocaleString": {"return": {"type": "String", "description": "the Date as a String according to locale"}, "public": "", "description": "The toLocaleString() method converts a Date object, according to local time, to a string and returns the result.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getMinutes": {"return": {"type": "Number", "description": "the minute of the hour"}, "public": "", "description": "The getMinutes() method returns the minutes of a time; 0-59.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getUTCDay": {"return": {"type": "Number", "description": "the day of the week according to universal time"}, "public": "", "description": "The getUTCDay() method returns a number that represents the day of the week according to the Universal Coordinated Time (UTC); 0-6.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getTime": {"return": {"type": "Number", "description": "the number of milliseconds since midnight Jan 1, 1970"}, "public": "", "description": "The getTime() method returns the number of milliseconds since midnight of January 1, 1970.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getHours": {"return": {"type": "Number", "description": "the hour of the day"}, "public": "", "description": "The getHours() method returns the hour of a time; 0-23.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "valueOf": {"return": {"type": "Date", "description": "Returns the primitive value of a Date object"}, "public": "", "description": "The valueOf() method returns the primitive value of a Date object.\nThe primitive value is inherited by all objects descended from the Date object.\nThe valueOf() method is usually called automatically by JavaScript behind the scenes and not explicitly in code.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "setUTCSeconds": {"params": [{"type": "String", "name": "sec", "description": "  Required. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setUTCSeconds() method is used to set the second of the minute according to universal time; 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "parse": {"return": {"type": "Number", "description": "the milliseconds representation of the datestring"}, "static": "", "params": [{"type": "String", "name": "datestring", "description": "  Required. A string representing a date."}], "description": "The parse() method takes a date string and returns the number of milliseconds since midnight of January 1, 1970.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setUTCMilliseconds": {"params": [{"type": "String", "name": "millisec", "description": "  Required. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setUTCMilliseconds() method is used to set the milliseconds of the second according to universal time; 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "toGMTString": {"depreciated": "use toUTCString instead", "return": {"type": "String", "description": "the Date as a String according to Greenwich time"}, "public": "", "description": "The toGMTString() method converts a Date object, according to Greenwich Mean Time (GMT), to a string and returns the result.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "setUTCMinutes": {"params": [{"type": "String", "name": "min", "description": "  Required. A numeric value (from 0 to 59) that represents a minutes of an hour"}, {"type": "String", "name": "sec", "description": "  Optional. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setUTCMinutes() method is used to set the minute of the hour according to universal time; 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "setMilliseconds": {"params": [{"type": "String", "name": "millisec", "description": "  Required. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setMilliseconds() method is used to set the milliseconds of the second; 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "getUTCDate": {"return": {"type": "Number", "description": "the day of the month according to universal time"}, "public": "", "description": "The getUTCDate() method returns the day of the month according to the Universal Coordinated Time (UTC); 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "setSeconds": {"params": [{"type": "String", "name": "sec", "description": "  Required. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setSeconds() method is used to set the second of the minute; 1-31.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getUTCMilliseconds": {"return": {"type": "Number", "description": "the milliseconds of the second according to universal time"}, "public": "", "description": "The getUTCMilliseconds() method returns the milliseconds of a time according to the Universal Coordinated Time (UTC); 0-999.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "setUTCDate": {"params": [{"type": "String", "name": "day", "description": "  Required. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setUTCDate() method is used to set the day of the month according to universal time; 1-31.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "getUTCMinutes": {"return": {"type": "Number", "description": "the minute of the hour according to universal time"}, "public": "", "description": "The getUTCMinutes() method returns the minutes of a time according to the Universal Coordinated Time (UTC); 0-59.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "toString": {"return": {"type": "String", "description": "the Date as a String"}, "public": "", "description": "The toString() method converts a Date object to a string and returns the result.\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "getYear": {"depreciated": "use getFullYear instead", "return": {"type": "Number", "description": "the year, as a two-digit or a four-digit number"}, "public": "", "description": "The getYear() method returns the year, as a two-digit OR a four-digit number.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setDate": {"params": [{"type": "String", "name": "day", "description": "  Required. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setDate() method is used to set the day of the month; 1-31.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setHours": {"params": [{"type": "String", "name": "hours", "description": "  Required. A numeric value (from 0 to 23) that represents a hour of a day"}, {"type": "String", "name": "min", "description": "  Optional. A numeric value (from 0 to 59) that represents a minutes of an hour"}, {"type": "String", "name": "sec", "description": "  Optional. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setHours() method is used to set the hour of the day; 0-23.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getMonth": {"return": {"type": "Number", "description": "the month of the year"}, "public": "", "description": "The getMonth() method returns the month, as a number; 0-11.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getDate": {"return": {"type": "Number", "description": "the day of the month"}, "public": "", "description": "The getDate() method returns the day of the month; 1-31.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getUTCHours": {"return": {"type": "Number", "description": "the hour of the day according to universal time"}, "public": "", "description": "The getUTCHours() method returns the hour of a time according to the Universal Coordinated Time (UTC); 0-23.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setUTCMonth": {"params": [{"type": "String", "name": "month", "description": "  Required. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Optional. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setUTCMonth() method is used to set the month of the year according to universal time; 0-11.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "toSource": {"return": {"type": "String", "description": "the source-code that generated the Date"}, "public": "", "description": "The toSource() method represents the source code of an object.\nsince FireFox 1.0 and Netscape 4.0"}, "getFullYear": {"return": {"type": "Number", "description": "the 4-digit year"}, "public": "", "description": "The getFullYear() method returns a four-digit number that represents a year.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "Date": {"return": {"type": "Date", "description": "today's date and time"}, "public": "", "description": "The Date() method returns today's date and time.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getDay": {"return": {"type": "Number", "description": "the day of the week"}, "public": "", "description": "The getDay() method returns a number that represents the day of the week; 0-6.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "toUTCString": {"return": {"type": "String", "description": "the Date as a String according to universal time"}, "public": "", "description": "The toUTCString() method converts a Date object, according to Universal Coordinated Time (UTC), to a string and returns the result.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "getUTCSeconds": {"return": {"type": "Number", "description": "the second of the minute according to universal time"}, "public": "", "description": "The getUTCSeconds() method returns the seconds of a time according to the Universal Coordinated Time (UTC); 0-59.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getUTCFullYear": {"return": {"type": "Number", "description": "the 4-digit year according to universal time"}, "public": "", "description": "The getUTCFullYear() method returns a four-digit number that represents a year according to the Universal Coordinated Time (UTC).\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "UTC": {"return": {"type": "Date", "description": "the new Date object"}, "static": "", "params": [{"type": "String", "name": "year", "description": "  Required. A four-digit value representing the year"}, {"type": "String", "name": "month", "description": "  Required. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Required. A numeric value (from 1 to 31) that represents a day in a month"}, {"type": "String", "name": "hours", "description": "  Optional. A numeric value (from 0 to 23) that represents a hour of a day"}, {"type": "String", "name": "min", "description": "  Optional. A numeric value (from 0 to 59) that represents a minutes of an hour"}, {"type": "String", "name": "sec", "description": "  Optional. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "ms", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "description": "The UTC() method takes a date and returns the number of milliseconds since midnight of January 1, 1970 according to universal time.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setMonth": {"params": [{"type": "String", "name": "month", "description": "  Required. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Optional. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setMonth() method is used to set the month of the year; 0-11.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setMinutes": {"params": [{"type": "String", "name": "min", "description": "  Required. A numeric value (from 0 to 59) that represents a minutes of an hour"}, {"type": "String", "name": "sec", "description": "  Optional. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setMinutes() method is used to set the minute of the hour; 1-31.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setUTCHours": {"params": [{"type": "String", "name": "hours", "description": "  Required. A numeric value (from 0 to 23) that represents a hour of a day"}, {"type": "String", "name": "min", "description": "  Optional. A numeric value (from 0 to 59) that represents a minutes of an hour"}, {"type": "String", "name": "sec", "description": "  Optional. A numeric value (from 0 to 59) that represents a second of a minute"}, {"type": "String", "name": "millisec", "description": "  Optional. A numeric value (from 0 to 999) that represents a millisecond of a second"}], "public": "", "description": "The setUTCHours() method is used to set the hour of the day according to universal time; 0-23.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "getTimezoneOffset": {"return": {"type": "Number", "description": "the difference in minutes between local time and Greenwich Mean Time (GMT)"}, "public": "", "description": "The getTimezoneOffset() method returns the difference in minutes between Greenwich Mean Time (GMT) and local time.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "getUTCMonth": {"return": {"type": "Number", "description": "the month of the year according to universal time"}, "public": "", "description": "The getUTCMonth() method returns the month, as a number according to the Universal Coordinated Time (UTC); 0-11.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setUTCFullYear": {"params": [{"type": "String", "name": "year", "description": "  Required. A four-digit value representing the year"}, {"type": "String", "name": "month", "description": "  Optional. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Optional. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setUTCFullYear() method is used to set the year according to universal time.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "getMilliseconds": {"return": {"type": "Number", "description": "the milliseconds of the second"}, "public": "", "description": "The getMilliseconds() method returns the milliseconds of a time.; 0-999.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "setYear": {"depreciated": "use setFullYear instead", "params": [{"type": "String", "name": "year", "description": "  Required. A two- or four-digit value representing the year"}, {"type": "String", "name": "month", "description": "  Optional. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Optional. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setYear() method is used to set the year; 2- or 4-digits.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setTime": {"params": [{"type": "String", "name": "millisec", "description": "   \tRequired. A numeric value representing the milliseconds since midnight January 1, 1970. Can be a negative number"}], "public": "", "description": "The setTime() method is used to calculate a date and time by adding or subtracting a specified number of milliseconds to\/from midnight January 1, 1970.\nsince FireFox 1.0, Netscape 2.0, and IE 3.0"}, "setFullYear": {"params": [{"type": "String", "name": "year", "description": "  Required. A four-digit value representing the year"}, {"type": "String", "name": "month", "description": "  Optional. A numeric value (from 0 to 11) that represents a month in a year"}, {"type": "String", "name": "day", "description": "  Optional. A numeric value (from 1 to 31) that represents a day in a month"}], "public": "", "description": "The setFullYear() method is used to set the year.\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}}, "file": "date.js", "shortname": "Date", "properties": {"prototype": {"type": "Object", "description": "Allows you to add properties and methods to the object\nsince FireFox 1.0, Netscape 3.0, and IE 4.0", "public": ""}}, "description": "The JavaScript Date Object\nsince FireFox 1.0, Netscape 4.0, and IE 4.0"}, "Boolean": {"name": "Boolean", "constructors": [{"description": "The JavaScript Boolean Object\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}], "namespace": "", "module": "window", "methods": {"toString": {"return": {"type": "String", "description": "the Boolean as a String"}, "public": "", "description": "The toString() method converts a Boolean value to a string and returns the result."}, "valueOf": {"return": {"type": "boolean", "description": "the boolean primitive"}, "public": "", "description": "The valueOf() method returns the primitive value of a Boolean object.\nsince FireFox 1.0 and IE 4.0"}, "toSource": {"return": {"type": "String", "description": "the source-code that generated the Boolean"}, "public": "", "description": "Returns the source-code used to generate Boolean.\nsince FireFox 1.0 and Netscape 4.0"}}, "file": "boolean.js", "shortname": "Boolean", "properties": {"prototype": {"type": "Object", "description": "Allows you to add properties and methods to the object\nsince FireFox 1.0, Netscape 2.0, and IE 4.0", "public": ""}}, "description": "The JavaScript Boolean Object\nsince FireFox 1.0, Netscape 2.0, and IE 4.0"}, "YAHOO.util.Point": {"name": "YAHOO.util.Point", "constructors": [{"params": [{"type": "Int", "name": "x", "description": " The X position of the point"}, {"type": "Int", "name": "y", "description": " The Y position of the point"}], "description": "A point is a region that is special in that it represents a single point on \nthe grid."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Point", "extends": "YAHOO.util.Region", "superclass": "YAHOO.util.Region", "file": "dom.js", "guessedtype": "function", "shortname": "Point", "properties": {"y": {"type": "Int", "description": "The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Int", "description": "The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)", "guessedname": "x", "guessedtype": "property"}}, "description": "A point is a region that is special in that it represents a single point on \nthe grid."}, "C.HTML.CLS": {"name": "C.HTML.CLS", "namespace": "C.HTML", "module": "window", "guessedname": "CLS", "static": "", "file": "constant.js", "guessedtype": "property", "shortname": "CLS", "properties": {"HOVER": {"description": "The DOM class attribute for emulating :hover psuedo class.", "readonly": "Defined at build time.", "static": "", "guessedname": "HOVER", "guessedtype": "property", "type": "{String}", "final": ""}, "HIDE": {"description": "The DOM class attribute for applying the \"display:none\" style.", "readonly": "Defined at build time.", "static": "", "guessedname": "HIDE", "guessedtype": "property", "type": "{String}", "final": ""}, "SELECTED": {"description": "The DOM class attribute for applying selected styles and\/or identifying element state.", "readonly": "Defined at build time.", "static": "", "guessedname": "SELECTED", "guessedtype": "property", "type": "{String}", "final": ""}, "NEXT": {"description": "The DOM class attribute for identifying 'next' elements (usually used in pagination).", "readonly": "Defined at build time.", "static": "", "guessedname": "NEXT", "guessedtype": "property", "type": "{String}", "final": ""}, "DISABLED": {"description": "The DOM class attribute for applying disabled styles and\/or identifying element state.", "readonly": "Defined at build time.", "static": "", "guessedname": "DISABLED", "guessedtype": "property", "type": "{String}", "final": ""}, "ERROR": {"description": "The DOM class attribute for applying error styles.", "readonly": "Defined at build time.", "static": "", "guessedname": "ERROR", "guessedtype": "property", "type": "{String}", "final": ""}, "LAST": {"description": "The DOM class attribute for emulating :last-child psuedo class.", "readonly": "Defined at build time.", "static": "", "guessedname": "LAST", "guessedtype": "property", "type": "{String}", "final": ""}, "HIDDEN": {"description": "The DOM class attribute for applying the \"visibility:hidden\" style.", "readonly": "Defined at build time.", "static": "", "guessedname": "HIDDEN", "guessedtype": "property", "type": "{String}", "final": ""}, "PREV": {"description": "The DOM class attribute for identifying 'previous' elements (usually used in pagination).", "readonly": "Defined at build time.", "static": "", "guessedname": "PREV", "guessedtype": "property", "type": "{String}", "final": ""}, "OPEN": {"description": "The DOM class attribute for applying open styles and\/or identifying element state.", "readonly": "Defined at build time.", "static": "", "guessedname": "OPEN", "guessedtype": "property", "type": "{String}", "final": ""}, "MESSAGE": {"description": "The DOM class attribute for applying message styles.", "readonly": "Defined at build time.", "static": "", "guessedname": "MESSAGE", "guessedtype": "property", "type": "{String}", "final": ""}, "FIRST": {"description": "The DOM class attribute for emulating :first-child psuedo class.", "readonly": "Defined at build time.", "static": "", "guessedname": "FIRST", "guessedtype": "property", "type": "{String}", "final": ""}}, "description": "The global object to hold all className constants."}}, "version": "1.0.01", "namespaces": ["YAHOO.util", "YAHOO.widget", "window", "C", "C.HTML", "YAHOO.util.Form", "YAHOO.util.Form.Element", "Core.Util"]}